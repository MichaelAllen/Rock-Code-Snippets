{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About These Notes These are mainly notes I have created for internal use. I am sharing them here in the hope that they may be helpful for someone, but I make no promises that they are error-free. If you have a question about any of these files, feel free to reach out to me on Rocket Chat @michaelallen. Finding Things Folder Structure Each snippet is in a folder for the domain of Rock that it relates to. (Similar to the structure used here ) Tag Types Each file should be tagged with one or more tags from each of the categories below to make it easier to find what you are looking for. language/?? - What language is used in this snippet? type/ - What is the primary function of this snippet? cleanup - Clean up bad/duplicate/old data reporting - Return information utility - Make a task easier topic/?? - What are some topics that the snippet relates to? Primarily to help with searching. If you want to browse by tags, you can visit the Tags Index . You can also use tags in the search box above. Disclaimer Never run code you found online, unless you read it and understand what it is doing. That is a great way to have a bad day. This site is auto synced from Obsidian on my computer to Github . It is then automatically compiled into a website using MkDocs .","title":"About These Notes"},{"location":"#about-these-notes","text":"These are mainly notes I have created for internal use. I am sharing them here in the hope that they may be helpful for someone, but I make no promises that they are error-free. If you have a question about any of these files, feel free to reach out to me on Rocket Chat @michaelallen.","title":"About These Notes"},{"location":"#finding-things","text":"","title":"Finding Things"},{"location":"#folder-structure","text":"Each snippet is in a folder for the domain of Rock that it relates to. (Similar to the structure used here )","title":"Folder Structure"},{"location":"#tag-types","text":"Each file should be tagged with one or more tags from each of the categories below to make it easier to find what you are looking for. language/?? - What language is used in this snippet? type/ - What is the primary function of this snippet? cleanup - Clean up bad/duplicate/old data reporting - Return information utility - Make a task easier topic/?? - What are some topics that the snippet relates to? Primarily to help with searching. If you want to browse by tags, you can visit the Tags Index . You can also use tags in the search box above.","title":"Tag Types"},{"location":"#disclaimer","text":"Never run code you found online, unless you read it and understand what it is doing. That is a great way to have a bad day. This site is auto synced from Obsidian on my computer to Github . It is then automatically compiled into a website using MkDocs .","title":"Disclaimer"},{"location":"CMS/fix-corrupted-block-attribute-value/","text":"Fix Corrupted Block Attribute Value Occasionally a block's attribute value will get so messed up that you can't even load the page to fix it. (Usually caused by a bad lava template). These instructions will help to fix that issue. Steps 1) Try CMS Config Sometimes you can't load the page itself, but you can still access its block settings through Admin Tools > CMS Configuration > Pages . If that page also errors out, then SQL is probably your only option. 2) Find the Block Id of the Offending Block This query will give you a list of all the blocks on the specified page. DECLARE @ PageId int = 3 ; --Replace with the Id of your broken page SELECT b .[ Id ] 'BlockId' , bt .[ Name ] 'BlockType' , b .[ Name ] FROM [ Block ] b JOIN [ BlockType ] bt ON b .[ BlockTypeId ] = bt .[ Id ] WHERE b .[ PageId ] = @ PageId 3) Find the Attribute Id of the Corrupted Attribute This query will list all of the attributes of the specified block. DECLARE @ BlockId int = 10 ; --Replace with the Id of the block that has the corrupted attribute DECLARE @ BlockEntityTypeId int = ( SELECT [ Id ] FROM [ EntityType ] WHERE [ Name ] = 'Rock.Model.Block' ); SELECT av .[ Id ] 'AttributeValueId' , a .[ Name ] , av .[ Value ] FROM [ Attribute ] a JOIN [ AttributeValue ] av ON a .[ Id ] = av .[ AttributeId ] WHERE a .[ EntityTypeId ] = @ BlockEntityTypeId AND av .[ EntityId ] = @ BlockId 4) Update the Corrupted Attribute There are 2 options here. We can either try to save the work we've done by commenting it out, or we can delete the corrupted value and let Rock set it back to the default value. Be careful. A typo in this step can destroy data! Option 1 This query will attempt to \"comment out\" the value. You can use this in cases of a bad lava template causing issues, but it won't work with any other type of attribute. DECLARE @ AttributeValueId int = 123 ; --Replace with the Id of the corrupted attribute UPDATE [ AttributeValue ] SET [ Value ] = '{% comment %}{% raw %}' + [ Value ] + '{% endraw %}{% endcomment %}' WHERE [ Id ] = @ AttributeValueId Option 2 This query will delete the corrupted attribute; causing Rock to set it back to its default value. DECLARE @ AttributeValueId int = 123 ; --Replace with the Id of the corrupted attribute DELETE FROM [ AttributeValue ] WHERE [ Id ] = @ AttributeValueId 5) Clear the Rock Cache Once you have cleared the cache and reloaded the site, you should be able to access the page again.","title":"Fix Corrupted Block Attribute Value"},{"location":"CMS/fix-corrupted-block-attribute-value/#fix-corrupted-block-attribute-value","text":"Occasionally a block's attribute value will get so messed up that you can't even load the page to fix it. (Usually caused by a bad lava template). These instructions will help to fix that issue.","title":"Fix Corrupted Block Attribute Value"},{"location":"CMS/fix-corrupted-block-attribute-value/#steps","text":"","title":"Steps"},{"location":"CMS/fix-corrupted-block-attribute-value/#1-try-cms-config","text":"Sometimes you can't load the page itself, but you can still access its block settings through Admin Tools > CMS Configuration > Pages . If that page also errors out, then SQL is probably your only option.","title":"1) Try CMS Config"},{"location":"CMS/fix-corrupted-block-attribute-value/#2-find-the-block-id-of-the-offending-block","text":"This query will give you a list of all the blocks on the specified page. DECLARE @ PageId int = 3 ; --Replace with the Id of your broken page SELECT b .[ Id ] 'BlockId' , bt .[ Name ] 'BlockType' , b .[ Name ] FROM [ Block ] b JOIN [ BlockType ] bt ON b .[ BlockTypeId ] = bt .[ Id ] WHERE b .[ PageId ] = @ PageId","title":"2) Find the Block Id of the Offending Block"},{"location":"CMS/fix-corrupted-block-attribute-value/#3-find-the-attribute-id-of-the-corrupted-attribute","text":"This query will list all of the attributes of the specified block. DECLARE @ BlockId int = 10 ; --Replace with the Id of the block that has the corrupted attribute DECLARE @ BlockEntityTypeId int = ( SELECT [ Id ] FROM [ EntityType ] WHERE [ Name ] = 'Rock.Model.Block' ); SELECT av .[ Id ] 'AttributeValueId' , a .[ Name ] , av .[ Value ] FROM [ Attribute ] a JOIN [ AttributeValue ] av ON a .[ Id ] = av .[ AttributeId ] WHERE a .[ EntityTypeId ] = @ BlockEntityTypeId AND av .[ EntityId ] = @ BlockId","title":"3) Find the Attribute Id of the Corrupted Attribute"},{"location":"CMS/fix-corrupted-block-attribute-value/#4-update-the-corrupted-attribute","text":"There are 2 options here. We can either try to save the work we've done by commenting it out, or we can delete the corrupted value and let Rock set it back to the default value. Be careful. A typo in this step can destroy data! Option 1 This query will attempt to \"comment out\" the value. You can use this in cases of a bad lava template causing issues, but it won't work with any other type of attribute. DECLARE @ AttributeValueId int = 123 ; --Replace with the Id of the corrupted attribute UPDATE [ AttributeValue ] SET [ Value ] = '{% comment %}{% raw %}' + [ Value ] + '{% endraw %}{% endcomment %}' WHERE [ Id ] = @ AttributeValueId Option 2 This query will delete the corrupted attribute; causing Rock to set it back to its default value. DECLARE @ AttributeValueId int = 123 ; --Replace with the Id of the corrupted attribute DELETE FROM [ AttributeValue ] WHERE [ Id ] = @ AttributeValueId","title":"4) Update the Corrupted Attribute"},{"location":"CMS/fix-corrupted-block-attribute-value/#5-clear-the-rock-cache","text":"Once you have cleared the cache and reloaded the site, you should be able to access the page again.","title":"5) Clear the Rock Cache"},{"location":"CMS/list-html-content-blocks-by-page/","text":"List HTML Content Blocks By Page Returns a list of all HTML content blocks on a specified page, along with their current contents. Query DECLARE @ PageId int = 12 ; --Which page to report on? DECLARE @ HtmlContentBlockType int = ( SELECT [ Id ] FROM [ BlockType ] WHERE [ Guid ] = '19B61D65-37E3-459F-A44F-DEF0089118A3' ); SELECT b .[ Id ] 'BlockId' , b .[ Zone ] --,b.[Order] , b .[ Name ] , h .[ Id ] 'HtmlContentId' , h .[ Content ] --,h.[Version] FROM [ Block ] b JOIN [ HtmlContent ] h ON b .[ Id ] = h .[ BlockId ] WHERE b .[ BlockTypeId ] = @ HtmlContentBlockType AND b .[ PageId ] = @ PageId ORDER BY b .[ Zone ] , b .[ Order ] , h .[ Version ] DESC","title":"List HTML Content Blocks By Page"},{"location":"CMS/list-html-content-blocks-by-page/#list-html-content-blocks-by-page","text":"Returns a list of all HTML content blocks on a specified page, along with their current contents.","title":"List HTML Content Blocks By Page"},{"location":"CMS/list-html-content-blocks-by-page/#query","text":"DECLARE @ PageId int = 12 ; --Which page to report on? DECLARE @ HtmlContentBlockType int = ( SELECT [ Id ] FROM [ BlockType ] WHERE [ Guid ] = '19B61D65-37E3-459F-A44F-DEF0089118A3' ); SELECT b .[ Id ] 'BlockId' , b .[ Zone ] --,b.[Order] , b .[ Name ] , h .[ Id ] 'HtmlContentId' , h .[ Content ] --,h.[Version] FROM [ Block ] b JOIN [ HtmlContent ] h ON b .[ Id ] = h .[ BlockId ] WHERE b .[ BlockTypeId ] = @ HtmlContentBlockType AND b .[ PageId ] = @ PageId ORDER BY b .[ Zone ] , b .[ Order ] , h .[ Version ] DESC","title":"Query"},{"location":"CMS/media-interactions-by-content-channel-item/","text":"Media Interactions by Content Channel Item Credit: Randy Aufrecht Returns a list of all content channel items in a specified content channel. Includes media watch stats for the media element linked to them. Result Columns Name Description Id Content Channel Item Id MediaId Media Element Id Title Content Channel Item Title MinutesWatched Total number of minutes watched TotalInteractions Total number of times someone has interacted with the video AvgMinutesPerInteracction MinutesWatched \u00f7 TotalInteractions UniqueUsers Number of unique users that interacted with the content (must have been logged in) AvgMinutesPerUser MinutesWatched \u00f7 UniqueUsers CreatedDateTime Created Date Time for the Media Element Query /* Messages */ DECLARE @ ContentChannelId int = 5 ; DECLARE @ VideoAttributeId int = 12233 ; /* Worhsip Archives - Worship DECLARE @ContentChannelId int = 68; DECLARE @VideoAttributeId int = 12528; */ /* Worhsip Archives - Multiviewer DECLARE @ContentChannelId int = 68; DECLARE @VideoAttributeId int = 12523; */ DECLARE @ MediaEventsInteractionChannelId int = ( SELECT [ Id ] FROM [ InteractionChannel ] WHERE [ Guid ] = 'D5B9BDAF-6E52-40D5-8E74-4E23973DF159' ); SELECT cci .[ Id ] , me .[ Id ] 'MediaId' , cci .[ Title ] , ROUND (( SUM ( i .[ InteractionLength ]) / 100 * me .[ DurationSeconds ]) / 60 , 0 ) 'MinutesWatched' , COUNT ( i .[ Id ]) 'TotalInteractions' , ROUND ((( SUM ( i .[ InteractionLength ]) / 100 * me .[ DurationSeconds ]) / 60 ) / NULLIF ( COUNT ( i .[ Id ]), 0 ), 1 ) 'AvgMinutesPerInteraction' , COUNT ( DISTINCT pa .[ PersonId ]) 'UniqueUsers-LoggedIn' , ROUND ((( SUM ( i .[ InteractionLength ]) / 100 * me .[ DurationSeconds ]) / 60 ) / NULLIF ( COUNT ( DISTINCT pa .[ PersonId ]), 0 ), 1 ) 'AvgMinutesPerUser' , me .[ CreatedDateTime ] FROM [ ContentChannelItem ] cci INNER JOIN [ AttributeValue ] av ON av .[ AttributeId ] = @ VideoAttributeId AND cci .[ Id ] = av .[ EntityId ] INNER JOIN [ MediaElement ] me ON TRY_CAST ( av .[ Value ] AS UNIQUEIDENTIFIER ) = me .[ Guid ] LEFT JOIN [ InteractionComponent ] ic ON ic .[ InteractionChannelId ] = @ MediaEventsInteractionChannelId AND ic .[ EntityId ] = me .[ Id ] LEFT JOIN [ Interaction ] i ON i .[ InteractionComponentId ] = ic .[ Id ] LEFT JOIN [ PersonAlias ] pa ON i .[ PersonAliasId ] = pa .[ Id ] WHERE cci .[ ContentChannelId ] = @ ContentChannelId GROUP BY cci .[ Id ] , cci .[ Title ] , cci .[ StartDateTime ] , me .[ Id ] , me .[ DurationSeconds ] , me .[ CreatedDateTime ] ORDER BY cci .[ StartDateTime ] DESC","title":"Media Interactions by Content Channel Item"},{"location":"CMS/media-interactions-by-content-channel-item/#media-interactions-by-content-channel-item","text":"Credit: Randy Aufrecht Returns a list of all content channel items in a specified content channel. Includes media watch stats for the media element linked to them.","title":"Media Interactions by Content Channel Item"},{"location":"CMS/media-interactions-by-content-channel-item/#result-columns","text":"Name Description Id Content Channel Item Id MediaId Media Element Id Title Content Channel Item Title MinutesWatched Total number of minutes watched TotalInteractions Total number of times someone has interacted with the video AvgMinutesPerInteracction MinutesWatched \u00f7 TotalInteractions UniqueUsers Number of unique users that interacted with the content (must have been logged in) AvgMinutesPerUser MinutesWatched \u00f7 UniqueUsers CreatedDateTime Created Date Time for the Media Element","title":"Result Columns"},{"location":"CMS/media-interactions-by-content-channel-item/#query","text":"/* Messages */ DECLARE @ ContentChannelId int = 5 ; DECLARE @ VideoAttributeId int = 12233 ; /* Worhsip Archives - Worship DECLARE @ContentChannelId int = 68; DECLARE @VideoAttributeId int = 12528; */ /* Worhsip Archives - Multiviewer DECLARE @ContentChannelId int = 68; DECLARE @VideoAttributeId int = 12523; */ DECLARE @ MediaEventsInteractionChannelId int = ( SELECT [ Id ] FROM [ InteractionChannel ] WHERE [ Guid ] = 'D5B9BDAF-6E52-40D5-8E74-4E23973DF159' ); SELECT cci .[ Id ] , me .[ Id ] 'MediaId' , cci .[ Title ] , ROUND (( SUM ( i .[ InteractionLength ]) / 100 * me .[ DurationSeconds ]) / 60 , 0 ) 'MinutesWatched' , COUNT ( i .[ Id ]) 'TotalInteractions' , ROUND ((( SUM ( i .[ InteractionLength ]) / 100 * me .[ DurationSeconds ]) / 60 ) / NULLIF ( COUNT ( i .[ Id ]), 0 ), 1 ) 'AvgMinutesPerInteraction' , COUNT ( DISTINCT pa .[ PersonId ]) 'UniqueUsers-LoggedIn' , ROUND ((( SUM ( i .[ InteractionLength ]) / 100 * me .[ DurationSeconds ]) / 60 ) / NULLIF ( COUNT ( DISTINCT pa .[ PersonId ]), 0 ), 1 ) 'AvgMinutesPerUser' , me .[ CreatedDateTime ] FROM [ ContentChannelItem ] cci INNER JOIN [ AttributeValue ] av ON av .[ AttributeId ] = @ VideoAttributeId AND cci .[ Id ] = av .[ EntityId ] INNER JOIN [ MediaElement ] me ON TRY_CAST ( av .[ Value ] AS UNIQUEIDENTIFIER ) = me .[ Guid ] LEFT JOIN [ InteractionComponent ] ic ON ic .[ InteractionChannelId ] = @ MediaEventsInteractionChannelId AND ic .[ EntityId ] = me .[ Id ] LEFT JOIN [ Interaction ] i ON i .[ InteractionComponentId ] = ic .[ Id ] LEFT JOIN [ PersonAlias ] pa ON i .[ PersonAliasId ] = pa .[ Id ] WHERE cci .[ ContentChannelId ] = @ ContentChannelId GROUP BY cci .[ Id ] , cci .[ Title ] , cci .[ StartDateTime ] , me .[ Id ] , me .[ DurationSeconds ] , me .[ CreatedDateTime ] ORDER BY cci .[ StartDateTime ] DESC","title":"Query"},{"location":"CRM/Get%20Person%27s%20Grade%20in%20SQL/","text":"Get Person's Grade in SQL Rock stores a person's graduation year, not their grade. It turns out that is is actually quite difficult to convert that value into a grade string since you have to take into account the transition date set in Rock. Query /* Setup Info */ DECLARE @ GradeDefinedTypeId int = ( SELECT [ Id ] FROM [ DefinedType ] WHERE [ Guid ] = '24E5A79F-1E62-467A-AD5D-0D10A2328B4D' ); DECLARE @ GradeTransitionDateAttributeId int = ( SELECT [ Id ] FROM [ Attribute ] WHERE [ Guid ] = '265734a6-c888-45b4-a7a5-9a26478306b8' ); DECLARE @ ThisYear nvarchar ( 4 ) = ( SELECT FORMAT ( GETDATE (), 'yyyy' ) ); DECLARE @ GradeTransitionDate datetime = ( SELECT CAST ( [ Value ] + '/' + @ ThisYear AS datetime ) FROM [ AttributeValue ] WHERE [ AttributeId ] = @ GradeTransitionDateAttributeId ); /* Person Info */ DECLARE @ PersonId int = 50532 ; DECLARE @ GradYear int = ( SELECT [ GraduationYear ] FROM [ Person ] WHERE [ Id ] = @ PersonId ); DECLARE @ GradeOffset int = ( SELECT dbo .[ ufnCrm_GetGradeOffset ]( @ GradYear , @ GradeTransitionDate ) ); SELECT [ Description ] FROM [ DefinedValue ] WHERE [ DefinedTypeId ] = @ GradeDefinedTypeId AND [ Value ] = @ GradeOffset ;","title":"Get Person's Grade in SQL"},{"location":"CRM/Get%20Person%27s%20Grade%20in%20SQL/#get-persons-grade-in-sql","text":"Rock stores a person's graduation year, not their grade. It turns out that is is actually quite difficult to convert that value into a grade string since you have to take into account the transition date set in Rock.","title":"Get Person's Grade in SQL"},{"location":"CRM/Get%20Person%27s%20Grade%20in%20SQL/#query","text":"/* Setup Info */ DECLARE @ GradeDefinedTypeId int = ( SELECT [ Id ] FROM [ DefinedType ] WHERE [ Guid ] = '24E5A79F-1E62-467A-AD5D-0D10A2328B4D' ); DECLARE @ GradeTransitionDateAttributeId int = ( SELECT [ Id ] FROM [ Attribute ] WHERE [ Guid ] = '265734a6-c888-45b4-a7a5-9a26478306b8' ); DECLARE @ ThisYear nvarchar ( 4 ) = ( SELECT FORMAT ( GETDATE (), 'yyyy' ) ); DECLARE @ GradeTransitionDate datetime = ( SELECT CAST ( [ Value ] + '/' + @ ThisYear AS datetime ) FROM [ AttributeValue ] WHERE [ AttributeId ] = @ GradeTransitionDateAttributeId ); /* Person Info */ DECLARE @ PersonId int = 50532 ; DECLARE @ GradYear int = ( SELECT [ GraduationYear ] FROM [ Person ] WHERE [ Id ] = @ PersonId ); DECLARE @ GradeOffset int = ( SELECT dbo .[ ufnCrm_GetGradeOffset ]( @ GradYear , @ GradeTransitionDate ) ); SELECT [ Description ] FROM [ DefinedValue ] WHERE [ DefinedTypeId ] = @ GradeDefinedTypeId AND [ Value ] = @ GradeOffset ;","title":"Query"},{"location":"CRM/find-missing-mailing-addresses/","text":"Find Missing Mailing Addresses Credit: Daniel Hazelbaker Finds all people with a home address but no mailing address. Optionally sets the mailing address flag on their first home address. Query BEGIN TRANSACTION CREATE TABLE # HasHomeAddress ([ PersonId ] int ) CREATE TABLE # HasMailingAddress ([ PersonId ] int ) CREATE TABLE # MissingMailingFlag ([ PersonId ] int , [ GroupLocationId ] int NULL ) DECLARE @ FamilyGroupTypeId int = ( SELECT [ Id ] FROM [ GroupType ] WHERE [ Guid ] = '790E3215-3B10-442B-AF69-616C0DCB998E' ) DECLARE @ HomeAddressValueId int = ( SELECT [ Id ] FROM [ DefinedValue ] WHERE [ Guid ] = '8C52E53C-2A66-435A-AE6E-5EE307D9A0DC' ) DECLARE @ PersonRecordTypeValueId int = ( SELECT [ Id ] FROM [ DefinedValue ] WHERE [ Guid ] = '36CF10D6-C695-413D-8E7C-4546EFEF385E' ) -- Find every Person who has a Home address type. INSERT INTO # HasHomeAddress SELECT DISTINCT P .[ Id ] FROM [ Person ] AS P INNER JOIN [ GroupMember ] AS GM ON GM .[ PersonId ] = P .[ Id ] INNER JOIN [ Group ] AS G ON G .[ Id ] = GM .[ GroupId ] INNER JOIN [ GroupLocation ] AS GL ON GL .[ GroupId ] = G .[ Id ] WHERE G .[ GroupTypeId ] = @ FamilyGroupTypeId AND P .[ RecordTypeValueId ] = @ PersonRecordTypeValueId AND GL .[ GroupLocationTypeValueId ] = @ HomeAddressValueId -- Find every Person who has a mailing address. INSERT INTO # HasMailingAddress SELECT DISTINCT P .[ Id ] FROM [ Person ] AS P INNER JOIN [ GroupMember ] AS GM ON GM .[ PersonId ] = P .[ Id ] INNER JOIN [ Group ] AS G ON G .[ Id ] = GM .[ GroupId ] INNER JOIN [ GroupLocation ] AS GL ON GL .[ GroupId ] = G .[ Id ] WHERE G .[ GroupTypeId ] = @ FamilyGroupTypeId AND GL .[ IsMailingLocation ] = 1 -- Find every Person who has a Home address but does NOT have a Mailing address. INSERT INTO # MissingMailingFlag ([ PersonId ]) SELECT H .[ PersonId ] FROM # HasHomeAddress AS H LEFT JOIN # HasMailingAddress AS M ON M .[ PersonId ] = H .[ PersonId ] WHERE M .[ PersonId ] IS NULL -- Update the list of people with their first found Home address. UPDATE M SET M .[ GroupLocationId ] = ( SELECT TOP 1 GL .[ Id ] FROM [ Person ] AS P INNER JOIN [ GroupMember ] AS GM ON GM .[ PersonId ] = P .[ Id ] INNER JOIN [ Group ] AS G ON G .[ Id ] = GM .[ GroupId ] INNER JOIN [ GroupLocation ] AS GL ON GL .[ GroupId ] = G .[ Id ] WHERE P .[ Id ] = M .[ PersonId ] AND G .[ GroupTypeId ] = @ FamilyGroupTypeId AND GL .[ GroupLocationTypeValueId ] = @ HomeAddressValueId ) FROM # MissingMailingFlag AS M SELECT * FROM # MissingMailingFlag -- Uncomment the following to mark the first Home address as mailing /* UPDATE GL SET GL.[IsMailingLocation] = 1 FROM [GroupLocation] AS GL INNER JOIN #MissingMailingFlag AS M ON M.[GroupLocationId] = GL.[Id] */ DROP TABLE # HasHomeAddress DROP TABLE # HasMailingAddress DROP TABLE # MissingMailingFlag ROLLBACK TRANSACTION --COMMIT TRANSACTION","title":"Find Missing Mailing Addresses"},{"location":"CRM/find-missing-mailing-addresses/#find-missing-mailing-addresses","text":"Credit: Daniel Hazelbaker Finds all people with a home address but no mailing address. Optionally sets the mailing address flag on their first home address.","title":"Find Missing Mailing Addresses"},{"location":"CRM/find-missing-mailing-addresses/#query","text":"BEGIN TRANSACTION CREATE TABLE # HasHomeAddress ([ PersonId ] int ) CREATE TABLE # HasMailingAddress ([ PersonId ] int ) CREATE TABLE # MissingMailingFlag ([ PersonId ] int , [ GroupLocationId ] int NULL ) DECLARE @ FamilyGroupTypeId int = ( SELECT [ Id ] FROM [ GroupType ] WHERE [ Guid ] = '790E3215-3B10-442B-AF69-616C0DCB998E' ) DECLARE @ HomeAddressValueId int = ( SELECT [ Id ] FROM [ DefinedValue ] WHERE [ Guid ] = '8C52E53C-2A66-435A-AE6E-5EE307D9A0DC' ) DECLARE @ PersonRecordTypeValueId int = ( SELECT [ Id ] FROM [ DefinedValue ] WHERE [ Guid ] = '36CF10D6-C695-413D-8E7C-4546EFEF385E' ) -- Find every Person who has a Home address type. INSERT INTO # HasHomeAddress SELECT DISTINCT P .[ Id ] FROM [ Person ] AS P INNER JOIN [ GroupMember ] AS GM ON GM .[ PersonId ] = P .[ Id ] INNER JOIN [ Group ] AS G ON G .[ Id ] = GM .[ GroupId ] INNER JOIN [ GroupLocation ] AS GL ON GL .[ GroupId ] = G .[ Id ] WHERE G .[ GroupTypeId ] = @ FamilyGroupTypeId AND P .[ RecordTypeValueId ] = @ PersonRecordTypeValueId AND GL .[ GroupLocationTypeValueId ] = @ HomeAddressValueId -- Find every Person who has a mailing address. INSERT INTO # HasMailingAddress SELECT DISTINCT P .[ Id ] FROM [ Person ] AS P INNER JOIN [ GroupMember ] AS GM ON GM .[ PersonId ] = P .[ Id ] INNER JOIN [ Group ] AS G ON G .[ Id ] = GM .[ GroupId ] INNER JOIN [ GroupLocation ] AS GL ON GL .[ GroupId ] = G .[ Id ] WHERE G .[ GroupTypeId ] = @ FamilyGroupTypeId AND GL .[ IsMailingLocation ] = 1 -- Find every Person who has a Home address but does NOT have a Mailing address. INSERT INTO # MissingMailingFlag ([ PersonId ]) SELECT H .[ PersonId ] FROM # HasHomeAddress AS H LEFT JOIN # HasMailingAddress AS M ON M .[ PersonId ] = H .[ PersonId ] WHERE M .[ PersonId ] IS NULL -- Update the list of people with their first found Home address. UPDATE M SET M .[ GroupLocationId ] = ( SELECT TOP 1 GL .[ Id ] FROM [ Person ] AS P INNER JOIN [ GroupMember ] AS GM ON GM .[ PersonId ] = P .[ Id ] INNER JOIN [ Group ] AS G ON G .[ Id ] = GM .[ GroupId ] INNER JOIN [ GroupLocation ] AS GL ON GL .[ GroupId ] = G .[ Id ] WHERE P .[ Id ] = M .[ PersonId ] AND G .[ GroupTypeId ] = @ FamilyGroupTypeId AND GL .[ GroupLocationTypeValueId ] = @ HomeAddressValueId ) FROM # MissingMailingFlag AS M SELECT * FROM # MissingMailingFlag -- Uncomment the following to mark the first Home address as mailing /* UPDATE GL SET GL.[IsMailingLocation] = 1 FROM [GroupLocation] AS GL INNER JOIN #MissingMailingFlag AS M ON M.[GroupLocationId] = GL.[Id] */ DROP TABLE # HasHomeAddress DROP TABLE # HasMailingAddress DROP TABLE # MissingMailingFlag ROLLBACK TRANSACTION --COMMIT TRANSACTION","title":"Query"},{"location":"CRM/remove-parent%27s-email-from-child%27s-record/","text":"Remove Parent's Email From Child's Record Credit: Daniel Hazelbaker Finds all child records that have the same email as a parent, and removes the email from the child. It also records the change to person history for tracking purposes. Query DECLARE @ FamilyTypeId int = ( SELECT [ Id ] FROM [ GroupType ] WHERE [ Guid ] = '790E3215-3B10-442B-AF69-616C0DCB998E' ); DECLARE @ ChildEmailPersonIds TABLE ([ Id ] int ); -- Find all < 18 people that have the same email as a family member that is > 18 INSERT INTO @ ChildEmailPersonIds SELECT DISTINCT P .[ Id ] FROM [ Person ] AS P INNER JOIN [ Person ] AS P2 ON P2 .[ Email ] = P .[ Email ] INNER JOIN [ GroupMember ] AS FM ON FM .[ PersonId ] = P .[ Id ] INNER JOIN [ Group ] AS F ON F .[ Id ] = FM .[ GroupId ] INNER JOIN [ GroupMember ] AS FM2 ON FM2 .[ PersonId ] = P2 .[ Id ] INNER JOIN [ Group ] AS F2 ON F2 .[ Id ] = FM2 .[ GroupId ] WHERE F .[ GroupTypeId ] = @ FamilyTypeId AND F2 .[ GroupTypeId ] = @ FamilyTypeId AND F .[ Id ] = F2 .[ Id ] AND dbo . ufnCrm_GetAge ( P .[ BirthDate ]) < 18 AND dbo . ufnCrm_GetAge ( P2 .[ BirthDate ]) >= 18 AND P .[ Email ] IS NOT NULL AND P .[ Email ] != '' ; -- Find all child relationship Person records that have the same e-mail as their parent. DECLARE @ KnownRelationshipTypeId int = ( SELECT [ Id ] FROM [ GroupType ] WHERE [ Guid ] = 'E0C5A0E2-B7B3-4EF4-820D-BBF7F9A374EF' ); DECLARE @ OwnerRelationshipId int = ( SELECT [ Id ] FROM [ GroupTypeRole ] WHERE [ Guid ] = '7BC6C12E-0CD1-4DFD-8D5B-1B35AE714C42' ); DECLARE @ ChildRelationshipId int = ( SELECT [ Id ] FROM [ GroupTypeRole ] WHERE [ Guid ] = 'F87DF00F-E86D-4771-A3AE-DBF79B78CF5D' ); DECLARE @ StepChildRelationshipId int = ( SELECT [ Id ] FROM [ GroupTypeRole ] WHERE [ Guid ] = 'EFD2D6D1-A407-4EFB-9086-5DF1F19B7D93' ); DECLARE @ ChildRelationshipEmailPersonIds TABLE ([ Id ] int ); INSERT INTO @ ChildRelationshipEmailPersonIds SELECT DISTINCT P2 .[ Id ] FROM [ Person ] AS P INNER JOIN [ GroupMember ] AS FM ON FM .[ PersonId ] = P .[ Id ] INNER JOIN [ Group ] AS KR ON KR .[ Id ] = FM .[ GroupId ] INNER JOIN [ Group ] AS KR2 ON KR2 .[ Id ] = KR .[ Id ] INNER JOIN [ GroupMember ] AS FM2 ON FM2 .[ GroupId ] = KR2 .[ Id ] INNER JOIN [ Person ] AS P2 ON P2 .[ Id ] = FM2 .[ PersonId ] WHERE KR .[ GroupTypeId ] = @ KnownRelationshipTypeId AND KR2 .[ GroupTypeId ] = @ KnownRelationshipTypeId AND KR .[ Id ] = KR2 .[ Id ] AND P .[ Id ] != P2 .[ Id ] AND FM .[ GroupRoleId ] = @ OwnerRelationshipId AND ( FM2 .[ GroupRoleId ] = @ ChildRelationshipId OR FM2 .[ GroupRoleId ] = @ StepChildRelationshipId ) AND P .[ Email ] = P2 .[ Email ] AND P .[ Email ] IS NOT NULL AND P .[ Email ] != '' ; -- Combine both lists into one. DECLARE @ PersonIds TABLE ([ Id ] int , [ OldValue ] varchar ( 100 )) INSERT INTO @ PersonIds SELECT DISTINCT IQ .[ Id ], NULL FROM ( SELECT [ Id ] FROM @ ChildEmailPersonIds UNION SELECT [ Id ] FROM @ ChildRelationshipEmailPersonIds ) AS IQ ORDER BY IQ .[ Id ] ; -- Add the current (old) email to the list of people. UPDATE P SET P .[ OldValue ] = P2 .[ Email ] FROM @ PersonIds AS P INNER JOIN [ Person ] AS P2 ON P2 .[ Id ] = P .[ Id ] ; -- Add History records showing that we are removing the email. INSERT INTO [ History ] ( [ IsSystem ] ,[ CategoryId ] ,[ EntityTypeId ] ,[ EntityId ] ,[ Guid ] ,[ CreatedDateTime ] ,[ ModifiedDateTime ] ,[ Verb ] ,[ ChangeType ] ,[ ValueName ] ,[ OldValue ] ,[ IsSensitive ] ) SELECT 0 , 133 , 15 , P .[ Id ] , NEWID () , GETDATE () , GETDATE () , 'MODIFY' , 'Property' , 'Email' , P . OldValue , 0 FROM @ PersonIds AS P ; -- Remove the email addresses. UPDATE [ Person ] SET [ Email ] = '' WHERE [ Id ] IN ( SELECT [ Id ] FROM @ PersonIds );","title":"Remove Parent's Email From Child's Record"},{"location":"CRM/remove-parent%27s-email-from-child%27s-record/#remove-parents-email-from-childs-record","text":"Credit: Daniel Hazelbaker Finds all child records that have the same email as a parent, and removes the email from the child. It also records the change to person history for tracking purposes.","title":"Remove Parent's Email From Child's Record"},{"location":"CRM/remove-parent%27s-email-from-child%27s-record/#query","text":"DECLARE @ FamilyTypeId int = ( SELECT [ Id ] FROM [ GroupType ] WHERE [ Guid ] = '790E3215-3B10-442B-AF69-616C0DCB998E' ); DECLARE @ ChildEmailPersonIds TABLE ([ Id ] int ); -- Find all < 18 people that have the same email as a family member that is > 18 INSERT INTO @ ChildEmailPersonIds SELECT DISTINCT P .[ Id ] FROM [ Person ] AS P INNER JOIN [ Person ] AS P2 ON P2 .[ Email ] = P .[ Email ] INNER JOIN [ GroupMember ] AS FM ON FM .[ PersonId ] = P .[ Id ] INNER JOIN [ Group ] AS F ON F .[ Id ] = FM .[ GroupId ] INNER JOIN [ GroupMember ] AS FM2 ON FM2 .[ PersonId ] = P2 .[ Id ] INNER JOIN [ Group ] AS F2 ON F2 .[ Id ] = FM2 .[ GroupId ] WHERE F .[ GroupTypeId ] = @ FamilyTypeId AND F2 .[ GroupTypeId ] = @ FamilyTypeId AND F .[ Id ] = F2 .[ Id ] AND dbo . ufnCrm_GetAge ( P .[ BirthDate ]) < 18 AND dbo . ufnCrm_GetAge ( P2 .[ BirthDate ]) >= 18 AND P .[ Email ] IS NOT NULL AND P .[ Email ] != '' ; -- Find all child relationship Person records that have the same e-mail as their parent. DECLARE @ KnownRelationshipTypeId int = ( SELECT [ Id ] FROM [ GroupType ] WHERE [ Guid ] = 'E0C5A0E2-B7B3-4EF4-820D-BBF7F9A374EF' ); DECLARE @ OwnerRelationshipId int = ( SELECT [ Id ] FROM [ GroupTypeRole ] WHERE [ Guid ] = '7BC6C12E-0CD1-4DFD-8D5B-1B35AE714C42' ); DECLARE @ ChildRelationshipId int = ( SELECT [ Id ] FROM [ GroupTypeRole ] WHERE [ Guid ] = 'F87DF00F-E86D-4771-A3AE-DBF79B78CF5D' ); DECLARE @ StepChildRelationshipId int = ( SELECT [ Id ] FROM [ GroupTypeRole ] WHERE [ Guid ] = 'EFD2D6D1-A407-4EFB-9086-5DF1F19B7D93' ); DECLARE @ ChildRelationshipEmailPersonIds TABLE ([ Id ] int ); INSERT INTO @ ChildRelationshipEmailPersonIds SELECT DISTINCT P2 .[ Id ] FROM [ Person ] AS P INNER JOIN [ GroupMember ] AS FM ON FM .[ PersonId ] = P .[ Id ] INNER JOIN [ Group ] AS KR ON KR .[ Id ] = FM .[ GroupId ] INNER JOIN [ Group ] AS KR2 ON KR2 .[ Id ] = KR .[ Id ] INNER JOIN [ GroupMember ] AS FM2 ON FM2 .[ GroupId ] = KR2 .[ Id ] INNER JOIN [ Person ] AS P2 ON P2 .[ Id ] = FM2 .[ PersonId ] WHERE KR .[ GroupTypeId ] = @ KnownRelationshipTypeId AND KR2 .[ GroupTypeId ] = @ KnownRelationshipTypeId AND KR .[ Id ] = KR2 .[ Id ] AND P .[ Id ] != P2 .[ Id ] AND FM .[ GroupRoleId ] = @ OwnerRelationshipId AND ( FM2 .[ GroupRoleId ] = @ ChildRelationshipId OR FM2 .[ GroupRoleId ] = @ StepChildRelationshipId ) AND P .[ Email ] = P2 .[ Email ] AND P .[ Email ] IS NOT NULL AND P .[ Email ] != '' ; -- Combine both lists into one. DECLARE @ PersonIds TABLE ([ Id ] int , [ OldValue ] varchar ( 100 )) INSERT INTO @ PersonIds SELECT DISTINCT IQ .[ Id ], NULL FROM ( SELECT [ Id ] FROM @ ChildEmailPersonIds UNION SELECT [ Id ] FROM @ ChildRelationshipEmailPersonIds ) AS IQ ORDER BY IQ .[ Id ] ; -- Add the current (old) email to the list of people. UPDATE P SET P .[ OldValue ] = P2 .[ Email ] FROM @ PersonIds AS P INNER JOIN [ Person ] AS P2 ON P2 .[ Id ] = P .[ Id ] ; -- Add History records showing that we are removing the email. INSERT INTO [ History ] ( [ IsSystem ] ,[ CategoryId ] ,[ EntityTypeId ] ,[ EntityId ] ,[ Guid ] ,[ CreatedDateTime ] ,[ ModifiedDateTime ] ,[ Verb ] ,[ ChangeType ] ,[ ValueName ] ,[ OldValue ] ,[ IsSensitive ] ) SELECT 0 , 133 , 15 , P .[ Id ] , NEWID () , GETDATE () , GETDATE () , 'MODIFY' , 'Property' , 'Email' , P . OldValue , 0 FROM @ PersonIds AS P ; -- Remove the email addresses. UPDATE [ Person ] SET [ Email ] = '' WHERE [ Id ] IN ( SELECT [ Id ] FROM @ PersonIds );","title":"Query"},{"location":"CRM/remove-parent%27s-phone-from-child%27s-record/","text":"Remove Parent's Phone From Child's Record Credit: Daniel Hazelbaker Finds all child records that have the same mobile phone as a parent, and removes the email from the child. It also records the change to person history for tracking purposes. Query DECLARE @ MobilePhoneTypeId int = ( SELECT [ Id ] FROM [ DefinedValue ] WHERE [ Guid ] = '407E7E45-7B2E-4FCD-9605-ECB1339F2453' ); DECLARE @ FamilyTypeId int = ( SELECT [ Id ] FROM [ GroupType ] WHERE [ Guid ] = '790E3215-3B10-442B-AF69-616C0DCB998E' ); DECLARE @ ChildPhonePersonIds TABLE ([ Id ] int ); -- Find all < 18 people that have the same mobile number as a family member that is > 18 INSERT INTO @ ChildPhonePersonIds SELECT DISTINCT P .[ Id ] FROM [ PhoneNumber ] AS PN INNER JOIN [ PhoneNumber ] AS PN2 ON PN2 .[ Number ] = PN .[ Number ] AND PN2 .[ Id ] != PN .[ Id ] INNER JOIN [ Person ] AS P ON P .[ Id ] = PN .[ PersonId ] INNER JOIN [ Person ] AS P2 ON P2 .[ Id ] = PN2 .[ PersonId ] INNER JOIN [ GroupMember ] AS FM ON FM .[ PersonId ] = P .[ Id ] INNER JOIN [ Group ] AS F ON F .[ Id ] = FM .[ GroupId ] INNER JOIN [ GroupMember ] AS FM2 ON FM2 .[ PersonId ] = P2 .[ Id ] INNER JOIN [ Group ] AS F2 ON F2 .[ Id ] = FM2 .[ GroupId ] WHERE PN .[ NumberTypeValueId ] = @ MobilePhoneTypeId AND F .[ GroupTypeId ] = @ FamilyTypeId AND F2 .[ GroupTypeId ] = @ FamilyTypeId AND F .[ Id ] = F2 .[ Id ] AND dbo . ufnCrm_GetAge ( P .[ BirthDate ]) < 18 AND dbo . ufnCrm_GetAge ( P2 .[ BirthDate ]) >= 18 ; -- Find all child relationship Person records that have the same mobile phone as their parent. DECLARE @ KnownRelationshipTypeId int = ( SELECT [ Id ] FROM [ GroupType ] WHERE [ Guid ] = 'E0C5A0E2-B7B3-4EF4-820D-BBF7F9A374EF' ); DECLARE @ OwnerRelationshipId int = ( SELECT [ Id ] FROM [ GroupTypeRole ] WHERE [ Guid ] = '7BC6C12E-0CD1-4DFD-8D5B-1B35AE714C42' ); DECLARE @ ChildRelationshipId int = ( SELECT [ Id ] FROM [ GroupTypeRole ] WHERE [ Guid ] = 'F87DF00F-E86D-4771-A3AE-DBF79B78CF5D' ); DECLARE @ StepChildRelationshipId int = ( SELECT [ Id ] FROM [ GroupTypeRole ] WHERE [ Guid ] = 'EFD2D6D1-A407-4EFB-9086-5DF1F19B7D93' ); DECLARE @ ChildRelationshipPhonePersonIds TABLE ([ Id ] int ); INSERT INTO @ ChildRelationshipPhonePersonIds SELECT DISTINCT P2 .[ Id ] FROM [ Person ] AS P INNER JOIN [ GroupMember ] AS FM ON FM .[ PersonId ] = P .[ Id ] INNER JOIN [ Group ] AS KR ON KR .[ Id ] = FM .[ GroupId ] INNER JOIN [ PhoneNumber ] AS PN ON PN .[ PersonId ] = P .[ Id ] INNER JOIN [ Group ] AS KR2 ON KR2 .[ Id ] = KR .[ Id ] INNER JOIN [ GroupMember ] AS FM2 ON FM2 .[ GroupId ] = KR2 .[ Id ] INNER JOIN [ Person ] AS P2 ON P2 .[ Id ] = FM2 .[ PersonId ] INNER JOIN [ PhoneNumber ] AS PN2 ON PN2 .[ PersonId ] = P2 .[ Id ] WHERE KR .[ GroupTypeId ] = @ KnownRelationshipTypeId AND KR2 .[ GroupTypeId ] = @ KnownRelationshipTypeId AND KR .[ Id ] = KR2 .[ Id ] AND P .[ Id ] != P2 .[ Id ] AND FM .[ GroupRoleId ] = @ OwnerRelationshipId AND ( FM2 .[ GroupRoleId ] = @ ChildRelationshipId OR FM2 .[ GroupRoleId ] = @ StepChildRelationshipId ) AND PN .[ NumberTypeValueId ] = @ MobilePhoneTypeId AND PN2 .[ NumberTypeValueId ] = @ MobilePhoneTypeId AND PN .[ Number ] = PN2 .[ Number ] ; -- Combine both lists into one. DECLARE @ PersonIds TABLE ([ Id ] int , [ OldValue ] varchar ( 100 )) INSERT INTO @ PersonIds SELECT DISTINCT IQ .[ Id ], NULL FROM ( SELECT [ Id ] FROM @ ChildPhonePersonIds UNION SELECT [ Id ] FROM @ ChildRelationshipPhonePersonIds ) AS IQ ORDER BY IQ .[ Id ] ; -- Add the current (old) number to the list of people. UPDATE P SET P .[ OldValue ] = PN .[ NumberFormatted ] FROM @ PersonIds AS P INNER JOIN [ PhoneNumber ] AS PN ON PN .[ PersonId ] = P .[ Id ] AND PN .[ NumberTypeValueId ] = @ MobilePhoneTypeId ; -- Add History records showing that we are removing the phone number. INSERT INTO [ History ] ( [ IsSystem ] ,[ CategoryId ] ,[ EntityTypeId ] ,[ EntityId ] ,[ Guid ] ,[ CreatedDateTime ] ,[ ModifiedDateTime ] ,[ Verb ] ,[ ChangeType ] ,[ ValueName ] ,[ OldValue ] ,[ IsSensitive ] ) SELECT 0 , 133 , 15 , P .[ Id ] , NEWID () , GETDATE () , GETDATE () , 'MODIFY' , 'Property' , 'Mobile Phone' , P . OldValue , 0 FROM @ PersonIds AS P ; -- Remove the phone numbers. DELETE FROM [ PhoneNumber ] WHERE [ PersonId ] IN ( SELECT [ Id ] FROM @ PersonIds ) AND [ NumberTypeValueId ] = @ MobilePhoneTypeId ;","title":"Remove Parent's Phone From Child's Record"},{"location":"CRM/remove-parent%27s-phone-from-child%27s-record/#remove-parents-phone-from-childs-record","text":"Credit: Daniel Hazelbaker Finds all child records that have the same mobile phone as a parent, and removes the email from the child. It also records the change to person history for tracking purposes.","title":"Remove Parent's Phone From Child's Record"},{"location":"CRM/remove-parent%27s-phone-from-child%27s-record/#query","text":"DECLARE @ MobilePhoneTypeId int = ( SELECT [ Id ] FROM [ DefinedValue ] WHERE [ Guid ] = '407E7E45-7B2E-4FCD-9605-ECB1339F2453' ); DECLARE @ FamilyTypeId int = ( SELECT [ Id ] FROM [ GroupType ] WHERE [ Guid ] = '790E3215-3B10-442B-AF69-616C0DCB998E' ); DECLARE @ ChildPhonePersonIds TABLE ([ Id ] int ); -- Find all < 18 people that have the same mobile number as a family member that is > 18 INSERT INTO @ ChildPhonePersonIds SELECT DISTINCT P .[ Id ] FROM [ PhoneNumber ] AS PN INNER JOIN [ PhoneNumber ] AS PN2 ON PN2 .[ Number ] = PN .[ Number ] AND PN2 .[ Id ] != PN .[ Id ] INNER JOIN [ Person ] AS P ON P .[ Id ] = PN .[ PersonId ] INNER JOIN [ Person ] AS P2 ON P2 .[ Id ] = PN2 .[ PersonId ] INNER JOIN [ GroupMember ] AS FM ON FM .[ PersonId ] = P .[ Id ] INNER JOIN [ Group ] AS F ON F .[ Id ] = FM .[ GroupId ] INNER JOIN [ GroupMember ] AS FM2 ON FM2 .[ PersonId ] = P2 .[ Id ] INNER JOIN [ Group ] AS F2 ON F2 .[ Id ] = FM2 .[ GroupId ] WHERE PN .[ NumberTypeValueId ] = @ MobilePhoneTypeId AND F .[ GroupTypeId ] = @ FamilyTypeId AND F2 .[ GroupTypeId ] = @ FamilyTypeId AND F .[ Id ] = F2 .[ Id ] AND dbo . ufnCrm_GetAge ( P .[ BirthDate ]) < 18 AND dbo . ufnCrm_GetAge ( P2 .[ BirthDate ]) >= 18 ; -- Find all child relationship Person records that have the same mobile phone as their parent. DECLARE @ KnownRelationshipTypeId int = ( SELECT [ Id ] FROM [ GroupType ] WHERE [ Guid ] = 'E0C5A0E2-B7B3-4EF4-820D-BBF7F9A374EF' ); DECLARE @ OwnerRelationshipId int = ( SELECT [ Id ] FROM [ GroupTypeRole ] WHERE [ Guid ] = '7BC6C12E-0CD1-4DFD-8D5B-1B35AE714C42' ); DECLARE @ ChildRelationshipId int = ( SELECT [ Id ] FROM [ GroupTypeRole ] WHERE [ Guid ] = 'F87DF00F-E86D-4771-A3AE-DBF79B78CF5D' ); DECLARE @ StepChildRelationshipId int = ( SELECT [ Id ] FROM [ GroupTypeRole ] WHERE [ Guid ] = 'EFD2D6D1-A407-4EFB-9086-5DF1F19B7D93' ); DECLARE @ ChildRelationshipPhonePersonIds TABLE ([ Id ] int ); INSERT INTO @ ChildRelationshipPhonePersonIds SELECT DISTINCT P2 .[ Id ] FROM [ Person ] AS P INNER JOIN [ GroupMember ] AS FM ON FM .[ PersonId ] = P .[ Id ] INNER JOIN [ Group ] AS KR ON KR .[ Id ] = FM .[ GroupId ] INNER JOIN [ PhoneNumber ] AS PN ON PN .[ PersonId ] = P .[ Id ] INNER JOIN [ Group ] AS KR2 ON KR2 .[ Id ] = KR .[ Id ] INNER JOIN [ GroupMember ] AS FM2 ON FM2 .[ GroupId ] = KR2 .[ Id ] INNER JOIN [ Person ] AS P2 ON P2 .[ Id ] = FM2 .[ PersonId ] INNER JOIN [ PhoneNumber ] AS PN2 ON PN2 .[ PersonId ] = P2 .[ Id ] WHERE KR .[ GroupTypeId ] = @ KnownRelationshipTypeId AND KR2 .[ GroupTypeId ] = @ KnownRelationshipTypeId AND KR .[ Id ] = KR2 .[ Id ] AND P .[ Id ] != P2 .[ Id ] AND FM .[ GroupRoleId ] = @ OwnerRelationshipId AND ( FM2 .[ GroupRoleId ] = @ ChildRelationshipId OR FM2 .[ GroupRoleId ] = @ StepChildRelationshipId ) AND PN .[ NumberTypeValueId ] = @ MobilePhoneTypeId AND PN2 .[ NumberTypeValueId ] = @ MobilePhoneTypeId AND PN .[ Number ] = PN2 .[ Number ] ; -- Combine both lists into one. DECLARE @ PersonIds TABLE ([ Id ] int , [ OldValue ] varchar ( 100 )) INSERT INTO @ PersonIds SELECT DISTINCT IQ .[ Id ], NULL FROM ( SELECT [ Id ] FROM @ ChildPhonePersonIds UNION SELECT [ Id ] FROM @ ChildRelationshipPhonePersonIds ) AS IQ ORDER BY IQ .[ Id ] ; -- Add the current (old) number to the list of people. UPDATE P SET P .[ OldValue ] = PN .[ NumberFormatted ] FROM @ PersonIds AS P INNER JOIN [ PhoneNumber ] AS PN ON PN .[ PersonId ] = P .[ Id ] AND PN .[ NumberTypeValueId ] = @ MobilePhoneTypeId ; -- Add History records showing that we are removing the phone number. INSERT INTO [ History ] ( [ IsSystem ] ,[ CategoryId ] ,[ EntityTypeId ] ,[ EntityId ] ,[ Guid ] ,[ CreatedDateTime ] ,[ ModifiedDateTime ] ,[ Verb ] ,[ ChangeType ] ,[ ValueName ] ,[ OldValue ] ,[ IsSensitive ] ) SELECT 0 , 133 , 15 , P .[ Id ] , NEWID () , GETDATE () , GETDATE () , 'MODIFY' , 'Property' , 'Mobile Phone' , P . OldValue , 0 FROM @ PersonIds AS P ; -- Remove the phone numbers. DELETE FROM [ PhoneNumber ] WHERE [ PersonId ] IN ( SELECT [ Id ] FROM @ PersonIds ) AND [ NumberTypeValueId ] = @ MobilePhoneTypeId ;","title":"Query"},{"location":"CheckIn/auto-select-group-types-for-given-checkin-config/","text":"Auto-Select Group Types for Given Checkin Config This will lookup all group types under a given check-in config, then redirect to the check-in page with those areas selected. Page Route checkin-launch, checkin-launch/{KioskId}/{CheckinConfigId} HTML Block Contents { % assign kioskId = 'Global' | PageParameter : 'KioskId' | AsInteger % } { % assign configId = 'Global' | PageParameter : 'CheckinConfigId' | AsInteger % } { % unless kioskId and configId and kioskId > 0 and configId > 0 % } < div class = \"alert alert-warning\" > Error : Invalid parameters </ div > { % else % } { % sql % } DECLARE @ CheckinConfigId int = {{ configId }} ; WITH CheckInAreas AS ( SELECT parent .[ Id ] AS ParentId , parent .[ Name ] AS Parent , child .[ Id ] AS ChildId , child .[ Name ] AS Child FROM [ GroupTypeAssociation ] gta INNER JOIN [ GroupType ] parent ON gta .[ GroupTypeId ] = parent .[ Id ] INNER JOIN [ GroupType ] child ON gta .[ ChildGroupTypeId ] = child .[ Id ] WHERE parent .[ Id ] = @ CheckinConfigId UNION ALL SELECT parent .[ Id ] AS ParentId , parent .[ Name ] AS Parent , child .[ Id ] AS ChildId , child .[ Name ] AS Child FROM [ CheckinAreas ] ca JOIN [ GroupTypeAssociation ] gta ON ca .[ ChildId ] = gta .[ GroupTypeId ] INNER JOIN [ GroupType ] parent ON gta .[ GroupTypeId ] = parent .[ Id ] INNER JOIN [ GroupType ] child ON gta .[ ChildGroupTypeId ] = child .[ Id ] WHERE parent .[ Id ] <> child .[ Id ] ) SELECT STRING_AGG ( ChildId , ',' ) 'GroupTypeIds' FROM [ CheckInAreas ] { % endsql % } { % capture url % } / checkin / {{ kioskId }} / {{ configId }} / {{ results | First | Property : 'GroupTypeIds' }}{ % endcapture % } { % assign canEdit = 'Global' | Page : 'Id' | HasRightsTo : 'Edit' , 'Rock.Model.Page' % } { % if canEdit % } < p class = \"alert alert-warning\" > If you could not edit this page you would be redirected to : < a href = \"{{ url }}\" > {{ url }} </ a > . </ p > { % else % } {{ url | PageRedirect }} { % endif % } { % endunless % }","title":"Auto-Select Group Types for Given Checkin Config"},{"location":"CheckIn/auto-select-group-types-for-given-checkin-config/#auto-select-group-types-for-given-checkin-config","text":"This will lookup all group types under a given check-in config, then redirect to the check-in page with those areas selected.","title":"Auto-Select Group Types for Given Checkin Config"},{"location":"CheckIn/auto-select-group-types-for-given-checkin-config/#page-route","text":"checkin-launch, checkin-launch/{KioskId}/{CheckinConfigId}","title":"Page Route"},{"location":"CheckIn/auto-select-group-types-for-given-checkin-config/#html-block-contents","text":"{ % assign kioskId = 'Global' | PageParameter : 'KioskId' | AsInteger % } { % assign configId = 'Global' | PageParameter : 'CheckinConfigId' | AsInteger % } { % unless kioskId and configId and kioskId > 0 and configId > 0 % } < div class = \"alert alert-warning\" > Error : Invalid parameters </ div > { % else % } { % sql % } DECLARE @ CheckinConfigId int = {{ configId }} ; WITH CheckInAreas AS ( SELECT parent .[ Id ] AS ParentId , parent .[ Name ] AS Parent , child .[ Id ] AS ChildId , child .[ Name ] AS Child FROM [ GroupTypeAssociation ] gta INNER JOIN [ GroupType ] parent ON gta .[ GroupTypeId ] = parent .[ Id ] INNER JOIN [ GroupType ] child ON gta .[ ChildGroupTypeId ] = child .[ Id ] WHERE parent .[ Id ] = @ CheckinConfigId UNION ALL SELECT parent .[ Id ] AS ParentId , parent .[ Name ] AS Parent , child .[ Id ] AS ChildId , child .[ Name ] AS Child FROM [ CheckinAreas ] ca JOIN [ GroupTypeAssociation ] gta ON ca .[ ChildId ] = gta .[ GroupTypeId ] INNER JOIN [ GroupType ] parent ON gta .[ GroupTypeId ] = parent .[ Id ] INNER JOIN [ GroupType ] child ON gta .[ ChildGroupTypeId ] = child .[ Id ] WHERE parent .[ Id ] <> child .[ Id ] ) SELECT STRING_AGG ( ChildId , ',' ) 'GroupTypeIds' FROM [ CheckInAreas ] { % endsql % } { % capture url % } / checkin / {{ kioskId }} / {{ configId }} / {{ results | First | Property : 'GroupTypeIds' }}{ % endcapture % } { % assign canEdit = 'Global' | Page : 'Id' | HasRightsTo : 'Edit' , 'Rock.Model.Page' % } { % if canEdit % } < p class = \"alert alert-warning\" > If you could not edit this page you would be redirected to : < a href = \"{{ url }}\" > {{ url }} </ a > . </ p > { % else % } {{ url | PageRedirect }} { % endif % } { % endunless % }","title":"HTML Block Contents"},{"location":"CheckIn/checkin-code-historical-lookup/","text":"Checkin Code Historical Lookup This will find all historical usage of a given checkin code. Note: Every checkin gets assigned a code, even if it doesn't print on the label. Query DECLARE @ Code varchar ( max ) = 'BMD' ; SELECT ac .[ IssueDateTime ] , p .[ FirstName ] , p .[ LastName ] , g .[ Name ] 'Group' , l .[ Name ] 'Location' , s .[ Name ] 'Schedule' FROM [ AttendanceCode ] ac JOIN [ Attendance ] a ON a .[ AttendanceCodeId ] = ac .[ Id ] JOIN [ PersonAlias ] pa ON pa .[ Id ] = a .[ PersonAliasId ] JOIN [ Person ] p ON p .[ Id ] = pa .[ PersonId ] JOIN [ AttendanceOccurrence ] ao ON ao .[ Id ] = a .[ OccurrenceId ] JOIN [ Group ] g ON g .[ Id ] = ao .[ GroupId ] JOIN [ Location ] l ON l .[ Id ] = ao .[ LocationId ] JOIN [ Schedule ] s ON s .[ Id ] = ao .[ ScheduleId ] WHERE ac .[ Code ] = @ Code ORDER BY ac .[ IssueDateTime ] DESC","title":"Checkin Code Historical Lookup"},{"location":"CheckIn/checkin-code-historical-lookup/#checkin-code-historical-lookup","text":"This will find all historical usage of a given checkin code. Note: Every checkin gets assigned a code, even if it doesn't print on the label.","title":"Checkin Code Historical Lookup"},{"location":"CheckIn/checkin-code-historical-lookup/#query","text":"DECLARE @ Code varchar ( max ) = 'BMD' ; SELECT ac .[ IssueDateTime ] , p .[ FirstName ] , p .[ LastName ] , g .[ Name ] 'Group' , l .[ Name ] 'Location' , s .[ Name ] 'Schedule' FROM [ AttendanceCode ] ac JOIN [ Attendance ] a ON a .[ AttendanceCodeId ] = ac .[ Id ] JOIN [ PersonAlias ] pa ON pa .[ Id ] = a .[ PersonAliasId ] JOIN [ Person ] p ON p .[ Id ] = pa .[ PersonId ] JOIN [ AttendanceOccurrence ] ao ON ao .[ Id ] = a .[ OccurrenceId ] JOIN [ Group ] g ON g .[ Id ] = ao .[ GroupId ] JOIN [ Location ] l ON l .[ Id ] = ao .[ LocationId ] JOIN [ Schedule ] s ON s .[ Id ] = ao .[ ScheduleId ] WHERE ac .[ Code ] = @ Code ORDER BY ac .[ IssueDateTime ] DESC","title":"Query"},{"location":"CheckIn/checkin-config/","text":"Checkin Config Credit: Chris @ Life.Church This will list out all of your checkin configs, areas, and groups. NOTE: It doesn't show groups that are multiple group types deep Query DECLARE @ ConfigPurposeID int , @ FilterPurposeID int ; SELECT @ ConfigPurposeID = [ Id ] FROM [ DefinedValue ] DV WHERE DV .[ Guid ] = '4A406CB0-495B-4795-B788-52BDFDE00B01' ; SELECT @ FilterPurposeID = [ Id ] FROM [ DefinedValue ] DV WHERE DV .[ Guid ] = '6BCED84C-69AD-4F5A-9197-5C0F9C02DD34' ;; WITH CheckInAreas AS ( SELECT PT .[ Id ] 'ConfigId' , CT .[ Id ] 'AreaId' , PT .[ Name ] 'Config' , PT .[ Order ] 'ConfigSort' , CT .[ Name ] 'Area' , CT .[ Order ] 'AreaSort' FROM [ GroupTypeAssociation ] GTA INNER JOIN [ GroupType ] PT ON GTA .[ GroupTypeId ] = PT .[ Id ] INNER JOIN [ GroupType ] CT ON GTA .[ ChildGroupTypeId ] = CT .[ Id ] WHERE PT .[ GroupTypePurposeValueId ] = @ ConfigPurposeID AND CT .[ GroupTypePurposeValueId ] <> @ FilterPurposeID UNION ALL SELECT CA .[ ConfigId ] , GTA .[ ChildGroupTypeId ] 'AreaId' , CA .[ Config ] , CA .[ ConfigSort ] , CT .[ Name ] 'Area' , CT .[ Order ] 'AreaSort' FROM [ GroupTypeAssociation ] GTA INNER JOIN [ CheckInAreas ] CA ON CA .[ AreaId ] = GTA .[ GroupTypeId ] INNER JOIN [ GroupType ] CT ON GTA .[ ChildGroupTypeId ] = CT .[ Id ] WHERE CT .[ GroupTypePurposeValueId ] <> @ FilterPurposeId AND GTA .[ GroupTypeId ] <> GTA .[ ChildGroupTypeId ] ) SELECT A .[ ConfigId ] , A .[ AreaId ] , G .[ Id ] 'GroupId' , A .[ Config ] , A .[ Area ] , G .[ Name ] 'Group' FROM CheckInAreas A INNER JOIN [ Group ] G ON A .[ AreaId ] = G .[ GroupTypeId ] WHERE G .[ IsActive ] = 1 ORDER BY A .[ ConfigSort ] , A .[ AreaSort ] , G .[ Order ]","title":"Checkin Config"},{"location":"CheckIn/checkin-config/#checkin-config","text":"Credit: Chris @ Life.Church This will list out all of your checkin configs, areas, and groups. NOTE: It doesn't show groups that are multiple group types deep","title":"Checkin Config"},{"location":"CheckIn/checkin-config/#query","text":"DECLARE @ ConfigPurposeID int , @ FilterPurposeID int ; SELECT @ ConfigPurposeID = [ Id ] FROM [ DefinedValue ] DV WHERE DV .[ Guid ] = '4A406CB0-495B-4795-B788-52BDFDE00B01' ; SELECT @ FilterPurposeID = [ Id ] FROM [ DefinedValue ] DV WHERE DV .[ Guid ] = '6BCED84C-69AD-4F5A-9197-5C0F9C02DD34' ;; WITH CheckInAreas AS ( SELECT PT .[ Id ] 'ConfigId' , CT .[ Id ] 'AreaId' , PT .[ Name ] 'Config' , PT .[ Order ] 'ConfigSort' , CT .[ Name ] 'Area' , CT .[ Order ] 'AreaSort' FROM [ GroupTypeAssociation ] GTA INNER JOIN [ GroupType ] PT ON GTA .[ GroupTypeId ] = PT .[ Id ] INNER JOIN [ GroupType ] CT ON GTA .[ ChildGroupTypeId ] = CT .[ Id ] WHERE PT .[ GroupTypePurposeValueId ] = @ ConfigPurposeID AND CT .[ GroupTypePurposeValueId ] <> @ FilterPurposeID UNION ALL SELECT CA .[ ConfigId ] , GTA .[ ChildGroupTypeId ] 'AreaId' , CA .[ Config ] , CA .[ ConfigSort ] , CT .[ Name ] 'Area' , CT .[ Order ] 'AreaSort' FROM [ GroupTypeAssociation ] GTA INNER JOIN [ CheckInAreas ] CA ON CA .[ AreaId ] = GTA .[ GroupTypeId ] INNER JOIN [ GroupType ] CT ON GTA .[ ChildGroupTypeId ] = CT .[ Id ] WHERE CT .[ GroupTypePurposeValueId ] <> @ FilterPurposeId AND GTA .[ GroupTypeId ] <> GTA .[ ChildGroupTypeId ] ) SELECT A .[ ConfigId ] , A .[ AreaId ] , G .[ Id ] 'GroupId' , A .[ Config ] , A .[ Area ] , G .[ Name ] 'Group' FROM CheckInAreas A INNER JOIN [ Group ] G ON A .[ AreaId ] = G .[ GroupTypeId ] WHERE G .[ IsActive ] = 1 ORDER BY A .[ ConfigSort ] , A .[ AreaSort ] , G .[ Order ]","title":"Query"},{"location":"CheckIn/checkin-times-under-parent-group/","text":"Checkin Times Under Parent Group Page Parameter Block Filters: Sunday Date [Date] Parent Group [Group] Service Time [Schedule] Dynamic Data Block { % unless PageParameter . ParentGroup and PageParameter . ParentGroup != empty and PageParameter . ServiceTime and PageParameter . ServiceTime != empty and PageParameter . SundayDate and PageParameter . SundayDate != empty % } SELECT 'Please fill in the filters above.' ; { % else % } DECLARE @ ParentGroupID int = ( SELECT [ Id ] FROM [ Group ] WHERE [ Guid ] = '{{ PageParameter.ParentGroup | SanitizeSql }}' ); DECLARE @ ScheduleID int = ( SELECT [ Id ] FROM [ Schedule ] WHERE [ Guid ] = '{{ PageParameter.ServiceTime | SanitizeSql }}' ); DECLARE @ Date date = CAST ( '{{ PageParameter.SundayDate | SanitizeSql }}' AS date ); SELECT FORMAT ( a .[ CreatedDateTime ], 'HH:mm:ss' ) 'Check in time' , p .[ FirstName ] , p .[ LastName ] , g .[ Name ] , p .[ Id ] FROM [ Group ] g JOIN [ AttendanceOccurrence ] ao ON g .[ Id ] = ao .[ GroupId ] JOIN [ Attendance ] a ON ao .[ Id ] = a .[ OccurrenceId ] JOIN [ PersonAlias ] pa ON a .[ PersonAliasId ] = pa .[ Id ] JOIN [ Person ] p ON pa .[ PersonId ] = p .[ Id ] WHERE g .[ ParentGroupId ] = @ ParentGroupID AND a .[ DidAttend ] = 1 AND ao .[ SundayDate ] = @ Date AND ao .[ ScheduleId ] = @ ScheduleID ORDER BY a .[ CreatedDateTime ] { % endunless % }","title":"Checkin Times Under Parent Group"},{"location":"CheckIn/checkin-times-under-parent-group/#checkin-times-under-parent-group","text":"","title":"Checkin Times Under Parent Group"},{"location":"CheckIn/checkin-times-under-parent-group/#page-parameter-block","text":"Filters: Sunday Date [Date] Parent Group [Group] Service Time [Schedule]","title":"Page Parameter Block"},{"location":"CheckIn/checkin-times-under-parent-group/#dynamic-data-block","text":"{ % unless PageParameter . ParentGroup and PageParameter . ParentGroup != empty and PageParameter . ServiceTime and PageParameter . ServiceTime != empty and PageParameter . SundayDate and PageParameter . SundayDate != empty % } SELECT 'Please fill in the filters above.' ; { % else % } DECLARE @ ParentGroupID int = ( SELECT [ Id ] FROM [ Group ] WHERE [ Guid ] = '{{ PageParameter.ParentGroup | SanitizeSql }}' ); DECLARE @ ScheduleID int = ( SELECT [ Id ] FROM [ Schedule ] WHERE [ Guid ] = '{{ PageParameter.ServiceTime | SanitizeSql }}' ); DECLARE @ Date date = CAST ( '{{ PageParameter.SundayDate | SanitizeSql }}' AS date ); SELECT FORMAT ( a .[ CreatedDateTime ], 'HH:mm:ss' ) 'Check in time' , p .[ FirstName ] , p .[ LastName ] , g .[ Name ] , p .[ Id ] FROM [ Group ] g JOIN [ AttendanceOccurrence ] ao ON g .[ Id ] = ao .[ GroupId ] JOIN [ Attendance ] a ON ao .[ Id ] = a .[ OccurrenceId ] JOIN [ PersonAlias ] pa ON a .[ PersonAliasId ] = pa .[ Id ] JOIN [ Person ] p ON pa .[ PersonId ] = p .[ Id ] WHERE g .[ ParentGroupId ] = @ ParentGroupID AND a .[ DidAttend ] = 1 AND ao .[ SundayDate ] = @ Date AND ao .[ ScheduleId ] = @ ScheduleID ORDER BY a .[ CreatedDateTime ] { % endunless % }","title":"Dynamic Data Block"},{"location":"CheckIn/checkin-times/","text":"Checkin Times List all people that checked into the specified group types on the specified date, along with the time that they checked in. Query DECLARE @ GroupTypes varchar ( max ) = '58,59' ; --Serve Team GroupType IDs SELECT DISTINCT ( p . Id ) , a . CreatedDateTime 'CheckinDateTime' , p . FirstName , p . LastName , FORMAT ( a . CreatedDateTime , 'h:mm tt' ) 'CheckinTime' , g . Name 'Group' FROM [ Attendance ] a JOIN [ AttendanceOccurrence ] ao ON a . OccurrenceId = ao . Id JOIN [ Group ] g on AO . GroupId = g . Id JOIN [ PersonAlias ] pa ON a . PersonAliasId = pa . Id JOIN [ Person ] p ON pa . PersonId = p . Id WHERE g . GroupTypeId IN ( SELECT * FROM dbo . ufnUtility_CsvToTable ( @ GroupTypes ) ) AND ao . OccurrenceDate = @ Date ORDER BY a . CreatedDateTime","title":"Checkin Times"},{"location":"CheckIn/checkin-times/#checkin-times","text":"List all people that checked into the specified group types on the specified date, along with the time that they checked in.","title":"Checkin Times"},{"location":"CheckIn/checkin-times/#query","text":"DECLARE @ GroupTypes varchar ( max ) = '58,59' ; --Serve Team GroupType IDs SELECT DISTINCT ( p . Id ) , a . CreatedDateTime 'CheckinDateTime' , p . FirstName , p . LastName , FORMAT ( a . CreatedDateTime , 'h:mm tt' ) 'CheckinTime' , g . Name 'Group' FROM [ Attendance ] a JOIN [ AttendanceOccurrence ] ao ON a . OccurrenceId = ao . Id JOIN [ Group ] g on AO . GroupId = g . Id JOIN [ PersonAlias ] pa ON a . PersonAliasId = pa . Id JOIN [ Person ] p ON pa . PersonId = p . Id WHERE g . GroupTypeId IN ( SELECT * FROM dbo . ufnUtility_CsvToTable ( @ GroupTypes ) ) AND ao . OccurrenceDate = @ Date ORDER BY a . CreatedDateTime","title":"Query"},{"location":"Communication/communication-recipients-and-page-view-report/","text":"Communication Recipients and Page View Report Lists everyone who received a specific communication, if the message was sent or opened, and if the recipient viewed a specific page. Since it is looking at interactions to see who visited the page, it relies on the person being logged in or using a tokenized link in the email. Page Parameter Filter Block Field Type Key Description Communication Id CommunicationId The ID of the communication Page Id PageId The Id of the page Dynamic Data Block Parameters CommunicationId=0;PageId=0 Query --DECLARE @CommunicationId int = 54489; --DECLARE @PageId int = 1066; DECLARE @ ComponentId int = ( SELECT TOP 1 [ Id ] FROM [ InteractionComponent ] WHERE [ EntityId ] = @ PageId ORDER BY [ CreatedDateTime ] DESC ); SELECT p .[ Id ] , p .[ NickName ] , p .[ LastName ] ,[ dbo ]. ufnCrm_GetFamilyTitleFromGivingId ( p .[ GivingId ] ) 'Family' , CONVERT ( bit , CASE WHEN cr .[ Status ] IN ( 1 , 4 ) THEN 1 -- (1 = Sent, 4 = Opened) ELSE 0 END ) 'EmailSent' , CONVERT ( bit , CASE WHEN cr .[ Status ] = 4 THEN 1 -- (4 = Opened) ELSE 0 END ) 'EmailOpened' , CONVERT ( bit , CASE WHEN views .[ PersonId ] IS NOT NULL THEN 1 ELSE 0 END ) 'PageViewed' , CASE WHEN views .[ PersonId ] IS NOT NULL THEN CONCAT ( 'Last viewed on ' , FORMAT ( views .[ LastViewed ], 'dddd, MMM. d' ), ', at ' , FORMAT ( views .[ LastViewed ], 'h:mm tt' ) ) WHEN cr .[ Status ] NOT IN ( 1 , 4 ) THEN cr .[ StatusNote ] -- (1 = Sent, 4 = Opened) ELSE '' END 'Note' FROM [ CommunicationRecipient ] cr JOIN [ PersonAlias ] pa ON cr .[ PersonAliasId ] = pa .[ Id ] JOIN [ Person ] p ON pa .[ PersonId ] = p .[ Id ] LEFT JOIN ( SELECT pa .[ PersonId ] , MAX ( I .[ InteractionDateTime ] ) 'LastViewed' FROM [ Interaction ] i JOIN [ PersonAlias ] pa ON i .[ PersonAliasId ] = pa .[ Id ] WHERE I .[ InteractionComponentId ] = @ ComponentId AND I .[ Operation ] = 'View' GROUP BY pa .[ PersonId ] ) views ON p .[ Id ] = views .[ PersonId ] WHERE cr .[ CommunicationId ] = @ CommunicationId ORDER BY p .[ LastName ] , p .[ NickName ] ;","title":"Communication Recipients and Page View Report"},{"location":"Communication/communication-recipients-and-page-view-report/#communication-recipients-and-page-view-report","text":"Lists everyone who received a specific communication, if the message was sent or opened, and if the recipient viewed a specific page. Since it is looking at interactions to see who visited the page, it relies on the person being logged in or using a tokenized link in the email.","title":"Communication Recipients and Page View Report"},{"location":"Communication/communication-recipients-and-page-view-report/#page-parameter-filter-block","text":"Field Type Key Description Communication Id CommunicationId The ID of the communication Page Id PageId The Id of the page","title":"Page Parameter Filter Block"},{"location":"Communication/communication-recipients-and-page-view-report/#dynamic-data-block","text":"","title":"Dynamic Data Block"},{"location":"Communication/communication-recipients-and-page-view-report/#parameters","text":"CommunicationId=0;PageId=0","title":"Parameters"},{"location":"Communication/communication-recipients-and-page-view-report/#query","text":"--DECLARE @CommunicationId int = 54489; --DECLARE @PageId int = 1066; DECLARE @ ComponentId int = ( SELECT TOP 1 [ Id ] FROM [ InteractionComponent ] WHERE [ EntityId ] = @ PageId ORDER BY [ CreatedDateTime ] DESC ); SELECT p .[ Id ] , p .[ NickName ] , p .[ LastName ] ,[ dbo ]. ufnCrm_GetFamilyTitleFromGivingId ( p .[ GivingId ] ) 'Family' , CONVERT ( bit , CASE WHEN cr .[ Status ] IN ( 1 , 4 ) THEN 1 -- (1 = Sent, 4 = Opened) ELSE 0 END ) 'EmailSent' , CONVERT ( bit , CASE WHEN cr .[ Status ] = 4 THEN 1 -- (4 = Opened) ELSE 0 END ) 'EmailOpened' , CONVERT ( bit , CASE WHEN views .[ PersonId ] IS NOT NULL THEN 1 ELSE 0 END ) 'PageViewed' , CASE WHEN views .[ PersonId ] IS NOT NULL THEN CONCAT ( 'Last viewed on ' , FORMAT ( views .[ LastViewed ], 'dddd, MMM. d' ), ', at ' , FORMAT ( views .[ LastViewed ], 'h:mm tt' ) ) WHEN cr .[ Status ] NOT IN ( 1 , 4 ) THEN cr .[ StatusNote ] -- (1 = Sent, 4 = Opened) ELSE '' END 'Note' FROM [ CommunicationRecipient ] cr JOIN [ PersonAlias ] pa ON cr .[ PersonAliasId ] = pa .[ Id ] JOIN [ Person ] p ON pa .[ PersonId ] = p .[ Id ] LEFT JOIN ( SELECT pa .[ PersonId ] , MAX ( I .[ InteractionDateTime ] ) 'LastViewed' FROM [ Interaction ] i JOIN [ PersonAlias ] pa ON i .[ PersonAliasId ] = pa .[ Id ] WHERE I .[ InteractionComponentId ] = @ ComponentId AND I .[ Operation ] = 'View' GROUP BY pa .[ PersonId ] ) views ON p .[ Id ] = views .[ PersonId ] WHERE cr .[ CommunicationId ] = @ CommunicationId ORDER BY p .[ LastName ] , p .[ NickName ] ;","title":"Query"},{"location":"Connection/bulk-update-connection-status/","text":"Bulk Update Connection Status First, you will want to run a select to make sure it is finding all the requests you want to change, and none that you don't. Query DECLARE @ ConnectionOpportunityId int = 4 ; -- Which Opportunity? SELECT cr .[ CreatedDateTime ] , p .[ FirstName ] , p .[ LastName ] , cr .[ Comments ] FROM [ ConnectionRequest ] cr JOIN [ PersonAlias ] pa ON cr .[ PersonAliasId ] = pa .[ Id ] JOIN [ Person ] p ON pa .[ PersonId ] = p .[ Id ] WHERE cr .[ ConnectionOpportunityId ] = @ ConnectionOpportunityId AND cr .[ ConnectionState ] = 0 --active Once you have verified that it found the right requests, you can run this update to make the change. DECLARE @ ConnectionOpportunityId int = 4 ; -- Which Opprotunity? UPDATE [ ConnectionRequest ] SET ConnectionState = 3 --connected WHERE [ ConnectionOpportunityId ] = @ ConnectionOpportunityId AND [ ConnectionState ] = 0 --active","title":"Bulk Update Connection Status"},{"location":"Connection/bulk-update-connection-status/#bulk-update-connection-status","text":"First, you will want to run a select to make sure it is finding all the requests you want to change, and none that you don't.","title":"Bulk Update Connection Status"},{"location":"Connection/bulk-update-connection-status/#query","text":"DECLARE @ ConnectionOpportunityId int = 4 ; -- Which Opportunity? SELECT cr .[ CreatedDateTime ] , p .[ FirstName ] , p .[ LastName ] , cr .[ Comments ] FROM [ ConnectionRequest ] cr JOIN [ PersonAlias ] pa ON cr .[ PersonAliasId ] = pa .[ Id ] JOIN [ Person ] p ON pa .[ PersonId ] = p .[ Id ] WHERE cr .[ ConnectionOpportunityId ] = @ ConnectionOpportunityId AND cr .[ ConnectionState ] = 0 --active Once you have verified that it found the right requests, you can run this update to make the change. DECLARE @ ConnectionOpportunityId int = 4 ; -- Which Opprotunity? UPDATE [ ConnectionRequest ] SET ConnectionState = 3 --connected WHERE [ ConnectionOpportunityId ] = @ ConnectionOpportunityId AND [ ConnectionState ] = 0 --active","title":"Query"},{"location":"Finance/anonymous-giver-account-cleanup/","text":"Anonymous Giver Account Cleanup Delete any saved accounts from Anonymous Giver that are also associated with another person. Query DELETE FROM [ FinancialPersonBankAccount ] WHERE [ AccountNumberSecured ] IN ( --Acccounts that have more than 1 person assocciated... SELECT [ AccountNumberSecured ] FROM [ FinancialPersonBankAccount ] GROUP BY [ AccountNumberSecured ] HAVING COUNT ( 1 ) > 1 ) AND [ PersonAliasId ] IN ( --...and one of those people is anonymous giver SELECT [ Id ] FROM [ PersonAlias ] WHERE [ PersonId ] = 2 )","title":"Anonymous Giver Account Cleanup"},{"location":"Finance/anonymous-giver-account-cleanup/#anonymous-giver-account-cleanup","text":"Delete any saved accounts from Anonymous Giver that are also associated with another person.","title":"Anonymous Giver Account Cleanup"},{"location":"Finance/anonymous-giver-account-cleanup/#query","text":"DELETE FROM [ FinancialPersonBankAccount ] WHERE [ AccountNumberSecured ] IN ( --Acccounts that have more than 1 person assocciated... SELECT [ AccountNumberSecured ] FROM [ FinancialPersonBankAccount ] GROUP BY [ AccountNumberSecured ] HAVING COUNT ( 1 ) > 1 ) AND [ PersonAliasId ] IN ( --...and one of those people is anonymous giver SELECT [ Id ] FROM [ PersonAlias ] WHERE [ PersonId ] = 2 )","title":"Query"},{"location":"Finance/count-of-giving-units-by-month/","text":"Count of Giving Units By Month Returns a count of known and anonymous giving units for every month between the provided start and end dates. Query DECLARE @ StartDate Date = '2014-01-01' ; DECLARE @ EndDate Date = '2020-12-31' ; SELECT * FROM ( -- Distinct count of non-anonymous SELECT COUNT ( DISTINCT p . GivingLeaderId ) 'Units' , FORMAT ( ft . TransactionDateTime , 'yyyy-MM-01' ) 'Month' , 'Known' AS 'Type' FROM [ FinancialTransaction ] ft JOIN [ PersonAlias ] pa ON ft . AuthorizedPersonAliasId = pa . Id JOIN [ Person ] p ON pa . PersonId = p . Id WHERE ft . transactionTypeValueId = 53 AND ft . TransactionDateTime BETWEEN LEFT ( @ StartDate , 10 ) AND LEFT ( @ EndDate , 10 ) AND p . Id <> 2 --Anonymous GROUP BY FORMAT ( ft . TransactionDateTime , 'yyyy-MM-01' ) UNION -- Individual count of anonymous SELECT COUNT ( p . GivingLeaderId ) 'Units' , FORMAT ( ft . TransactionDateTime , 'yyyy-MM-01' ) 'Month' , 'Anonymous' AS 'Type' FROM [ FinancialTransaction ] ft JOIN [ PersonAlias ] pa ON ft . AuthorizedPersonAliasId = pa . Id JOIN [ Person ] p ON pa . PersonId = p . Id WHERE ft . transactionTypeValueId = 53 AND ft . TransactionDateTime BETWEEN LEFT ( @ StartDate , 10 ) AND LEFT ( @ EndDate , 10 ) AND p . Id = 2 --Anonymous GROUP BY FORMAT ( ft . TransactionDateTime , 'yyyy-MM-01' ) ) AS x PIVOT ( SUM ( Units ) FOR Type IN ( [ Known ], [ Anonymous ] ) ) AS y ORDER BY Month","title":"Count of Giving Units By Month"},{"location":"Finance/count-of-giving-units-by-month/#count-of-giving-units-by-month","text":"Returns a count of known and anonymous giving units for every month between the provided start and end dates.","title":"Count of Giving Units By Month"},{"location":"Finance/count-of-giving-units-by-month/#query","text":"DECLARE @ StartDate Date = '2014-01-01' ; DECLARE @ EndDate Date = '2020-12-31' ; SELECT * FROM ( -- Distinct count of non-anonymous SELECT COUNT ( DISTINCT p . GivingLeaderId ) 'Units' , FORMAT ( ft . TransactionDateTime , 'yyyy-MM-01' ) 'Month' , 'Known' AS 'Type' FROM [ FinancialTransaction ] ft JOIN [ PersonAlias ] pa ON ft . AuthorizedPersonAliasId = pa . Id JOIN [ Person ] p ON pa . PersonId = p . Id WHERE ft . transactionTypeValueId = 53 AND ft . TransactionDateTime BETWEEN LEFT ( @ StartDate , 10 ) AND LEFT ( @ EndDate , 10 ) AND p . Id <> 2 --Anonymous GROUP BY FORMAT ( ft . TransactionDateTime , 'yyyy-MM-01' ) UNION -- Individual count of anonymous SELECT COUNT ( p . GivingLeaderId ) 'Units' , FORMAT ( ft . TransactionDateTime , 'yyyy-MM-01' ) 'Month' , 'Anonymous' AS 'Type' FROM [ FinancialTransaction ] ft JOIN [ PersonAlias ] pa ON ft . AuthorizedPersonAliasId = pa . Id JOIN [ Person ] p ON pa . PersonId = p . Id WHERE ft . transactionTypeValueId = 53 AND ft . TransactionDateTime BETWEEN LEFT ( @ StartDate , 10 ) AND LEFT ( @ EndDate , 10 ) AND p . Id = 2 --Anonymous GROUP BY FORMAT ( ft . TransactionDateTime , 'yyyy-MM-01' ) ) AS x PIVOT ( SUM ( Units ) FOR Type IN ( [ Known ], [ Anonymous ] ) ) AS y ORDER BY Month","title":"Query"},{"location":"Finance/giving-totals-per-unit-%26-account-in-date-range/","text":"Giving Totals Per Unit & Account in Date Range Lists every giving unit that gave in a specified date range (Sunday Dates), and how much was given to each account. 1 Row per giving unit, with a column per account Query DECLARE @ StartDate date = '2022-01-01' ; DECLARE @ EndDate date = '2022-12-31' ; DROP TABLE IF EXISTS # TempData ; CREATE TABLE # TempData ( [ GivingId ] varchar ( 30 ) ,[ Name ] varchar ( max ) ,[ Account ] varchar ( max ) ,[ Ammount ] decimal ); INSERT INTO # TempData ( [ GivingId ] ,[ Account ] ,[ Ammount ] ) SELECT p .[ GivingId ] , fa .[ Name ] , ftd .[ Amount ] FROM [ FinancialTransaction ] ft JOIN [ FinancialTransactionDetail ] ftd ON ftd .[ TransactionId ] = ft .[ Id ] JOIN [ FinancialAccount ] fa ON ftd .[ AccountId ] = fa .[ Id ] JOIN [ PersonAlias ] pa ON ft .[ AuthorizedPersonAliasId ] = pa .[ Id ] JOIN [ Person ] p ON pa .[ PersonId ] = p .[ Id ] WHERE ft .[ TransactionTypeValueId ] = 53 --Contribution AND ft .[ SundayDate ] BETWEEN @ StartDate AND @ EndDate -- Use Dynamic SQL to Pivot to 1 col per row DECLARE @ DynamicCol nvarchar ( max ); DECLARE @ sql nvarchar ( max ); SELECT @ DynamicCol = STUFF ( ( SELECT DISTINCT ', ' + QUOTENAME ( [ Account ] ) FROM # TempData FOR XML PATH ( '' ) ), 1 , 2 , '' ); SET @ Sql = ' SELECT [GivingId] ,dbo.ufnCrm_GetFamilyTitleFromGivingId( [GivingId] ) AS [Name] ,' +@ DynamicCol + ' FROM ( SELECT * FROM #TempData ) AS Src PIVOT ( SUM( [Ammount] ) FOR [Account] IN ( ' +@ DynamicCol + ' ) ) AS Pvt ORDER BY [Name] ' ; PRINT @ Sql ; EXEC ( @ sql ); DROP TABLE # TempData ;","title":"Giving Totals Per Unit & Account in Date Range"},{"location":"Finance/giving-totals-per-unit-%26-account-in-date-range/#giving-totals-per-unit-account-in-date-range","text":"Lists every giving unit that gave in a specified date range (Sunday Dates), and how much was given to each account. 1 Row per giving unit, with a column per account","title":"Giving Totals Per Unit &amp; Account in Date Range"},{"location":"Finance/giving-totals-per-unit-%26-account-in-date-range/#query","text":"DECLARE @ StartDate date = '2022-01-01' ; DECLARE @ EndDate date = '2022-12-31' ; DROP TABLE IF EXISTS # TempData ; CREATE TABLE # TempData ( [ GivingId ] varchar ( 30 ) ,[ Name ] varchar ( max ) ,[ Account ] varchar ( max ) ,[ Ammount ] decimal ); INSERT INTO # TempData ( [ GivingId ] ,[ Account ] ,[ Ammount ] ) SELECT p .[ GivingId ] , fa .[ Name ] , ftd .[ Amount ] FROM [ FinancialTransaction ] ft JOIN [ FinancialTransactionDetail ] ftd ON ftd .[ TransactionId ] = ft .[ Id ] JOIN [ FinancialAccount ] fa ON ftd .[ AccountId ] = fa .[ Id ] JOIN [ PersonAlias ] pa ON ft .[ AuthorizedPersonAliasId ] = pa .[ Id ] JOIN [ Person ] p ON pa .[ PersonId ] = p .[ Id ] WHERE ft .[ TransactionTypeValueId ] = 53 --Contribution AND ft .[ SundayDate ] BETWEEN @ StartDate AND @ EndDate -- Use Dynamic SQL to Pivot to 1 col per row DECLARE @ DynamicCol nvarchar ( max ); DECLARE @ sql nvarchar ( max ); SELECT @ DynamicCol = STUFF ( ( SELECT DISTINCT ', ' + QUOTENAME ( [ Account ] ) FROM # TempData FOR XML PATH ( '' ) ), 1 , 2 , '' ); SET @ Sql = ' SELECT [GivingId] ,dbo.ufnCrm_GetFamilyTitleFromGivingId( [GivingId] ) AS [Name] ,' +@ DynamicCol + ' FROM ( SELECT * FROM #TempData ) AS Src PIVOT ( SUM( [Ammount] ) FOR [Account] IN ( ' +@ DynamicCol + ' ) ) AS Pvt ORDER BY [Name] ' ; PRINT @ Sql ; EXEC ( @ sql ); DROP TABLE # TempData ;","title":"Query"},{"location":"Finance/lapsed-givers/","text":"Lapsed Givers Originally shared by Josh Crews (from Simple Donation) at RX2019 Modified by Micheal Allen to consider GivingLeaderId vs everyone individually This SQL searches your Rock database for \"recent lapsed givers\". The definition of a recent lapsed giver is someone who gives $3,000 / yr, who has given less than $100 in the past 8 weeks, who was giving normally this same 8-week period last year . That last clause is key, because many people give a lot, but can have non-giving periods. Maybe they take the summer off. Maybe the winter off. Maybe they give a large amount in December, then don't start again til March. Without comparing their giving to the same period last year it's hard to know. Query DECLARE @ ANNUAL_GIVING_THRESHOLD AS INTEGER = 3000 ; DECLARE @ MAXIMUM_RECENT_GIVING_DOLLARS AS INTEGER = 100 ; DECLARE @ RECENT_PERIOD_WEEKS AS TINYINT = 8 ; SELECT Person . Id , Person . NickName , Person . LastName , Person . Email , FORMAT ( PastYear . Amount , 'c2' ) 'Past Year' , FORMAT ( SamePeriodLastYear . Amount , 'c2' ) 'Same Period Last Year' , FORMAT ( RecentPeriod . Amount , 'c2' ) 'Recent Period' , FinancialScheduledTransactions . Count 'Active Scheduled Transactions' FROM [ Person ] LEFT JOIN ( SELECT SUM ( td . Amount ) 'Amount' , P . GivingLeaderId 'PersonId' FROM FinancialTransaction t INNER JOIN FinancialTransactionDetail td ON t . Id = td . TransactionId INNER JOIN PersonAlias pa ON t . AuthorizedPersonAliasId = pa . Id INNER JOIN Person p ON pa . PersonId = p . Id WHERE t . TransactionTypeValueId != 54 AND t . TransactionDateTime < DATEADD ( year , - 1 , getdate () ) AND t . TransactionDateTime > DATEADD ( week , - 1 * @ RECENT_PERIOD_WEEKS , DATEADD ( year , - 1 , getdate () ) ) GROUP BY p . GivingLeaderId ) [ SamePeriodLastYear ] ON SamePeriodLastYear . PersonId = Person . Id LEFT JOIN ( SELECT SUM ( td . Amount ) 'Amount' , P . GivingLeaderId 'PersonId' FROM FinancialTransaction t INNER JOIN FinancialTransactionDetail td ON t . Id = td . TransactionId INNER JOIN PersonAlias pa ON t . AuthorizedPersonAliasId = pa . Id INNER JOIN Person p ON pa . PersonId = p . Id WHERE t . TransactionTypeValueId != 54 AND t . TransactionDateTime > DATEADD ( week , - 1 * @ RECENT_PERIOD_WEEKS , DATEADD ( year , - 1 , getdate () ) ) GROUP BY p . GivingLeaderId ) [ PastYear ] ON PastYear . PersonId = Person . Id LEFT JOIN ( SELECT SUM ( td . Amount ) 'Amount' , P . GivingLeaderId 'PersonId' FROM FinancialTransaction t INNER JOIN FinancialTransactionDetail td ON t . Id = td . TransactionId INNER JOIN PersonAlias pa ON t . AuthorizedPersonAliasId = pa . Id INNER JOIN Person p ON pa . PersonId = p . Id WHERE t . TransactionTypeValueId != 54 AND t . TransactionDateTime > DATEADD ( week , - 1 * @ RECENT_PERIOD_WEEKS , getdate () ) GROUP BY p . GivingLeaderId ) [ RecentPeriod ] ON RecentPeriod . PersonId = Person . Id LEFT JOIN ( SELECT COUNT ( fst . Id ) 'Count' , P . GivingLeaderId 'PersonId' FROM FinancialScheduledTransaction fst INNER JOIN PersonAlias pa ON fst . AuthorizedPersonAliasId = pa . Id INNER JOIN Person p ON pa . PersonId = p . Id WHERE fst . IsActive = 1 GROUP BY p . GivingLeaderId ) [ FinancialScheduledTransactions ] ON FinancialScheduledTransactions . PersonId = Person . Id WHERE PastYear . Amount IS NOT NULL AND PastYear . Amount > @ ANNUAL_GIVING_THRESHOLD AND ( RecentPeriod . Amount < @ MAXIMUM_RECENT_GIVING_DOLLARS OR RecentPeriod . Amount IS NULL ) AND ( SamePeriodLastYear . Amount / PastYear . Amount ) > ( ( @ RECENT_PERIOD_WEEKS * 1 . 0 ) / 60 ) -- and last year this period they gave a normal amount for them --AND FinancialScheduledTransactions.Count IS NULL ORDER BY LastName","title":"Lapsed Givers"},{"location":"Finance/lapsed-givers/#lapsed-givers","text":"Originally shared by Josh Crews (from Simple Donation) at RX2019 Modified by Micheal Allen to consider GivingLeaderId vs everyone individually This SQL searches your Rock database for \"recent lapsed givers\". The definition of a recent lapsed giver is someone who gives $3,000 / yr, who has given less than $100 in the past 8 weeks, who was giving normally this same 8-week period last year . That last clause is key, because many people give a lot, but can have non-giving periods. Maybe they take the summer off. Maybe the winter off. Maybe they give a large amount in December, then don't start again til March. Without comparing their giving to the same period last year it's hard to know.","title":"Lapsed Givers"},{"location":"Finance/lapsed-givers/#query","text":"DECLARE @ ANNUAL_GIVING_THRESHOLD AS INTEGER = 3000 ; DECLARE @ MAXIMUM_RECENT_GIVING_DOLLARS AS INTEGER = 100 ; DECLARE @ RECENT_PERIOD_WEEKS AS TINYINT = 8 ; SELECT Person . Id , Person . NickName , Person . LastName , Person . Email , FORMAT ( PastYear . Amount , 'c2' ) 'Past Year' , FORMAT ( SamePeriodLastYear . Amount , 'c2' ) 'Same Period Last Year' , FORMAT ( RecentPeriod . Amount , 'c2' ) 'Recent Period' , FinancialScheduledTransactions . Count 'Active Scheduled Transactions' FROM [ Person ] LEFT JOIN ( SELECT SUM ( td . Amount ) 'Amount' , P . GivingLeaderId 'PersonId' FROM FinancialTransaction t INNER JOIN FinancialTransactionDetail td ON t . Id = td . TransactionId INNER JOIN PersonAlias pa ON t . AuthorizedPersonAliasId = pa . Id INNER JOIN Person p ON pa . PersonId = p . Id WHERE t . TransactionTypeValueId != 54 AND t . TransactionDateTime < DATEADD ( year , - 1 , getdate () ) AND t . TransactionDateTime > DATEADD ( week , - 1 * @ RECENT_PERIOD_WEEKS , DATEADD ( year , - 1 , getdate () ) ) GROUP BY p . GivingLeaderId ) [ SamePeriodLastYear ] ON SamePeriodLastYear . PersonId = Person . Id LEFT JOIN ( SELECT SUM ( td . Amount ) 'Amount' , P . GivingLeaderId 'PersonId' FROM FinancialTransaction t INNER JOIN FinancialTransactionDetail td ON t . Id = td . TransactionId INNER JOIN PersonAlias pa ON t . AuthorizedPersonAliasId = pa . Id INNER JOIN Person p ON pa . PersonId = p . Id WHERE t . TransactionTypeValueId != 54 AND t . TransactionDateTime > DATEADD ( week , - 1 * @ RECENT_PERIOD_WEEKS , DATEADD ( year , - 1 , getdate () ) ) GROUP BY p . GivingLeaderId ) [ PastYear ] ON PastYear . PersonId = Person . Id LEFT JOIN ( SELECT SUM ( td . Amount ) 'Amount' , P . GivingLeaderId 'PersonId' FROM FinancialTransaction t INNER JOIN FinancialTransactionDetail td ON t . Id = td . TransactionId INNER JOIN PersonAlias pa ON t . AuthorizedPersonAliasId = pa . Id INNER JOIN Person p ON pa . PersonId = p . Id WHERE t . TransactionTypeValueId != 54 AND t . TransactionDateTime > DATEADD ( week , - 1 * @ RECENT_PERIOD_WEEKS , getdate () ) GROUP BY p . GivingLeaderId ) [ RecentPeriod ] ON RecentPeriod . PersonId = Person . Id LEFT JOIN ( SELECT COUNT ( fst . Id ) 'Count' , P . GivingLeaderId 'PersonId' FROM FinancialScheduledTransaction fst INNER JOIN PersonAlias pa ON fst . AuthorizedPersonAliasId = pa . Id INNER JOIN Person p ON pa . PersonId = p . Id WHERE fst . IsActive = 1 GROUP BY p . GivingLeaderId ) [ FinancialScheduledTransactions ] ON FinancialScheduledTransactions . PersonId = Person . Id WHERE PastYear . Amount IS NOT NULL AND PastYear . Amount > @ ANNUAL_GIVING_THRESHOLD AND ( RecentPeriod . Amount < @ MAXIMUM_RECENT_GIVING_DOLLARS OR RecentPeriod . Amount IS NULL ) AND ( SamePeriodLastYear . Amount / PastYear . Amount ) > ( ( @ RECENT_PERIOD_WEEKS * 1 . 0 ) / 60 ) -- and last year this period they gave a normal amount for them --AND FinancialScheduledTransactions.Count IS NULL ORDER BY LastName","title":"Query"},{"location":"Finance/pledged-this-week-%5Bmonday---sunday%5D/","text":"Pledged Last Week Return a list of everyone that created a new pledge last week. (Monday - Sunday by default. See note below) Note: This query uses the GetPreviousSundayDate function. That means that it will respect your configured \"Starting Day of Week\" under \"Admin Tools > System Settings > System Configuration\". Query DECLARE @ PledgeAccountID int = 59 ; --Which account to look at? SELECT CONCAT_WS ( ' ' , p . FirstName , NULLIF ( p . MiddleName , '' ) , p . LastName ,( SELECT Value FROM [ DefinedValue ] WHERE ID = p . SuffixValueId ) ) 'FormalName' , CONCAT_WS ( ' ' , p . NickName , p . LastName ,( SELECT Value FROM [ DefinedValue ] WHERE ID = p . SuffixValueId ) ) 'FullName' , p . NickName , CONCAT_WS ( ' ' , l . Street1 , NULLIF ( l . Street2 , '' ) ) 'Street' , COALESCE ( l . City , '' ) 'City' , COALESCE ( l . State , '' ) 'State' , COALESCE ( l . PostalCode , '' ) 'PostalCode' FROM [ FinancialPledge ] fp JOIN [ PersonAlias ] pa ON fp . PersonAliasId = pa . Id JOIN [ Person ] p ON pa . PersonId = p . Id JOIN [ Group ] g ON p . PrimaryFamilyId = g . Id LEFT JOIN [ GroupLocation ] gl ON g . Id = gl . GroupId AND gl . GroupLocationTypeValueId = 19 --Home LEFT JOIN [ Location ] l ON gl . LocationId = l . Id AND l . ISActive = 1 WHERE fp . AccountId = @ PledgeAccountID AND fp . CreatedDateTime BETWEEN --Monday through Sunday (inclusive) DATEADD ( day , - 6 , dbo .[ ufnUtility_GetPreviousSundayDate ]() ) AND dbo .[ ufnUtility_GetPreviousSundayDate ]() ORDER BY p . LastName , p . FirstName","title":"Pledged Last Week"},{"location":"Finance/pledged-this-week-%5Bmonday---sunday%5D/#pledged-last-week","text":"Return a list of everyone that created a new pledge last week. (Monday - Sunday by default. See note below) Note: This query uses the GetPreviousSundayDate function. That means that it will respect your configured \"Starting Day of Week\" under \"Admin Tools > System Settings > System Configuration\".","title":"Pledged Last Week"},{"location":"Finance/pledged-this-week-%5Bmonday---sunday%5D/#query","text":"DECLARE @ PledgeAccountID int = 59 ; --Which account to look at? SELECT CONCAT_WS ( ' ' , p . FirstName , NULLIF ( p . MiddleName , '' ) , p . LastName ,( SELECT Value FROM [ DefinedValue ] WHERE ID = p . SuffixValueId ) ) 'FormalName' , CONCAT_WS ( ' ' , p . NickName , p . LastName ,( SELECT Value FROM [ DefinedValue ] WHERE ID = p . SuffixValueId ) ) 'FullName' , p . NickName , CONCAT_WS ( ' ' , l . Street1 , NULLIF ( l . Street2 , '' ) ) 'Street' , COALESCE ( l . City , '' ) 'City' , COALESCE ( l . State , '' ) 'State' , COALESCE ( l . PostalCode , '' ) 'PostalCode' FROM [ FinancialPledge ] fp JOIN [ PersonAlias ] pa ON fp . PersonAliasId = pa . Id JOIN [ Person ] p ON pa . PersonId = p . Id JOIN [ Group ] g ON p . PrimaryFamilyId = g . Id LEFT JOIN [ GroupLocation ] gl ON g . Id = gl . GroupId AND gl . GroupLocationTypeValueId = 19 --Home LEFT JOIN [ Location ] l ON gl . LocationId = l . Id AND l . ISActive = 1 WHERE fp . AccountId = @ PledgeAccountID AND fp . CreatedDateTime BETWEEN --Monday through Sunday (inclusive) DATEADD ( day , - 6 , dbo .[ ufnUtility_GetPreviousSundayDate ]() ) AND dbo .[ ufnUtility_GetPreviousSundayDate ]() ORDER BY p . LastName , p . FirstName","title":"Query"},{"location":"Finance/recurring-giver-percentage/","text":"Recurring Giver Percentage Credit: I think part of this sql came from Josh Crews @ SimpleDonation Return a single number representing the number of \"regular givers\" (Gave at least 1 time in each of the past 3 months) that have recurring giving setup. This is intended to be used as the source for a metric. Query DECLARE @ Today DATETIME = GETDATE (); SELECT CAST ( COUNT ( RecurringGivers .[ PersonId ]) AS DECIMAL ) / SUM ( CASE WHEN LastMonthGivers .[ PersonId ] IS NOT NULL AND TwoMonthsAgoGivers .[ PersonId ] IS NOT NULL AND ThreeMonthsAgoGivers .[ PersonId ] IS NOT NULL THEN 1 ELSE 0 END ) * 100 AS [ Percent ] FROM ( SELECT pa .[ PersonId ] FROM FinancialTransaction [ t ] INNER JOIN PersonAlias [ pa ] ON t .[ AuthorizedPersonAliasId ] = pa .[ Id ] WHERE t .[ TransactionDateTime ] > DATEADD ( DAY , 1 , EOMONTH ( @ today , - 2 )) AND t .[ TransactionDateTime ] < DATEADD ( DAY , 1 , EOMONTH ( @ today , - 1 )) AND t .[ TransactionTypeValueId ] != 54 GROUP BY pa .[ PersonId ] ) [ LastMonthGivers ] LEFT JOIN ( SELECT pa .[ PersonId ] FROM FinancialTransaction [ t ] INNER JOIN PersonAlias [ pa ] ON t .[ AuthorizedPersonAliasId ] = pa .[ Id ] WHERE t .[ TransactionDateTime ] > DATEADD ( DAY , 1 , EOMONTH ( @ today , - 3 )) AND t .[ TransactionDateTime ] < DATEADD ( DAY , 1 , EOMONTH ( @ today , - 2 )) AND t .[ TransactionTypeValueId ] != 54 GROUP BY pa .[ PersonId ] ) [ TwoMonthsAgoGivers ] ON TwoMonthsAgoGivers .[ PersonId ] = LastMonthGivers .[ PersonId ] LEFT JOIN ( SELECT pa .[ PersonId ] FROM FinancialTransaction [ t ] INNER JOIN PersonAlias [ pa ] ON t .[ AuthorizedPersonAliasId ] = pa .[ Id ] WHERE t .[ TransactionDateTime ] > DATEADD ( DAY , 1 , EOMONTH ( @ today , - 4 )) AND t .[ TransactionDateTime ] < DATEADD ( DAY , 1 , EOMONTH ( @ today , - 3 )) AND t .[ TransactionTypeValueId ] != 54 GROUP BY pa .[ PersonId ] ) [ ThreeMonthsAgoGivers ] ON ThreeMonthsAgoGivers .[ PersonId ] = LastMonthGivers .[ PersonId ] LEFT JOIN ( SELECT pa .[ PersonId ] FROM FinancialScheduledTransaction [ fst ] INNER JOIN PersonAlias [ pa ] ON fst .[ AuthorizedPersonAliasId ] = pa .[ Id ] WHERE fst .[ IsActive ] = 1 GROUP BY pa .[ PersonId ] ) [ RecurringGivers ] ON RecurringGivers .[ PersonId ] = LastMonthGivers .[ PersonId ]","title":"Recurring Giver Percentage"},{"location":"Finance/recurring-giver-percentage/#recurring-giver-percentage","text":"Credit: I think part of this sql came from Josh Crews @ SimpleDonation Return a single number representing the number of \"regular givers\" (Gave at least 1 time in each of the past 3 months) that have recurring giving setup. This is intended to be used as the source for a metric.","title":"Recurring Giver Percentage"},{"location":"Finance/recurring-giver-percentage/#query","text":"DECLARE @ Today DATETIME = GETDATE (); SELECT CAST ( COUNT ( RecurringGivers .[ PersonId ]) AS DECIMAL ) / SUM ( CASE WHEN LastMonthGivers .[ PersonId ] IS NOT NULL AND TwoMonthsAgoGivers .[ PersonId ] IS NOT NULL AND ThreeMonthsAgoGivers .[ PersonId ] IS NOT NULL THEN 1 ELSE 0 END ) * 100 AS [ Percent ] FROM ( SELECT pa .[ PersonId ] FROM FinancialTransaction [ t ] INNER JOIN PersonAlias [ pa ] ON t .[ AuthorizedPersonAliasId ] = pa .[ Id ] WHERE t .[ TransactionDateTime ] > DATEADD ( DAY , 1 , EOMONTH ( @ today , - 2 )) AND t .[ TransactionDateTime ] < DATEADD ( DAY , 1 , EOMONTH ( @ today , - 1 )) AND t .[ TransactionTypeValueId ] != 54 GROUP BY pa .[ PersonId ] ) [ LastMonthGivers ] LEFT JOIN ( SELECT pa .[ PersonId ] FROM FinancialTransaction [ t ] INNER JOIN PersonAlias [ pa ] ON t .[ AuthorizedPersonAliasId ] = pa .[ Id ] WHERE t .[ TransactionDateTime ] > DATEADD ( DAY , 1 , EOMONTH ( @ today , - 3 )) AND t .[ TransactionDateTime ] < DATEADD ( DAY , 1 , EOMONTH ( @ today , - 2 )) AND t .[ TransactionTypeValueId ] != 54 GROUP BY pa .[ PersonId ] ) [ TwoMonthsAgoGivers ] ON TwoMonthsAgoGivers .[ PersonId ] = LastMonthGivers .[ PersonId ] LEFT JOIN ( SELECT pa .[ PersonId ] FROM FinancialTransaction [ t ] INNER JOIN PersonAlias [ pa ] ON t .[ AuthorizedPersonAliasId ] = pa .[ Id ] WHERE t .[ TransactionDateTime ] > DATEADD ( DAY , 1 , EOMONTH ( @ today , - 4 )) AND t .[ TransactionDateTime ] < DATEADD ( DAY , 1 , EOMONTH ( @ today , - 3 )) AND t .[ TransactionTypeValueId ] != 54 GROUP BY pa .[ PersonId ] ) [ ThreeMonthsAgoGivers ] ON ThreeMonthsAgoGivers .[ PersonId ] = LastMonthGivers .[ PersonId ] LEFT JOIN ( SELECT pa .[ PersonId ] FROM FinancialScheduledTransaction [ fst ] INNER JOIN PersonAlias [ pa ] ON fst .[ AuthorizedPersonAliasId ] = pa .[ Id ] WHERE fst .[ IsActive ] = 1 GROUP BY pa .[ PersonId ] ) [ RecurringGivers ] ON RecurringGivers .[ PersonId ] = LastMonthGivers .[ PersonId ]","title":"Query"},{"location":"Finance/updated-finance-forecasting-report/","text":"Updated Finance Forecasting Report Original idea from Kevin Rutledge - Recipe Link Rewritten by Michael Allen to add support for fiscal years, and to fix a few display bugs This is a fairly complicated report. Read Kevin's recipe (linked above) for a more thorough explanation. Dynamic Data Block Query /* BEGIN Configuration */ DECLARE @ Years INT = 4 ; --How many years to pull? (Including the current year; Changing this will break the lava template) DECLARE @ StartMonth INT = 1 ; --What month does your FY start on? DECLARE @ AccountList VARCHAR ( MAX ) = '5,12,24,34,55' ; --Comma seperated list of AccountIds to include /* END Configuration */ DECLARE @ StartDate DATE = DATEFROMPARTS ( DATEPART ( YEAR , GETDATE () ) - ( @ Years - 1 ) , @ StartMonth , 1 ); DECLARE @ EndDate DATE = DATEADD ( YEAR , ( @ Years - 1 ), @ StartDate ); /* If we haven't started this FY yet */ IF ( DATEPART ( MONTH , GETDATE () ) < @ StartMonth ) BEGIN SET @ StartDate = DATEADD ( YEAR , - 1 , @ StartDate ) SET @ EndDate = DATEADD ( YEAR , - 1 , @ EndDate ) END ; DECLARE @ Results TABLE ( Total DECIMAL ( 20 , 2 ), Year INT , Month INT ); INSERT INTO @ Results SELECT SUM ( ftd . Amount ) 'Total' , DATEPART ( YEAR , ft . TransactionDateTime ) 'Year' , DATEPART ( MONTH , ft . TransactionDateTime ) 'Month' FROM [ FinancialTransactionDetail ] ftd JOIN [ FinancialTransaction ] ft ON ftd . TransactionId = ft . Id --Using an inner join to filter the accounts that are included INNER JOIN ufnUtility_CsvToTable ( @ AccountList ) acct ON ftd . AccountId = acct . Item WHERE ft . TransactionDateTime >= @ StartDate AND ft . TransactionDateTime < @ EndDate AND ft . TransactionTypeValueId = 53 --Contribution GROUP BY DATEPART ( YEAR , ft . TransactionDateTime ) , DATEPART ( MONTH , ft . TransactionDateTime ) ; /* table1 = current year */ SET @ StartDate = @ EndDate ; SET @ EndDate = DATEFROMPARTS ( DATEPART ( YEAR , GETDATE () ), DATEPART ( MONTH , GETDATE () ), 1 ); SELECT ( SELECT SUM ( ftd . Amount ) 'Total' , DATEPART ( YEAR , ft . TransactionDateTime ) 'Year' , DATEPART ( MONTH , ft . TransactionDateTime ) 'Month' FROM [ FinancialTransactionDetail ] ftd JOIN [ FinancialTransaction ] ft ON ftd . TransactionId = ft . Id --Using an inner join to filter the accounts that are included INNER JOIN ufnUtility_CsvToTable ( @ AccountList ) acct ON ftd . AccountId = acct . Item WHERE ft . TransactionDateTime >= @ StartDate AND ft . TransactionDateTime < @ EndDate AND ft . TransactionTypeValueId = 53 --Contribution GROUP BY DATEPART ( YEAR , ft . TransactionDateTime ) , DATEPART ( MONTH , ft . TransactionDateTime ) ORDER BY 'Year' , 'Month' FOR JSON PATH ) 'json' ; /* table2, table3, table4 = previous 3 years*/ DECLARE @ i INT = 0 ; WHILE @ i < ( @ Years - 1 ) BEGIN SELECT ( SELECT * FROM @ Results ORDER BY 'Year' , 'Month' OFFSET ( @ i * 12 ) ROWS FETCH NEXT 12 ROWS ONLY FOR JSON PATH ) 'json' ; SET @ i = @ i + 1 ; END ; /* table5 = totals */ SELECT ( SELECT SUM ( Total ) 'Total' , Month , MIN ( Year ) 'Year' FROM @ Results GROUP BY Month ORDER BY 'Year' FOR JSON PATH ) 'json' ; Formatted Output {% assign current = table 1 .rows[ 0 ].json | FromJSON %} {% assign 3yearsAgo = table 2 .rows[ 0 ].json | FromJSON %} {% assign 2yearsAgo = table 3 .rows[ 0 ].json | FromJSON %} {% assign 1yearsAgo = table 4 .rows[ 0 ].json | FromJSON %} {% assign totals = table 5 .rows[ 0 ].json | FromJSON %} {% assign 3yearsAgoTotal = 0 %} {% assign 2yearsAgoTotal = 0 %} {% assign 1yearsAgoTotal = 0 %} {% assign currentTotal = 0 %} {% for row in 3 yearsAgo %} {% assign 3yearsAgoTotal = 3 yearsAgoTotal | Plus : row.Total %} {% endfor %} {% for row in 2 yearsAgo %} {% assign 2yearsAgoTotal = 2 yearsAgoTotal | Plus : row.Total %} {% endfor %} {% for row in 1 yearsAgo %} {% assign 1yearsAgoTotal = 1 yearsAgoTotal | Plus : row.Total %} {% endfor %} {% for row in current %} {% assign currentTotal = currentTotal | Plus : row.Total %} {% endfor %} {% assign grandTotal = 3 yearsAgoTotal | Plus : 2 yearsAgoTotal | Plus : 1 yearsAgoTotal %} {% capture multipliers %} [ {% for row in totals %} {{ row . Total | DividedBy : grandTotal , 4 }} {% unless forloop . last %} , {% endunless %} {% endfor %} ] {% endcapture %} {% assign multipliers = multipliers | FromJSON %} <style> .year { text-align:center; font-weight: bold; } .text-right { font-family: monospace; text-align: right; } .table { font-size: 0.9em; } </style> <div class=\"row\"> <div class=\"col-lg-3 col-md-6\"> <h5 class=\"year\"> {{ 3 yearsAgo | Select : 'Year' | Uniq | Join : '-' }} </h5> <table class = \"text-right table\" > <tr> <th class=\"text-right\">Month</th> <th class=\"text-right\">Total Given</th> <th class=\"text-right\">% of Total</th> </tr> {% for month in 3 yearsAgo %} <tr> <td> {{ month . Month | Append : '/01/' | Append : month.Year | Date : 'MMM. yy' }} </td> <td>{{ month.Total | FormatAsCurrency }} </td> <td>{{ month.Total | DividedBy : 3 yearsAgoTotal , 4 | Format : 'p' }} </td> </tr> {% endfor %} </table> </div> <div class=\"col-lg-3 col-md-6\"> <h5 class=\"year\"> {{ 2 yearsAgo | Select : 'Year' | Uniq | Join : '-' }} </h5> <table class = \"text-right table\" > <tr> <th class=\"text-right\">Month</th> <th class=\"text-right\">Total Given</th> <th class=\"text-right\">% of Total</th> </tr> {% for month in 2 yearsAgo %} <tr> <td> {{ month . Month | Append : '/01/' | Append : month.Year | Date : 'MMM. yy' }} </td> <td>{{ month.Total | FormatAsCurrency }} </td> <td>{{ month.Total | DividedBy : 2 yearsAgoTotal , 4 | Format : 'p' }} </td> </tr> {% endfor %} </table> </div> <div class=\"col-lg-3 col-md-6\"> <h5 class=\"year\"> {{ 1 yearsAgo | Select : 'Year' | Uniq | Join : '-' }} </h5> <table class = \"text-right table\" > <tr> <th class=\"text-right\">Month</th> <th class=\"text-right\">Total Given</th> <th class=\"text-right\">% of Total</th> </tr> {% for month in 1 yearsAgo %} <tr> <td> {{ month . Month | Append : '/01/' | Append : month.Year | Date : 'MMM. yy' }} </td> <td>{{ month.Total | FormatAsCurrency }} </td> <td>{{ month.Total | DividedBy : 1 yearsAgoTotal , 4 | Format : 'p' }} </td> </tr> {% endfor %} </table> </div> <div class=\"col-lg-3 col-md-6\"> <h5 class=\"year\">3 Year Total</h5> <table class=\"text-right table\"> <tr> <th class=\"text-right\">Month</th> <th class=\"text-right\">Total Given</th> <th class=\"text-right\">% of Total</th> </tr> {% for month in totals %} <tr> <td> {{ month . Month | Append : '/01/2000' | Date : 'MMM.' }} </td> <td>{{ month.Total | FormatAsCurrency }} </td> <td>{{ multipliers[forloop.index 0 ] | Format : 'p' }} </td> </tr> {% endfor %} </table> </div> </div> <div class=\"row\"> <div class=\"col-md-6\"> <h5 class=\"year\">Current Year: {{ current | Select : 'Year' | Uniq | Join : '-' }} </h5> {% if currentTotal = = 0 %} <p>At least 1 month must be complete.</p> {% else %} <table class=\"text-right table\"> <tr> <th class=\"text-right\">Month</th> <th class=\"text-right\">Total Given</th> <th class=\"text-right\">% Multiplier</th> <th class=\"text-right\">Year End Projection</th> </tr> {% assign cumulativePercent = 0 %} {% for month in current %} {% assign cumulativePercent = cumulativePercent | Plus : multipliers[forloop.index 0 ] %} <tr> <td> {{ month . Month | Append : '/01/' | Append : month.Year | Date : 'MMM. yy' }} </td> <td>{{ month.Total | FormatAsCurrency }} </td> <td>{{ multipliers[forloop.index 0 ] | Format : 'p' }} </td> <td>{{ month.Total | DividedBy : multipliers[forloop.index 0 ] | FormatAsCurrency }} </td> </tr> {% endfor %} </table> {% endif %} </div> <div class=\"col-lg-3 col-md-6\"> <h5 class=\"year\">Yearly Totals</h5> <table class=\"text-right table\"> <tr> <th class=\"text-right\">Year</th> <th class=\"text-right\">Total</th> </tr> <tr> <td> {{ 3 yearsAgo | Select : 'Year' | Uniq | Join : '-' }} </td> <td>{{ 3 yearsAgoTotal | FormatAsCurrency }} </td> </tr> <tr> <td> {{ 2 yearsAgo | Select : 'Year' | Uniq | Join : '-' }} </td> <td>{{ 2 yearsAgoTotal | FormatAsCurrency }} </td> </tr> <tr> <td> {{ 1 yearsAgo | Select : 'Year' | Uniq | Join : '-' }} </td> <td>{{ 1 yearsAgoTotal | FormatAsCurrency }} </td> </tr> {% if currentTotal > 0 %} <tr> <td> {{ current | Select : 'Year' | Uniq | Join : '-' }} </td> <td>{{ currentTotal | FormatAsCurrency }} </td> </tr> {% endif %} </table> <div class=\"alert-success alert\" style=\"margin-top:20px;\"> <h5> {{ current | Select : 'Year' | Uniq | Join : '-' }} Year End Projection : </h 5 > {% if currentTotal == 0 %} <p>At least 1 month must be complete.</p> {% else %} <p> {{ currentTotal | DividedBy : cumulativePercent | FormatAsCurrency }} </p> {% endif %} </div> </div> </div> <div class=\"row\"> {% assign currentSize = current | Size | Minus : 1 %} {% capture chartData %} [ {% for i in ( 0 .. 11 ) %} { name: ' {{ 3 yearsAgo [ i ]. Month | Append : '/01/' | Append : 3 yearsAgo[i].Year | Date : 'MMM.' }} ' ,3year : '{{ 3yearsAgo[i].Total }}' ,2year: ' {{ 2 yearsAgo [ i ]. Total }} ' ,1year: ' {{ 1 yearsAgo [ i ]. Total }} ' {% unless i > currentSize %} ,current: ' {{ current [ i ]. Total }} ' {% endunless %} } {% unless forloop . last %} , {% endunless %} {% endfor %} ] {% endcapture %} {% assign chartData = chartData | FromJSON %} <script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.bundle.min.js\"> </script> <div class=\"chart-container\" style=\"position:relative;height:300px;width:100%;margin-bottom:50px;\"> <h5>Giving History By Month</h5> <canvas id=\"myChart\"></canvas> </div> </div> <script> var ctx = document.getElementById(\"myChart\").getContext('2d'); var myChart = new Chart(ctx, { type: 'line', data: { labels: [ \" {{ chartData | Select : 'name' | Join : '\",\"' }} \" ] , datasets: [ { label: ' {{ 3 yearsAgo | Select : 'Year' | Uniq | Join : '-' }} ', fill : false , data: [ {{ chartData | Select : '3year' | Join : ',' }} ], backgroundColor : [ \"rgba(54,162,235,1)\" ] , borderColor: [ \"rgba(54,162,235,1)\" ], borderWidth: 1 }, { label: ' {{ 2 yearsAgo | Select : 'Year' | Uniq | Join : '-' }} ', fill : false , data: [ {{ chartData | Select : '2year' | Join : ',' }} ], backgroundColor : [ \"rgba(75,192,192,1)\" ] , borderColor: [ \"rgba(75,192,192,1)\" ], borderWidth: 1 }, { label: ' {{ 1 yearsAgo | Select : 'Year' | Uniq | Join : '-' }} ', fill : false , data: [ {{ chartData | Select : '1year' | Join : ',' }} ], backgroundColor : [ \"rgba(255,159,64,1)\" ] , borderColor: [ \"rgba(255,159,64,1)\" ], borderWidth: 1 }, { label: ' {{ current | Select : 'Year' | Uniq | Join : '-' }} ', fill : false , data: [ {{ chartData | Select : 'current' | Join : ',' }} ], backgroundColor : [ \"rgba(153,102,255,1)\" ] , borderColor: [ \"rgba(153,102,255,1)\" ], borderWidth: 1 }, ] }, options: { responsive: true, maintainAspectRatio: false, animation: { duration: 2500, }, legend: { position: 'right' }, scales: { yAxes: [{ ticks: { beginAtZero:false, callback: function(value, index, values) { return '$' + value/1000 + 'k'; } } }] }, tooltips: { callbacks: { label: function(tooltipItem, data) { var label = data.datasets[tooltipItem.datasetIndex].label || ''; if (label) { label += ': '; } label += '$' + Math.round(tooltipItem.yLabel / 100) / 10 + 'k'; return label; } } } } }); </script>","title":"Updated Finance Forecasting Report"},{"location":"Finance/updated-finance-forecasting-report/#updated-finance-forecasting-report","text":"Original idea from Kevin Rutledge - Recipe Link Rewritten by Michael Allen to add support for fiscal years, and to fix a few display bugs This is a fairly complicated report. Read Kevin's recipe (linked above) for a more thorough explanation.","title":"Updated Finance Forecasting Report"},{"location":"Finance/updated-finance-forecasting-report/#dynamic-data-block","text":"","title":"Dynamic Data Block"},{"location":"Finance/updated-finance-forecasting-report/#query","text":"/* BEGIN Configuration */ DECLARE @ Years INT = 4 ; --How many years to pull? (Including the current year; Changing this will break the lava template) DECLARE @ StartMonth INT = 1 ; --What month does your FY start on? DECLARE @ AccountList VARCHAR ( MAX ) = '5,12,24,34,55' ; --Comma seperated list of AccountIds to include /* END Configuration */ DECLARE @ StartDate DATE = DATEFROMPARTS ( DATEPART ( YEAR , GETDATE () ) - ( @ Years - 1 ) , @ StartMonth , 1 ); DECLARE @ EndDate DATE = DATEADD ( YEAR , ( @ Years - 1 ), @ StartDate ); /* If we haven't started this FY yet */ IF ( DATEPART ( MONTH , GETDATE () ) < @ StartMonth ) BEGIN SET @ StartDate = DATEADD ( YEAR , - 1 , @ StartDate ) SET @ EndDate = DATEADD ( YEAR , - 1 , @ EndDate ) END ; DECLARE @ Results TABLE ( Total DECIMAL ( 20 , 2 ), Year INT , Month INT ); INSERT INTO @ Results SELECT SUM ( ftd . Amount ) 'Total' , DATEPART ( YEAR , ft . TransactionDateTime ) 'Year' , DATEPART ( MONTH , ft . TransactionDateTime ) 'Month' FROM [ FinancialTransactionDetail ] ftd JOIN [ FinancialTransaction ] ft ON ftd . TransactionId = ft . Id --Using an inner join to filter the accounts that are included INNER JOIN ufnUtility_CsvToTable ( @ AccountList ) acct ON ftd . AccountId = acct . Item WHERE ft . TransactionDateTime >= @ StartDate AND ft . TransactionDateTime < @ EndDate AND ft . TransactionTypeValueId = 53 --Contribution GROUP BY DATEPART ( YEAR , ft . TransactionDateTime ) , DATEPART ( MONTH , ft . TransactionDateTime ) ; /* table1 = current year */ SET @ StartDate = @ EndDate ; SET @ EndDate = DATEFROMPARTS ( DATEPART ( YEAR , GETDATE () ), DATEPART ( MONTH , GETDATE () ), 1 ); SELECT ( SELECT SUM ( ftd . Amount ) 'Total' , DATEPART ( YEAR , ft . TransactionDateTime ) 'Year' , DATEPART ( MONTH , ft . TransactionDateTime ) 'Month' FROM [ FinancialTransactionDetail ] ftd JOIN [ FinancialTransaction ] ft ON ftd . TransactionId = ft . Id --Using an inner join to filter the accounts that are included INNER JOIN ufnUtility_CsvToTable ( @ AccountList ) acct ON ftd . AccountId = acct . Item WHERE ft . TransactionDateTime >= @ StartDate AND ft . TransactionDateTime < @ EndDate AND ft . TransactionTypeValueId = 53 --Contribution GROUP BY DATEPART ( YEAR , ft . TransactionDateTime ) , DATEPART ( MONTH , ft . TransactionDateTime ) ORDER BY 'Year' , 'Month' FOR JSON PATH ) 'json' ; /* table2, table3, table4 = previous 3 years*/ DECLARE @ i INT = 0 ; WHILE @ i < ( @ Years - 1 ) BEGIN SELECT ( SELECT * FROM @ Results ORDER BY 'Year' , 'Month' OFFSET ( @ i * 12 ) ROWS FETCH NEXT 12 ROWS ONLY FOR JSON PATH ) 'json' ; SET @ i = @ i + 1 ; END ; /* table5 = totals */ SELECT ( SELECT SUM ( Total ) 'Total' , Month , MIN ( Year ) 'Year' FROM @ Results GROUP BY Month ORDER BY 'Year' FOR JSON PATH ) 'json' ;","title":"Query"},{"location":"Finance/updated-finance-forecasting-report/#formatted-output","text":"{% assign current = table 1 .rows[ 0 ].json | FromJSON %} {% assign 3yearsAgo = table 2 .rows[ 0 ].json | FromJSON %} {% assign 2yearsAgo = table 3 .rows[ 0 ].json | FromJSON %} {% assign 1yearsAgo = table 4 .rows[ 0 ].json | FromJSON %} {% assign totals = table 5 .rows[ 0 ].json | FromJSON %} {% assign 3yearsAgoTotal = 0 %} {% assign 2yearsAgoTotal = 0 %} {% assign 1yearsAgoTotal = 0 %} {% assign currentTotal = 0 %} {% for row in 3 yearsAgo %} {% assign 3yearsAgoTotal = 3 yearsAgoTotal | Plus : row.Total %} {% endfor %} {% for row in 2 yearsAgo %} {% assign 2yearsAgoTotal = 2 yearsAgoTotal | Plus : row.Total %} {% endfor %} {% for row in 1 yearsAgo %} {% assign 1yearsAgoTotal = 1 yearsAgoTotal | Plus : row.Total %} {% endfor %} {% for row in current %} {% assign currentTotal = currentTotal | Plus : row.Total %} {% endfor %} {% assign grandTotal = 3 yearsAgoTotal | Plus : 2 yearsAgoTotal | Plus : 1 yearsAgoTotal %} {% capture multipliers %} [ {% for row in totals %} {{ row . Total | DividedBy : grandTotal , 4 }} {% unless forloop . last %} , {% endunless %} {% endfor %} ] {% endcapture %} {% assign multipliers = multipliers | FromJSON %} <style> .year { text-align:center; font-weight: bold; } .text-right { font-family: monospace; text-align: right; } .table { font-size: 0.9em; } </style> <div class=\"row\"> <div class=\"col-lg-3 col-md-6\"> <h5 class=\"year\"> {{ 3 yearsAgo | Select : 'Year' | Uniq | Join : '-' }} </h5> <table class = \"text-right table\" > <tr> <th class=\"text-right\">Month</th> <th class=\"text-right\">Total Given</th> <th class=\"text-right\">% of Total</th> </tr> {% for month in 3 yearsAgo %} <tr> <td> {{ month . Month | Append : '/01/' | Append : month.Year | Date : 'MMM. yy' }} </td> <td>{{ month.Total | FormatAsCurrency }} </td> <td>{{ month.Total | DividedBy : 3 yearsAgoTotal , 4 | Format : 'p' }} </td> </tr> {% endfor %} </table> </div> <div class=\"col-lg-3 col-md-6\"> <h5 class=\"year\"> {{ 2 yearsAgo | Select : 'Year' | Uniq | Join : '-' }} </h5> <table class = \"text-right table\" > <tr> <th class=\"text-right\">Month</th> <th class=\"text-right\">Total Given</th> <th class=\"text-right\">% of Total</th> </tr> {% for month in 2 yearsAgo %} <tr> <td> {{ month . Month | Append : '/01/' | Append : month.Year | Date : 'MMM. yy' }} </td> <td>{{ month.Total | FormatAsCurrency }} </td> <td>{{ month.Total | DividedBy : 2 yearsAgoTotal , 4 | Format : 'p' }} </td> </tr> {% endfor %} </table> </div> <div class=\"col-lg-3 col-md-6\"> <h5 class=\"year\"> {{ 1 yearsAgo | Select : 'Year' | Uniq | Join : '-' }} </h5> <table class = \"text-right table\" > <tr> <th class=\"text-right\">Month</th> <th class=\"text-right\">Total Given</th> <th class=\"text-right\">% of Total</th> </tr> {% for month in 1 yearsAgo %} <tr> <td> {{ month . Month | Append : '/01/' | Append : month.Year | Date : 'MMM. yy' }} </td> <td>{{ month.Total | FormatAsCurrency }} </td> <td>{{ month.Total | DividedBy : 1 yearsAgoTotal , 4 | Format : 'p' }} </td> </tr> {% endfor %} </table> </div> <div class=\"col-lg-3 col-md-6\"> <h5 class=\"year\">3 Year Total</h5> <table class=\"text-right table\"> <tr> <th class=\"text-right\">Month</th> <th class=\"text-right\">Total Given</th> <th class=\"text-right\">% of Total</th> </tr> {% for month in totals %} <tr> <td> {{ month . Month | Append : '/01/2000' | Date : 'MMM.' }} </td> <td>{{ month.Total | FormatAsCurrency }} </td> <td>{{ multipliers[forloop.index 0 ] | Format : 'p' }} </td> </tr> {% endfor %} </table> </div> </div> <div class=\"row\"> <div class=\"col-md-6\"> <h5 class=\"year\">Current Year: {{ current | Select : 'Year' | Uniq | Join : '-' }} </h5> {% if currentTotal = = 0 %} <p>At least 1 month must be complete.</p> {% else %} <table class=\"text-right table\"> <tr> <th class=\"text-right\">Month</th> <th class=\"text-right\">Total Given</th> <th class=\"text-right\">% Multiplier</th> <th class=\"text-right\">Year End Projection</th> </tr> {% assign cumulativePercent = 0 %} {% for month in current %} {% assign cumulativePercent = cumulativePercent | Plus : multipliers[forloop.index 0 ] %} <tr> <td> {{ month . Month | Append : '/01/' | Append : month.Year | Date : 'MMM. yy' }} </td> <td>{{ month.Total | FormatAsCurrency }} </td> <td>{{ multipliers[forloop.index 0 ] | Format : 'p' }} </td> <td>{{ month.Total | DividedBy : multipliers[forloop.index 0 ] | FormatAsCurrency }} </td> </tr> {% endfor %} </table> {% endif %} </div> <div class=\"col-lg-3 col-md-6\"> <h5 class=\"year\">Yearly Totals</h5> <table class=\"text-right table\"> <tr> <th class=\"text-right\">Year</th> <th class=\"text-right\">Total</th> </tr> <tr> <td> {{ 3 yearsAgo | Select : 'Year' | Uniq | Join : '-' }} </td> <td>{{ 3 yearsAgoTotal | FormatAsCurrency }} </td> </tr> <tr> <td> {{ 2 yearsAgo | Select : 'Year' | Uniq | Join : '-' }} </td> <td>{{ 2 yearsAgoTotal | FormatAsCurrency }} </td> </tr> <tr> <td> {{ 1 yearsAgo | Select : 'Year' | Uniq | Join : '-' }} </td> <td>{{ 1 yearsAgoTotal | FormatAsCurrency }} </td> </tr> {% if currentTotal > 0 %} <tr> <td> {{ current | Select : 'Year' | Uniq | Join : '-' }} </td> <td>{{ currentTotal | FormatAsCurrency }} </td> </tr> {% endif %} </table> <div class=\"alert-success alert\" style=\"margin-top:20px;\"> <h5> {{ current | Select : 'Year' | Uniq | Join : '-' }} Year End Projection : </h 5 > {% if currentTotal == 0 %} <p>At least 1 month must be complete.</p> {% else %} <p> {{ currentTotal | DividedBy : cumulativePercent | FormatAsCurrency }} </p> {% endif %} </div> </div> </div> <div class=\"row\"> {% assign currentSize = current | Size | Minus : 1 %} {% capture chartData %} [ {% for i in ( 0 .. 11 ) %} { name: ' {{ 3 yearsAgo [ i ]. Month | Append : '/01/' | Append : 3 yearsAgo[i].Year | Date : 'MMM.' }} ' ,3year : '{{ 3yearsAgo[i].Total }}' ,2year: ' {{ 2 yearsAgo [ i ]. Total }} ' ,1year: ' {{ 1 yearsAgo [ i ]. Total }} ' {% unless i > currentSize %} ,current: ' {{ current [ i ]. Total }} ' {% endunless %} } {% unless forloop . last %} , {% endunless %} {% endfor %} ] {% endcapture %} {% assign chartData = chartData | FromJSON %} <script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.1/Chart.bundle.min.js\"> </script> <div class=\"chart-container\" style=\"position:relative;height:300px;width:100%;margin-bottom:50px;\"> <h5>Giving History By Month</h5> <canvas id=\"myChart\"></canvas> </div> </div> <script> var ctx = document.getElementById(\"myChart\").getContext('2d'); var myChart = new Chart(ctx, { type: 'line', data: { labels: [ \" {{ chartData | Select : 'name' | Join : '\",\"' }} \" ] , datasets: [ { label: ' {{ 3 yearsAgo | Select : 'Year' | Uniq | Join : '-' }} ', fill : false , data: [ {{ chartData | Select : '3year' | Join : ',' }} ], backgroundColor : [ \"rgba(54,162,235,1)\" ] , borderColor: [ \"rgba(54,162,235,1)\" ], borderWidth: 1 }, { label: ' {{ 2 yearsAgo | Select : 'Year' | Uniq | Join : '-' }} ', fill : false , data: [ {{ chartData | Select : '2year' | Join : ',' }} ], backgroundColor : [ \"rgba(75,192,192,1)\" ] , borderColor: [ \"rgba(75,192,192,1)\" ], borderWidth: 1 }, { label: ' {{ 1 yearsAgo | Select : 'Year' | Uniq | Join : '-' }} ', fill : false , data: [ {{ chartData | Select : '1year' | Join : ',' }} ], backgroundColor : [ \"rgba(255,159,64,1)\" ] , borderColor: [ \"rgba(255,159,64,1)\" ], borderWidth: 1 }, { label: ' {{ current | Select : 'Year' | Uniq | Join : '-' }} ', fill : false , data: [ {{ chartData | Select : 'current' | Join : ',' }} ], backgroundColor : [ \"rgba(153,102,255,1)\" ] , borderColor: [ \"rgba(153,102,255,1)\" ], borderWidth: 1 }, ] }, options: { responsive: true, maintainAspectRatio: false, animation: { duration: 2500, }, legend: { position: 'right' }, scales: { yAxes: [{ ticks: { beginAtZero:false, callback: function(value, index, values) { return '$' + value/1000 + 'k'; } } }] }, tooltips: { callbacks: { label: function(tooltipItem, data) { var label = data.datasets[tooltipItem.datasetIndex].label || ''; if (label) { label += ': '; } label += '$' + Math.round(tooltipItem.yLabel / 100) / 10 + 'k'; return label; } } } } }); </script>","title":"Formatted Output"},{"location":"Finance/yearly-giving-units-%28statements%29/","text":"Yearly Giving Units For every year between the specified years, return the number of giving units that have given more than the specified minimum amount. If you don't want a minimum amount, you can set it to 0. Query DECLARE @ Years nvarchar ( 9 ) = '2018-2020' ; DECLARE @ Minimum decimal = 200 . 00 ; -- How much must they give to be counted? WITH cte_totals AS ( SELECT p . GivingLeaderId , DATEPART ( YEAR , ft . SundayDate ) 'Year' , SUM ( ftd . Amount ) 'Total' FROM [ FinancialTransaction ] ft JOIN [ FinancialTransactionDetail ] ftd ON ft . Id = ftd . TransactionId JOIN [ PersonAlias ] pa ON ft . AuthorizedPersonAliasId = pa . Id JOIN [ Person ] p ON pa . PersonId = p . Id WHERE ft . transactionTypeValueId = 53 AND p . Id <> 2 --Exclude Anonymous Giver AND DATEPART ( YEAR , ft . SundayDate ) BETWEEN LEFT ( @ Years , 4 ) AND RIGHT ( @ Years , 4 ) GROUP BY p . GivingLeaderId , DATEPART ( YEAR , ft . SundayDate ) HAVING SUM ( ftd . Amount ) >= @ Minimum ) SELECT Year , COUNT ( 1 ) 'Units' FROM cte_totals GROUP BY Year ORDER BY Year ASC","title":"Yearly Giving Units"},{"location":"Finance/yearly-giving-units-%28statements%29/#yearly-giving-units","text":"For every year between the specified years, return the number of giving units that have given more than the specified minimum amount. If you don't want a minimum amount, you can set it to 0.","title":"Yearly Giving Units"},{"location":"Finance/yearly-giving-units-%28statements%29/#query","text":"DECLARE @ Years nvarchar ( 9 ) = '2018-2020' ; DECLARE @ Minimum decimal = 200 . 00 ; -- How much must they give to be counted? WITH cte_totals AS ( SELECT p . GivingLeaderId , DATEPART ( YEAR , ft . SundayDate ) 'Year' , SUM ( ftd . Amount ) 'Total' FROM [ FinancialTransaction ] ft JOIN [ FinancialTransactionDetail ] ftd ON ft . Id = ftd . TransactionId JOIN [ PersonAlias ] pa ON ft . AuthorizedPersonAliasId = pa . Id JOIN [ Person ] p ON pa . PersonId = p . Id WHERE ft . transactionTypeValueId = 53 AND p . Id <> 2 --Exclude Anonymous Giver AND DATEPART ( YEAR , ft . SundayDate ) BETWEEN LEFT ( @ Years , 4 ) AND RIGHT ( @ Years , 4 ) GROUP BY p . GivingLeaderId , DATEPART ( YEAR , ft . SundayDate ) HAVING SUM ( ftd . Amount ) >= @ Minimum ) SELECT Year , COUNT ( 1 ) 'Units' FROM cte_totals GROUP BY Year ORDER BY Year ASC","title":"Query"},{"location":"Groups/attendanceoccurrence-with-notes/","text":"AttendanceOccurrence with Notes Parameters @StartDate (Date) @EndDate (Date) Query SELECT g . Id 'GroupId' , ao . Id 'OccurrenceId' , ao . OccurrenceDate 'Date' , CONCAT ( '<a href=\"/page/570?GroupId=' , g . Id , '\">' , g . Name , '</a>' ) 'Group' , ao . Notes FROM [ AttendanceOccurrence ] ao JOIN [ Group ] g ON ao . GroupId = g . Id JOIN [ GroupType ] gt ON g . GroupTypeId = gt . Id WHERE gt . Guid = @ GroupType AND ao . OccurrenceDate BETWEEN LEFT ( @ StartDate , 10 ) AND LEFT ( @ EndDate , 10 ) AND ao . Notes <> '' ORDER BY ao . OccurrenceDate DESC , g . Name","title":"AttendanceOccurrence with Notes"},{"location":"Groups/attendanceoccurrence-with-notes/#attendanceoccurrence-with-notes","text":"","title":"AttendanceOccurrence with Notes"},{"location":"Groups/attendanceoccurrence-with-notes/#parameters","text":"@StartDate (Date) @EndDate (Date)","title":"Parameters"},{"location":"Groups/attendanceoccurrence-with-notes/#query","text":"SELECT g . Id 'GroupId' , ao . Id 'OccurrenceId' , ao . OccurrenceDate 'Date' , CONCAT ( '<a href=\"/page/570?GroupId=' , g . Id , '\">' , g . Name , '</a>' ) 'Group' , ao . Notes FROM [ AttendanceOccurrence ] ao JOIN [ Group ] g ON ao . GroupId = g . Id JOIN [ GroupType ] gt ON g . GroupTypeId = gt . Id WHERE gt . Guid = @ GroupType AND ao . OccurrenceDate BETWEEN LEFT ( @ StartDate , 10 ) AND LEFT ( @ EndDate , 10 ) AND ao . Notes <> '' ORDER BY ao . OccurrenceDate DESC , g . Name","title":"Query"},{"location":"Groups/first-attendance-in-group-types/","text":"First Attendance in Group Types Return anyone that attended any group of the specified types for the first time between @StartDate and @EndDate . Query DECLARE @ GroupTypes varchar ( max ) = '38,41,58,59' ; --Serve Teams DECLARE @ StartDate Date = '2019-11-01' ; DECLARE @ EndDate Date = '2019-12-31' ; WITH cte_Ranked AS ( SELECT a . PersonAliasId , g . Id 'GroupId' , ao . OccurrenceDate , ROW_NUMBER () OVER ( PARTITION BY a . PersonAliasId ORDER BY ao . OccurrenceDate ASC ) 'Rank' FROM [ AttendanceOccurrence ] ao JOIN [ Attendance ] a ON ao . Id = a . OccurrenceId AND a . DidAttend = 1 INNER JOIN [ Group ] g ON ao . GroupId = g . Id AND g . GroupTypeId IN ( SELECT * FROM dbo . ufnUtility_CsvToTable ( @ GroupTypes ) ) AND g . IsActive = 1 AND g . IsArchived = 0 WHERE ao . DidNotOccur = 0 ) SELECT r . OccurrenceDate 'First Attendance' , p . Id 'PersonId' , p . FirstName , p . LastName , g . Id 'GroupId' , g . Name 'GroupName' FROM [ cte_Ranked ] r JOIN [ Group ] g ON r . GroupId = g . Id JOIN [ PersonAlias ] pa ON r . PersonAliasId = pa . Id JOIN [ Person ] p ON pa . PersonId = p . Id WHERE r . Rank = 1 AND r . OccurrenceDate BETWEEN @ StartDate AND @ EndDate ORDER BY r . OccurrenceDate DESC , p . LastName , p . FirstName","title":"First Attendance in Group Types"},{"location":"Groups/first-attendance-in-group-types/#first-attendance-in-group-types","text":"Return anyone that attended any group of the specified types for the first time between @StartDate and @EndDate .","title":"First Attendance in Group Types"},{"location":"Groups/first-attendance-in-group-types/#query","text":"DECLARE @ GroupTypes varchar ( max ) = '38,41,58,59' ; --Serve Teams DECLARE @ StartDate Date = '2019-11-01' ; DECLARE @ EndDate Date = '2019-12-31' ; WITH cte_Ranked AS ( SELECT a . PersonAliasId , g . Id 'GroupId' , ao . OccurrenceDate , ROW_NUMBER () OVER ( PARTITION BY a . PersonAliasId ORDER BY ao . OccurrenceDate ASC ) 'Rank' FROM [ AttendanceOccurrence ] ao JOIN [ Attendance ] a ON ao . Id = a . OccurrenceId AND a . DidAttend = 1 INNER JOIN [ Group ] g ON ao . GroupId = g . Id AND g . GroupTypeId IN ( SELECT * FROM dbo . ufnUtility_CsvToTable ( @ GroupTypes ) ) AND g . IsActive = 1 AND g . IsArchived = 0 WHERE ao . DidNotOccur = 0 ) SELECT r . OccurrenceDate 'First Attendance' , p . Id 'PersonId' , p . FirstName , p . LastName , g . Id 'GroupId' , g . Name 'GroupName' FROM [ cte_Ranked ] r JOIN [ Group ] g ON r . GroupId = g . Id JOIN [ PersonAlias ] pa ON r . PersonAliasId = pa . Id JOIN [ Person ] p ON pa . PersonId = p . Id WHERE r . Rank = 1 AND r . OccurrenceDate BETWEEN @ StartDate AND @ EndDate ORDER BY r . OccurrenceDate DESC , p . LastName , p . FirstName","title":"Query"},{"location":"Groups/last-time-attending-per-serve-team/","text":"Last Time Attending Per Serve Team Lists everyone in a group of the specified types that hasn't attended at least once in the past X months. Query DECLARE @ GroupTypes varchar ( max ) = '38,41,58' ; --Serve Teams (KW, Students, Weekend) DECLARE @ Months int = 6 ; --Filter out people that have attended in the past X months DECLARE @ AttendanceTable TABLE ( PersonId int , GroupId int , OccurrenceDate Date , Rank int ); INSERT INTO @ AttendanceTable ( PersonId , GroupId , OccurrenceDate , Rank ) ( SELECT pa . PersonId , g . Id 'GroupId' , ao . OccurrenceDate , ROW_NUMBER () OVER ( PARTITION BY pa . PersonId , g . Id ORDER BY ao . OccurrenceDate DESC ) FROM [ AttendanceOccurrence ] ao JOIN [ Attendance ] a ON ao . Id = a . OccurrenceId AND a . DidAttend = 1 INNER JOIN [ Group ] g ON ao . GroupId = g . Id JOIN [ PersonAlias ] pa ON a . PersonAliasId = pa . Id WHERE ao . DidNotOccur = 0 OR ao . DidNotOccur IS NULL ); SELECT p . Id 'PersonId' , g . Id 'GroupId' , g . Name 'Group' , CONCAT ( p . NickName , ' ' , p . LastName ) 'Person' , a . OccurrenceDate 'LastCheckin' FROM [ GroupMember ] gm INNER JOIN [ Group ] g ON gm . GroupId = g . Id AND g . GroupTypeId IN ( SELECT * FROM dbo . ufnUtility_CsvToTable ( @ GroupTypes ) ) AND g . IsActive = 1 AND g . IsArchived = 0 JOIN [ Person ] p ON gm . PersonId = p . Id LEFT JOIN @ AttendanceTable a ON g . Id = a . GroupId AND p . Id = a . PersonId AND a . Rank = 1 WHERE gm . GroupMemberStatus = 1 --Active AND gm . IsArchived = 0 AND ( a . OccurrenceDate < DATEADD ( m , - 1 * @ Months , GETDATE () ) OR a . OccurrenceDate IS NULL ) ORDER BY g . Name , LastCheckin desc , p . LastName , p . FirstName","title":"Last Time Attending Per Serve Team"},{"location":"Groups/last-time-attending-per-serve-team/#last-time-attending-per-serve-team","text":"Lists everyone in a group of the specified types that hasn't attended at least once in the past X months.","title":"Last Time Attending Per Serve Team"},{"location":"Groups/last-time-attending-per-serve-team/#query","text":"DECLARE @ GroupTypes varchar ( max ) = '38,41,58' ; --Serve Teams (KW, Students, Weekend) DECLARE @ Months int = 6 ; --Filter out people that have attended in the past X months DECLARE @ AttendanceTable TABLE ( PersonId int , GroupId int , OccurrenceDate Date , Rank int ); INSERT INTO @ AttendanceTable ( PersonId , GroupId , OccurrenceDate , Rank ) ( SELECT pa . PersonId , g . Id 'GroupId' , ao . OccurrenceDate , ROW_NUMBER () OVER ( PARTITION BY pa . PersonId , g . Id ORDER BY ao . OccurrenceDate DESC ) FROM [ AttendanceOccurrence ] ao JOIN [ Attendance ] a ON ao . Id = a . OccurrenceId AND a . DidAttend = 1 INNER JOIN [ Group ] g ON ao . GroupId = g . Id JOIN [ PersonAlias ] pa ON a . PersonAliasId = pa . Id WHERE ao . DidNotOccur = 0 OR ao . DidNotOccur IS NULL ); SELECT p . Id 'PersonId' , g . Id 'GroupId' , g . Name 'Group' , CONCAT ( p . NickName , ' ' , p . LastName ) 'Person' , a . OccurrenceDate 'LastCheckin' FROM [ GroupMember ] gm INNER JOIN [ Group ] g ON gm . GroupId = g . Id AND g . GroupTypeId IN ( SELECT * FROM dbo . ufnUtility_CsvToTable ( @ GroupTypes ) ) AND g . IsActive = 1 AND g . IsArchived = 0 JOIN [ Person ] p ON gm . PersonId = p . Id LEFT JOIN @ AttendanceTable a ON g . Id = a . GroupId AND p . Id = a . PersonId AND a . Rank = 1 WHERE gm . GroupMemberStatus = 1 --Active AND gm . IsArchived = 0 AND ( a . OccurrenceDate < DATEADD ( m , - 1 * @ Months , GETDATE () ) OR a . OccurrenceDate IS NULL ) ORDER BY g . Name , LastCheckin desc , p . LastName , p . FirstName","title":"Query"},{"location":"Groups/latest-attendance-dates-per-group/","text":"Latest Attendance Dates Per-group For each group of the specified type, list the most recent attendance occurrence, the number of people attending, and any attendance notes entered. Query DECLARE @ GroupType int = 25 ; --Life Groups WITH cte_Ranked AS ( SELECT g .[ Id ] 'GroupId' , ao .[ Id ] 'AttendanceOccurrenceId' , RANK () OVER ( PARTITION BY g .[ Id ] ORDER BY ao .[ OccurrenceDate ] DESC ) 'Rank' FROM [ Group ] g LEFT JOIN [ AttendanceOccurrence ] ao ON g .[ Id ] = ao .[ GroupId ] AND ( ao .[ DidNotOccur ] IS NULL OR ao .[ DidNotOccur ] = 0 ) WHERE g .[ GroupTypeId ] = @ GroupType AND g .[ IsActive ] = 1 AND g .[ IsArchived ] = 0 ) SELECT g .[ Id ] , g .[ Name ] , ao .[ OccurrenceDate ] 'Last Attendance' , NULLIF ( ( SELECT COUNT ( 1 ) FROM [ Attendance ] WHERE [ OccurrenceId ] = r .[ AttendanceOccurrenceId ] AND [ DidAttend ] = 1 ), 0 ) 'Attendee Count' , ao .[ Notes ] 'Attendance Note' FROM [ cte_Ranked ] r JOIN [ Group ] g ON r .[ GroupId ] = g .[ Id ] LEFT JOIN [ AttendanceOccurrence ] ao ON r .[ AttendanceOccurrenceId ] = ao .[ Id ] WHERE r .[ Rank ] = 1 ORDER BY ao .[ OccurrenceDate ] DESC","title":"Latest Attendance Dates Per-group"},{"location":"Groups/latest-attendance-dates-per-group/#latest-attendance-dates-per-group","text":"For each group of the specified type, list the most recent attendance occurrence, the number of people attending, and any attendance notes entered.","title":"Latest Attendance Dates Per-group"},{"location":"Groups/latest-attendance-dates-per-group/#query","text":"DECLARE @ GroupType int = 25 ; --Life Groups WITH cte_Ranked AS ( SELECT g .[ Id ] 'GroupId' , ao .[ Id ] 'AttendanceOccurrenceId' , RANK () OVER ( PARTITION BY g .[ Id ] ORDER BY ao .[ OccurrenceDate ] DESC ) 'Rank' FROM [ Group ] g LEFT JOIN [ AttendanceOccurrence ] ao ON g .[ Id ] = ao .[ GroupId ] AND ( ao .[ DidNotOccur ] IS NULL OR ao .[ DidNotOccur ] = 0 ) WHERE g .[ GroupTypeId ] = @ GroupType AND g .[ IsActive ] = 1 AND g .[ IsArchived ] = 0 ) SELECT g .[ Id ] , g .[ Name ] , ao .[ OccurrenceDate ] 'Last Attendance' , NULLIF ( ( SELECT COUNT ( 1 ) FROM [ Attendance ] WHERE [ OccurrenceId ] = r .[ AttendanceOccurrenceId ] AND [ DidAttend ] = 1 ), 0 ) 'Attendee Count' , ao .[ Notes ] 'Attendance Note' FROM [ cte_Ranked ] r JOIN [ Group ] g ON r .[ GroupId ] = g .[ Id ] LEFT JOIN [ AttendanceOccurrence ] ao ON r .[ AttendanceOccurrenceId ] = ao .[ Id ] WHERE r .[ Rank ] = 1 ORDER BY ao .[ OccurrenceDate ] DESC","title":"Query"},{"location":"Groups/list-known-relationships-for-individual/","text":"List Known Relationships for Individual Returns a list of all of the known relationships for the provided person Query DECLARE @ PersonId int = 515 ; --Who are we looking at? DECLARE @ OwnerRoleId int = 5 ; --Owner DECLARE @ KnownRelationshipGroupId int = ( SELECT TOP 1 GroupId FROM [ GroupMember ] WHERE PersonId = @ PersonId AND GroupRoleId = @ OwnerRoleId ); SELECT r . Name 'Role' , CONCAT ( p . NickName , ' ' , p . LastName ) 'Person' FROM [ Group ] g JOIN [ GroupMember ] gm ON g . Id = gm . GroupId JOIN [ GroupTypeRole ] r ON gm . GroupRoleId = r . Id JOIN [ Person ] p ON gm . PersonId = p . Id WHERE g . Id = @ KnownRelationshipGroupId AND gm . GroupRoleId <> @ OwnerRoleId ORDER BY 'Role' , 'Person' Lava Alternative {% assign personKrGroup = Person | Groups : 11 | Where : 'GroupRoleId' , '5' | Select : 'GroupId' | First | GroupById %} <ul> {% for member in personKrGroup.Members %} <li> {{ member . Person . FullName }} - {{ member . GroupRole . Name }} </li> {% endfor %} </ul>","title":"List Known Relationships for Individual"},{"location":"Groups/list-known-relationships-for-individual/#list-known-relationships-for-individual","text":"Returns a list of all of the known relationships for the provided person","title":"List Known Relationships for Individual"},{"location":"Groups/list-known-relationships-for-individual/#query","text":"DECLARE @ PersonId int = 515 ; --Who are we looking at? DECLARE @ OwnerRoleId int = 5 ; --Owner DECLARE @ KnownRelationshipGroupId int = ( SELECT TOP 1 GroupId FROM [ GroupMember ] WHERE PersonId = @ PersonId AND GroupRoleId = @ OwnerRoleId ); SELECT r . Name 'Role' , CONCAT ( p . NickName , ' ' , p . LastName ) 'Person' FROM [ Group ] g JOIN [ GroupMember ] gm ON g . Id = gm . GroupId JOIN [ GroupTypeRole ] r ON gm . GroupRoleId = r . Id JOIN [ Person ] p ON gm . PersonId = p . Id WHERE g . Id = @ KnownRelationshipGroupId AND gm . GroupRoleId <> @ OwnerRoleId ORDER BY 'Role' , 'Person'","title":"Query"},{"location":"Groups/list-known-relationships-for-individual/#lava-alternative","text":"{% assign personKrGroup = Person | Groups : 11 | Where : 'GroupRoleId' , '5' | Select : 'GroupId' | First | GroupById %} <ul> {% for member in personKrGroup.Members %} <li> {{ member . Person . FullName }} - {{ member . GroupRole . Name }} </li> {% endfor %} </ul>","title":"Lava Alternative"},{"location":"Groups/person%27s-first-attendance-in-group-type-tree/","text":"Person's First Attendance in Group Type Tree Search every group of the specified type, or any of its child types, to find the first time the specified person attended. This can be easily modified to return their most recent attendance datetime by changing line 18 from MIN to MAX . Example Given the following checkin structure: Volunteer Checkin (Checkin Configuration / Group Type) - Weekend Volunteers (Checkin Area / Group Type) - Worship (Group) - Production (Group) - Camera (Group) - Audio (Group) - Non-Weekend Volunteers (Checkin Area / Group Type) - Facilities (Group) - Reception (Group) If you were to run this on \"Volunteer Checkin\", it will look through every group in the tree, regardless of how many levels deep it is. Query Note, this query will blow up if you have any circular group type associations DECLARE @ parentGroupType INT = 49 ; --Volunteer Checkin DECLARE @ personId INT = 515 ; WITH cte_grouptypes AS ( SELECT CAST ( @ parentGroupType AS INT ) 'Id' UNION ALL SELECT ChildGroupTypeId 'Id' FROM [ GroupTypeAssociation ] gta INNER JOIN cte_grouptypes cte ON gta . GroupTypeId = cte . Id WHERE gta . GroupTypeID <> gta . ChildGroupTypeID ) SELECT CONCAT ( MIN ( OccurrenceDate ), 'T00:00:00' ) FROM [ Attendance ] a JOIN [ PersonAlias ] pa ON a . PersonAliasId = pa . Id JOIN [ AttendanceOccurrence ] ao ON a . OccurrenceId = ao . Id JOIN [ Group ] g ON ao . GroupId = g . Id INNER JOIN [ cte_grouptypes ] cte ON g . GroupTypeId = cte . Id WHERE a . DidAttend = 1 AND pa . PersonId = @ personId","title":"Person's First Attendance in Group Type Tree"},{"location":"Groups/person%27s-first-attendance-in-group-type-tree/#persons-first-attendance-in-group-type-tree","text":"Search every group of the specified type, or any of its child types, to find the first time the specified person attended. This can be easily modified to return their most recent attendance datetime by changing line 18 from MIN to MAX .","title":"Person's First Attendance in Group Type Tree"},{"location":"Groups/person%27s-first-attendance-in-group-type-tree/#example","text":"Given the following checkin structure: Volunteer Checkin (Checkin Configuration / Group Type) - Weekend Volunteers (Checkin Area / Group Type) - Worship (Group) - Production (Group) - Camera (Group) - Audio (Group) - Non-Weekend Volunteers (Checkin Area / Group Type) - Facilities (Group) - Reception (Group) If you were to run this on \"Volunteer Checkin\", it will look through every group in the tree, regardless of how many levels deep it is.","title":"Example"},{"location":"Groups/person%27s-first-attendance-in-group-type-tree/#query","text":"Note, this query will blow up if you have any circular group type associations DECLARE @ parentGroupType INT = 49 ; --Volunteer Checkin DECLARE @ personId INT = 515 ; WITH cte_grouptypes AS ( SELECT CAST ( @ parentGroupType AS INT ) 'Id' UNION ALL SELECT ChildGroupTypeId 'Id' FROM [ GroupTypeAssociation ] gta INNER JOIN cte_grouptypes cte ON gta . GroupTypeId = cte . Id WHERE gta . GroupTypeID <> gta . ChildGroupTypeID ) SELECT CONCAT ( MIN ( OccurrenceDate ), 'T00:00:00' ) FROM [ Attendance ] a JOIN [ PersonAlias ] pa ON a . PersonAliasId = pa . Id JOIN [ AttendanceOccurrence ] ao ON a . OccurrenceId = ao . Id JOIN [ Group ] g ON ao . GroupId = g . Id INNER JOIN [ cte_grouptypes ] cte ON g . GroupTypeId = cte . Id WHERE a . DidAttend = 1 AND pa . PersonId = @ personId","title":"Query"},{"location":"Groups/recursively-list-all-groups-under-a-specified-parent/","text":"Recursively List All Groups Under a Specified Parent Traverses a group tree and returns all descendant groups. Data returned includes Id, Names, and Path. The path is in the following format: GroupName ParentGroupName :: GroupName GrandparentGroupName :: ParentGroupName :: GroupName etc. Query DECLARE @ parentGroupId int = 41 ; DECLARE @ groups table ( \"Id\" int , \"Name\" varchar ( max ), \"Path\" varchar ( max )); -- Recursively get all groups under the parent WITH CTE AS ( SELECT g . Id , g . ParentGroupId , CAST ( g . Name AS Varchar ( max ) ) 'Name' , CAST ( g . Name AS Varchar ( max ) ) 'Path' FROM [ Group ] g WHERE g . ParentGroupId = @ parentGroupId UNION ALL SELECT g . Id , g . ParentGroupId , CAST ( g . Name AS varchar ( max ) ) 'Name' , CAST ( CONCAT ( CTE . Path , ' :: ' , g . Name ) AS Varchar ( max ) ) 'Path' FROM [ Group ] g INNER JOIN CTE ON g . ParentGroupId = CTE . Id ) INSERT INTO @ groups SELECT Id , Name , Path FROM CTE ; -- Preview the selected groups SELECT * FROM @ groups ORDER BY Path ;","title":"Recursively List All Groups Under a Specified Parent"},{"location":"Groups/recursively-list-all-groups-under-a-specified-parent/#recursively-list-all-groups-under-a-specified-parent","text":"Traverses a group tree and returns all descendant groups. Data returned includes Id, Names, and Path. The path is in the following format: GroupName ParentGroupName :: GroupName GrandparentGroupName :: ParentGroupName :: GroupName etc.","title":"Recursively List All Groups Under a Specified Parent"},{"location":"Groups/recursively-list-all-groups-under-a-specified-parent/#query","text":"DECLARE @ parentGroupId int = 41 ; DECLARE @ groups table ( \"Id\" int , \"Name\" varchar ( max ), \"Path\" varchar ( max )); -- Recursively get all groups under the parent WITH CTE AS ( SELECT g . Id , g . ParentGroupId , CAST ( g . Name AS Varchar ( max ) ) 'Name' , CAST ( g . Name AS Varchar ( max ) ) 'Path' FROM [ Group ] g WHERE g . ParentGroupId = @ parentGroupId UNION ALL SELECT g . Id , g . ParentGroupId , CAST ( g . Name AS varchar ( max ) ) 'Name' , CAST ( CONCAT ( CTE . Path , ' :: ' , g . Name ) AS Varchar ( max ) ) 'Path' FROM [ Group ] g INNER JOIN CTE ON g . ParentGroupId = CTE . Id ) INSERT INTO @ groups SELECT Id , Name , Path FROM CTE ; -- Preview the selected groups SELECT * FROM @ groups ORDER BY Path ;","title":"Query"},{"location":"Plugins/ProjectManagement/projects-and-tasks-due-this-week/","text":"Projects and Tasks Due This Week Returns a list of tasks and projects, assigned to the specified user, that are due in the next X days, or are overdue. We use this in a weekly email to keep people from forgetting the tasks and projects that are assigned to them. Code { % sql % } DECLARE @ Person int = {{ Person . Id | AsInteger }} ; DECLARE @ LookAheadDays int = 7 ; DECLARE @ Today datetime = CAST ( CAST ( GETDATE () AS date ) AS datetime ); SELECT p .[ Id ] , p .[ Name ] , p .[ DueDate ] , CASE WHEN p .[ DueDate ] < @ Today THEN 'Past Due' ELSE NULL END 'PastDue' FROM [ _com_blueboxmoon_ProjectManagement_Project ] p JOIN [ _com_blueboxmoon_ProjectManagement_ProjectAssignee ] pas ON p .[ Id ] = pas .[ ProjectId ] JOIN [ PersonAlias ] pa ON pas .[ PersonAliasId ] = pa .[ Id ] WHERE [ IsActive ] = 1 AND p .[ State ] = 'Active' AND pa .[ PersonId ] = @ Person AND p .[ DueDate ] <= DATEADD ( day , @ LookAheadDays , @ Today ) UNION SELECT t .[ ProjectId ] , CONCAT ( '[' , p .[ Name ], '] ' , t .[ Name ] ) 'Name' , t .[ DueDate ] , CASE WHEN t .[ DueDate ] < @ Today THEN 'Past Due' ELSE NULL END 'PastDue' FROM [ _com_blueboxmoon_ProjectManagement_Task ] t JOIN [ PersonAlias ] pa ON t .[ AssignedToPersonAliasId ] = pa .[ Id ] JOIN [ _com_blueboxmoon_ProjectManagement_Project ] p ON t .[ ProjectId ] = p .[ Id ] WHERE t .[ IsActive ] = 1 AND t .[ State ] = 'Active' AND pa .[ PersonId ] = @ Person AND t .[ DueDate ] <= DATEADD ( day , @ LookAheadDays , @ Today ) { % endsql % } { % assign items = results | OrderBy : 'DueDate' % } { % for item in items % } < p style : 'font-size: 15px;' > < a href = \"{{ 'Global' | Attribute:'InternalApplicationRoot' }}/Project/{{ item.Id }}\" > {{ item . Name }} < br > </ a > {{ item . DueDate | Date : 'dddd, MMM d, yyyy' }} { % if item . PastDue % } < span style = 'color: red;' >- ( {{ item . PastDue }} ) </ span > { % endif % } </ p > { % endfor % }","title":"Projects and Tasks Due This Week"},{"location":"Plugins/ProjectManagement/projects-and-tasks-due-this-week/#projects-and-tasks-due-this-week","text":"Returns a list of tasks and projects, assigned to the specified user, that are due in the next X days, or are overdue. We use this in a weekly email to keep people from forgetting the tasks and projects that are assigned to them.","title":"Projects and Tasks Due This Week"},{"location":"Plugins/ProjectManagement/projects-and-tasks-due-this-week/#code","text":"{ % sql % } DECLARE @ Person int = {{ Person . Id | AsInteger }} ; DECLARE @ LookAheadDays int = 7 ; DECLARE @ Today datetime = CAST ( CAST ( GETDATE () AS date ) AS datetime ); SELECT p .[ Id ] , p .[ Name ] , p .[ DueDate ] , CASE WHEN p .[ DueDate ] < @ Today THEN 'Past Due' ELSE NULL END 'PastDue' FROM [ _com_blueboxmoon_ProjectManagement_Project ] p JOIN [ _com_blueboxmoon_ProjectManagement_ProjectAssignee ] pas ON p .[ Id ] = pas .[ ProjectId ] JOIN [ PersonAlias ] pa ON pas .[ PersonAliasId ] = pa .[ Id ] WHERE [ IsActive ] = 1 AND p .[ State ] = 'Active' AND pa .[ PersonId ] = @ Person AND p .[ DueDate ] <= DATEADD ( day , @ LookAheadDays , @ Today ) UNION SELECT t .[ ProjectId ] , CONCAT ( '[' , p .[ Name ], '] ' , t .[ Name ] ) 'Name' , t .[ DueDate ] , CASE WHEN t .[ DueDate ] < @ Today THEN 'Past Due' ELSE NULL END 'PastDue' FROM [ _com_blueboxmoon_ProjectManagement_Task ] t JOIN [ PersonAlias ] pa ON t .[ AssignedToPersonAliasId ] = pa .[ Id ] JOIN [ _com_blueboxmoon_ProjectManagement_Project ] p ON t .[ ProjectId ] = p .[ Id ] WHERE t .[ IsActive ] = 1 AND t .[ State ] = 'Active' AND pa .[ PersonId ] = @ Person AND t .[ DueDate ] <= DATEADD ( day , @ LookAheadDays , @ Today ) { % endsql % } { % assign items = results | OrderBy : 'DueDate' % } { % for item in items % } < p style : 'font-size: 15px;' > < a href = \"{{ 'Global' | Attribute:'InternalApplicationRoot' }}/Project/{{ item.Id }}\" > {{ item . Name }} < br > </ a > {{ item . DueDate | Date : 'dddd, MMM d, yyyy' }} { % if item . PastDue % } < span style = 'color: red;' >- ( {{ item . PastDue }} ) </ span > { % endif % } </ p > { % endfor % }","title":"Code"},{"location":"Reporting/staff-offboarding-report/","text":"Staff Off-Boarding Report This is a fairly complicated report that attempts to show everything that you would need to change when someone transitions off of your staff team. It also, when possible, provides links to the edit pages of the various things that need to be changed. It looks in the following places: Security Group Membership Room Reservation Approval Groups Connector Group Memberships Group Leadership (All Group Types) Default Connector Active Connections Active Event Contact Active Registration Contact Org Chart Group Membership Miscellaneous Security Authorizations SMS From Values Room Reservations (Admin contact or Event contact) Service Job Notifications Communication Templates (From/CC/BCC) System Communications (From/CC/BCC) Assigned Workflows Assigned Projects Assigned Project Tasks Watching Projects Other staff that the person is \"supervising\" (Person Attribute used for workflow/request assignments) There are several \"magic numbers\" in these queries. You will want to check all of the Entity IDs, Attribute IDs, and Page numbers against your own system and update as needed. Page Parameter Filter Block Field Type Key Description Person Person The person being off-boarded Dynamic Data Block Parameters Person=00000000-0000-0000-0000-000000000000 Query -- Get their Person Id DECLARE @ PersonId int = ( SELECT [ PersonId ] FROM [ PersonAlias ] WHERE [ Guid ] = CAST ( @ Person AS uniqueidentifier ) ); -- Get all of their PersonAlias IDs and GUIDs SELECT pa .[ Id ], pa .[ Guid ] INTO # PersonAliasIds FROM [ PersonAlias ] pa WHERE pa .[ PersonId ] = @ PersonId ; -- Get their email DECLARE @ PersonEmail varchar ( max ) = ( SELECT NULLIF ( [ Email ], '' ) FROM [ Person ] WHERE [ Id ] = @ PersonId ); -- 1. Security Group Membership SELECT g .[ Id ] , g .[ Name ] 'Group' , g .[ IsActive ] , g .[ IsArchived ] , gs .[ SyncDataViewId ] FROM [ Group ] g INNER JOIN [ GroupMember ] gm ON g .[ Id ] = gm .[ GroupId ] AND gm .[ IsArchived ] != 1 LEFT JOIN [ GroupSync ] gs ON g .[ Id ] = gs .[ GroupId ] WHERE gm .[ PersonId ] = @ PersonId AND g .[ IsSecurityRole ] = 1 ORDER BY g .[ Name ] ; -- 2. Room Reservation Approval Groups SELECT g .[ Id ] , g .[ Name ] 'Group' , g .[ IsActive ] , g .[ IsArchived ] , gs .[ SyncDataViewId ] FROM [ Group ] g INNER JOIN [ GroupMember ] gm ON g .[ Id ] = gm .[ GroupId ] AND gm .[ IsArchived ] != 1 LEFT JOIN [ GroupSync ] gs ON g .[ Id ] = gs .[ GroupId ] WHERE gm .[ PersonId ] = @ PersonId AND g .[ GroupTypeId ] = 82 ORDER BY g .[ Name ] ; -- 3. Connector Group Memberships SELECT g .[ Id ] , g .[ Name ] 'Group' , g .[ IsActive ] , g .[ IsArchived ] , gs .[ SyncDataViewId ] FROM [ Group ] g INNER JOIN [ GroupMember ] gm ON g .[ Id ] = gm .[ GroupId ] AND gm .[ IsArchived ] != 1 LEFT JOIN [ GroupSync ] gs ON g .[ Id ] = gs .[ GroupId ] WHERE gm .[ PersonId ] = @ PersonId AND g .[ ParentGroupId ] = 60 ORDER BY g .[ Name ] ; -- 4. Group Leadership (All Group Types) SELECT g .[ Id ] , g .[ Name ] 'Group' , g .[ IsActive ] , g .[ IsArchived ] FROM [ Group ] g INNER JOIN [ GroupMember ] gm ON g .[ Id ] = gm .[ GroupId ] AND gm .[ IsArchived ] != 1 INNER JOIN [ GroupTypeRole ] gtr ON gm .[ GroupRoleId ] = gtr .[ Id ] WHERE gm .[ PersonId ] = @ PersonId AND gtr .[ IsLeader ] = 1 ORDER BY g .[ Name ] ; -- 5. Default Connector SELECT co .[ Id ] , co .[ ConnectionTypeId ] , co .[ Name ] , c .[ Name ] 'CampusName' , co .[ IsActive ] FROM [ ConnectionOpportunity ] co INNER JOIN [ ConnectionOpportunityCampus ] coc ON co .[ Id ] = coc .[ ConnectionOpportunityId ] INNER JOIN [ Campus ] c ON coc .[ CampusId ] = c .[ Id ] INNER JOIN # PersonAliasIds pa ON coc .[ DefaultConnectorPersonAliasId ] = pa .[ Id ] ORDER BY co . Name , c . Name ; -- 6. Active Connections SELECT cr .[ Id ] , co .[ Name ] 'ConnectionOpportunity' , p .[ NickName ] + ' ' + p .[ LastName ] 'PersonName' FROM [ ConnectionRequest ] cr INNER JOIN [ ConnectionOpportunity ] co ON cr .[ ConnectionOpportunityId ] = co .[ Id ] INNER JOIN [ PersonAlias ] pa ON cr .[ PersonAliasId ] = pa .[ Id ] INNER JOIN [ Person ] p ON pa .[ PersonId ] = p .[ Id ] INNER JOIN # PersonAliasIds pa2 ON cr .[ ConnectorPersonAliasId ] = pa2 .[ Id ] WHERE cr .[ ConnectionState ] = 0 ORDER BY co .[ Name ] , cr .[ Id ] ; -- 7. Active Event Contact SELECT eio .[ Id ] , ei .[ Name ] FROM [ EventItem ] ei INNER JOIN [ EventItemOccurrence ] eio ON ei .[ Id ] = eio .[ EventItemId ] INNER JOIN [ Schedule ] s ON eio .[ ScheduleId ] = s .[ Id ] INNER JOIN # PersonAliasIds pa ON eio .[ ContactPersonAliasId ] = pa .[ Id ] WHERE ei .[ IsActive ] = 1 AND s .[ EffectiveEndDate ] > GETDATE () ; -- 8. Active Registration Contact SELECT ri .[ Id ] , ri .[ Name ] FROM [ RegistrationInstance ] ri INNER JOIN [ Registrationtemplate ] rt on ri .[ RegistrationTemplateId ] = rt .[ Id ] INNER JOIN # PersonAliasIds pa ON ri .[ ContactPersonAliasId ] = pa .[ Id ] WHERE ri .[ IsActive ] = 1 AND ri .[ EndDateTime ] > GETDATE () ; -- 9. Org Chart Group Membership SELECT g .[ Id ] , g .[ Name ] 'Group' , g .[ IsActive ] , g .[ IsArchived ] , gs .[ SyncDataViewId ] FROM [ Group ] g INNER JOIN [ GroupMember ] gm ON g .[ Id ] = gm .[ GroupId ] AND gm .[ IsArchived ] != 1 LEFT JOIN [ GroupSync ] gs ON g .[ Id ] = gs .[ GroupId ] WHERE gm .[ PersonId ] = @ PersonId AND g .[ GroupTypeId ] = 28 ORDER BY g .[ Name ] ; -- 10. Miscellaneous Security Settings SELECT DISTINCT p .[ InternalName ] 'PageName' , g .[ Name ] 'GroupName' , a .[ EntityTypeId ] 'EntityType' , et .[ FriendlyName ] 'EntityName' , a .[ EntityId ] 'EntityId' , rt .[ Name ] 'RegName' , dv .[ Name ] 'Dataview' , r .[ Name ] 'Report' , b .[ Name ] 'Block' , b .[ PageId ] , s .[ Name ] 'Schedule' FROM [ Auth ] a INNER JOIN [ PersonAlias ] pa ON a . PersonAliasId = pa . Id AND pa . Guid = @ person INNER JOIN [ EntityType ] et ON a . EntityTypeId = et . Id LEFT JOIN [ Page ] p ON a .[ EntityId ] = p .[ Id ] AND et .[ Id ] = 2 LEFT JOIN [ Block ] b ON a .[ EntityId ] = b .[ Id ] AND et .[ Id ] = 9 LEFT JOIN [ Group ] g ON a .[ EntityId ] = g .[ Id ] AND et .[ Id ] = 16 LEFT JOIN [ DataView ] dv ON a .[ EntityId ] = dv .[ Id ] AND et .[ Id ] = 34 LEFT JOIN [ Schedule ] s ON a .[ EntityId ] = s .[ Id ] AND et .[ Id ] = 54 LEFT JOIN [ Report ] r ON a .[ EntityId ] = r .[ Id ] AND et .[ Id ] = 107 LEFT JOIN [ RegistrationTemplate ] rt ON a .[ EntityId ] = rt .[ Id ] AND et .[ Id ] = 234 ORDER BY et .[ FriendlyName ] ; -- 11. SMS From Values SELECT dv .[ Value ] , dv .[ Description ] FROM [ DefinedValue ] dv INNER JOIN [ AttributeValue ] av ON dv .[ Id ] = av .[ EntityId ] AND av .[ AttributeId ] = 949 INNER JOIN [ PersonAlias ] pa ON av .[ Value ] = pa .[ Guid ] INNER JOIN # PersonAliasIds pa2 ON pa .[ Id ] = pa2 .[ Id ] WHERE [ DefinedTypeId ] = 32 ; -- 12. Room Reservations (Admin contact or Event contact) SELECT r .[ Id ] , r .[ Name ] FROM [ _com_bemaservices_RoomManagement_Reservation ] r WHERE r .[ LastOccurrenceEndDateTime ] > GETDATE () AND ( r .[ EventContactPersonAliasId ] IN ( SELECT [ Id ] FROM # PersonAliasIds ) OR r .[ AdministrativeContactPersonAliasId ] IN ( SELECT [ Id ] FROM # PersonAliasIds ) ) ; -- 13. Service Job Notifications SELECT j .[ IsActive ] , j .[ Id ] , j .[ Name ] , j .[ Class ] FROM [ ServiceJob ] j WHERE @ PersonEmail IS NOT NULL AND j .[ NotificationEmails ] LIKE '%' + @ PersonEmail + '%' ; -- 14. Communication Templates (From/CC/BCC) SELECT ct .[ Id ] , ct .[ Name ] , ct .[ IsActive ] FROM [ CommunicationTemplate ] ct WHERE @ PersonEmail IS NOT NULL AND ( ct .[ FromEmail ] LIKE '%' + @ PersonEmail + '%' OR ct .[ CCEmails ] LIKE '%' + @ PersonEmail + '%' OR ct .[ BCCEmails ] LIKE '%' + @ PersonEmail + '%' ) ; -- 15. System Communications (From/CC/BCC) SELECT sc .[ Id ] , sc .[ Title ] , sc .[ IsActive ] FROM [ SystemCommunication ] sc WHERE @ PersonEmail IS NOT NULL AND ( sc .[ From ] LIKE '%' + @ PersonEmail + '%' OR sc .[ To ] LIKE '%' + @ PersonEmail + '%' OR sc .[ CC ] LIKE '%' + @ PersonEmail + '%' OR sc .[ BCC ] LIKE '%' + @ PersonEmail + '%' ) ; -- 16. Assigned Workflows SELECT w .[ Id ] , w .[ Name ] , wt .[ Name ] 'WorkflowType' , wat .[ Name ] 'ActivityType' FROM [ Workflow ] w INNER JOIN [ WorkflowType ] wt ON w .[ WorkflowTypeId ] = wt .[ Id ] INNER JOIN [ WorkflowActivity ] wa ON wa .[ WorkflowId ] = w .[ Id ] INNER JOIN [ WorkflowActivityType ] wat ON wa .[ ActivityTypeId ] = wat .[ Id ] INNER JOIN # PersonAliasIds pa ON pa .[ Id ] = wa .[ AssignedPersonAliasId ] WHERE w .[ CompletedDateTime ] IS NULL AND wa .[ CompletedDateTime ] IS NULL ; -- 17. Assigned Projects SELECT j .[ Id ] , j .[ Name ] FROM [ _com_blueboxmoon_ProjectManagement_ProjectAssignee ] ja INNER JOIN [ _com_blueboxmoon_ProjectManagement_Project ] j ON ja .[ ProjectId ] = j .[ Id ] INNER JOIN # PersonAliasIds pa ON ja .[ PersonAliasId ] = pa .[ Id ] WHERE j .[ IsActive ] = 1 ; -- 18. Assigned Project Tasks SELECT t .[ Name ] , j .[ Id ] 'ProjectId' , j .[ Name ] 'ProjectName' FROM [ _com_blueboxmoon_ProjectManagement_Task ] t INNER JOIN [ _com_blueboxmoon_ProjectManagement_Project ] j ON t .[ ProjectId ] = j .[ Id ] INNER JOIN # PersonAliasIds pa ON t .[ AssignedToPersonAliasId ] = pa .[ Id ] WHERE t .[ IsActive ] = 1 AND j .[ IsActive ] = 1 ; -- 19. Watching Projects SELECT j .[ Id ] , j .[ Name ] FROM [ _com_blueboxmoon_ProjectManagement_Watching ] jw JOIN [ _com_blueboxmoon_ProjectManagement_Project ] j ON jw .[ ProjectId ] = j .[ Id ] INNER JOIN # PersonAliasIds pa ON jw .[ PersonAliasId ] = pa .[ Id ] WHERE j .[ IsActive ] = 1 AND jw .[ IsWatching ] = 1 ; -- 20. Supervised Staff SELECT p .[ Id ] , CONCAT_WS ( ' ' , p .[ NickName ], p .[ LastName ] ) 'Name' FROM [ AttributeValue ] av INNER JOIN # PersonAliasIds pa ON av .[ Value ] <> '' AND av .[ Value ] = pa .[ Guid ] INNER JOIN [ Person ] p ON av .[ EntityId ] = p .[ Id ] WHERE av .[ AttributeId ] = 9768 -- HR > Supervisor ; Display Lava {% assign Set = 'Global' | PageParameter : 'Person' %} {% if Set != '' %} {% assign Person2 = 'Global' | PageParameter : 'Person' | PersonByAliasGuid %} <h2> {{ Person2 . FullName }} </h2> {% if Person2 . Email contains '@ valorouschurch . com ' %} <h3> <a href=\"/Person/{{ Person2.Id}}\" class=\"btn btn-default\"><i class=\"fa fa-pencil\"></i></a> Email: {{Person2.Email }} <br><small>NOTE: Update their email last. Some of these searches are based on email.</small> </h3> {% endif %} <br> <div class=\"row\"> {% comment %} SQL Table 1 - Security Group Membership {% endcomment %} {% assign results = table1.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Security Group Membership ' ]} {% for row in table1.rows %} {% if row.SyncDataViewId <> '' and row.SyncDataViewId %} {% capture editurl %}/page/145?DataViewId={{ row.SyncDataViewId }}{% endcapture %} {% else %} {% capture editurl %}/page/113?GroupId={{ row.Id }}{% endcapture %} {% endif %} <b {% if row.IsActive != true or row.IsArchived != false %}style=\"color:Lightgrey;\"{% endif %}><a href=\"{{ editurl }}\" class=\"btn-xs btn-default\">{% if row.SyncDataViewId <> '' and row.SyncDataViewId %}<i class=\"fa fa-sync-alt\"></i>{%else%}<i class=\"fa fa-pencil\"></i>{% endif %}</a> {{ row.Group }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 2 - Room Reservation Approval Groups {% endcomment %} {% assign results = table2.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Room Reservation Approval Groups ']} {% for row in table2.rows %} {% if row.SyncDataViewId <> '' and row.SyncDataViewId %} {% capture editurl %}/page/145?DataViewId={{ row.SyncDataViewId }}{% endcapture %} {% else %} {% capture editurl %}/page/113?GroupId={{ row.Id }}{% endcapture %} {% endif %} <b {% if row.IsActive != true or row.IsArchived != false %}style=\"color:Lightgrey;\"{% endif %}><a href=\"/page/113?GroupId={{ row.Id }}\" class=\"btn-xs btn-default\">{% if row.SyncDataViewId <> '' and row.SyncDataViewId %}<i class=\"fa fa-sync-alt\"></i>{% else %}<i class=\"fa fa-pencil\"></i>{% endif %}</a> {{ row.Group }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 3 - Connector Group Memberships {% endcomment %} {% assign results = table3.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Connector Group Memberships ']} {% for row in table3.rows %} {% if row.SyncDataViewId <> '' and row.SyncDataViewId %} {% capture editurl %}/page/145?DataViewId={{ row.SyncDataViewId }}{% endcapture %} {% else %} {% capture editurl %}/page/113?GroupId={{ row.Id }}{% endcapture %} {% endif %} <b {% if row.IsActive != true or row.IsArchived != false %}style=\"color:Lightgrey;\"{% endif %}><a href=\"/page/113?GroupId={{ row.Id }}\" class=\"btn-xs btn-default\">{% if row.SyncDataViewId <> '' and row.SyncDataViewId %}<i class=\"fa fa-sync-alt\"></i>{% else %}<i class=\"fa fa-pencil\"></i>{% endif %}</a> {{ row.Group }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 4 - Group Leadership {% endcomment %} {% assign results = table4.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Group Leadership ' ]} {% for row in table4.rows %} <b {% if row.IsActive != true or row.IsArchived != false %}style=\"color:Lightgrey;\"{% endif %}><a href=\"/page/113?GroupId={{ row.Id }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Group }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 5 - Default Connector {% endcomment %} {% assign results = table5.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Default Connector ' ]} {% for row in table5.rows %} <b {% if row.IsActive != true or row.IsArchived != false %}style=\"color:Lightgrey;\"{% endif %}><a href=\"/page/411?ConnectionOpportunityId={{ row.Id }}&ConnectionTypeId={{ row.ConnectionTypeId }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Name }} | {{ row.CampusName }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 6 - Active Connections {% endcomment %} {% assign results = table6.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Active Connections ' ]} {% for row in table6.rows %} <b><a href=\"/page/408?ConnectionRequestId={{ row.Id }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.ConnectionOpportunity }} | {{ row.PersonName }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 7 - Active Event Contact {% endcomment %} {% assign results = table7.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Active Event Contact ' ]} {% for row in table7.rows %} <b><a href=\"/page/402?EventItemOccurrenceId={{ row.Id }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Name }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 8 - Active Registration Contact {% endcomment %} {% assign results = table8.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Active Registration Contact ' ]} {% for row in table8.rows %} <b><a href=\"/RegistrationInstance/{{ row.Id }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Name }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 9 - Org Chart Group Membership {% endcomment %} {% assign results = table9.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Org Chart Group Membership ' ]} {% for row in table9.rows %} {% if row.SyncDataViewId <> '' and row.SyncDataViewId %} {% capture editurl %}/page/145?DataViewId={{ row.SyncDataViewId }}{% endcapture %} {% else %} {% capture editurl %}/page/113?GroupId={{ row.Id }}{% endcapture %} {% endif %} <b {% if row.IsActive != true or row.IsArchived != false %}style=\"color:Lightgrey;\"{% endif %}><a href=\"{{ editurl }}\" class=\"btn-xs btn-default\">{% if row.SyncDataViewId <> '' and row.SyncDataViewId %}<i class=\"fa fa-sync-alt\"></i>{% else %}<i class=\"fa fa-pencil\"></i>{% endif %}</a> {{ row.Group }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 10 - Miscellaneous Security Authorizations {% endcomment %} {% assign results = table10.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Miscellaneous Authorizations ' ]} {% for row in table10.rows %} {% case row.EntityType %} {% when ' 2 ' %} <b><a href=\"/page/103?Page={{ row.EntityId }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.PageName }} ({{row.EntityName}})</b><br> {% when ' 9 ' %} <b><a href=\"/page/103?Page={{ row.PageId }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Block }} ({{row.EntityName}})</b><br> {% when ' 16 ' %} <b><a href=\"/page/113?GroupId={{ row.EntityId }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.GroupName }} ({{row.EntityName}})</b><br> {% when ' 34 ' %} <b><a href=\"/page/145?DataViewId={{ row.EntityId }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Dataview }} ({{row.EntityName}})</b><br> {% when ' 54 ' %} <b><a href=\"/Schedules?ScheduleId={{ row.EntityId }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Schedule }} ({{row.EntityName}})</b><br> {% when ' 107 ' %} <b><a href=\"/page/149?ReportId={{ row.EntityId }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Report }} ({{row.EntityName}})</b><br> {% when ' 234 ' %} <b><a href=\"/RegistrationInstance/{{ row.EntityId }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.RegName }} ({{row.EntityName}})</b><br> {% else %} <b>{{ row.EntityName }} ({{ row.EntityType }}) | Id:{{ row.EntityId }}</b><br> {% endcase %} {% endfor %} <hr><pre>DELETE FROM [Auth] WHERE [PersonAliasId] IN ( {{ Person2.Aliases | Select:' Id ' | Join:' , ' }} )</pre> {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 11 - SMS From Values {% endcomment %} {% assign results = table11.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' SMS From Values ' ]} {% for row in table11.rows %} <b><a href=\"/page/327\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Value }} | {{ row.Description }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 12 - Room Reservations {% endcomment %} {% assign results = table12.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Room Reservations ']} {% for row in table12.rows %} <b><a href=\"/ReservationDetail?ReservationId={{ row.Id }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Name }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 13 - Service Job Notifications {% endcomment %} {% assign results = table13.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Service Job Notifications ' ]} {% for row in table13.rows %} <b {%if row.IsActive !=1 %}style=\"color:Lightgrey;\"{% endif %}><a href=\"/page/115?serviceJobId={{ row.Id }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ rowName }} ({{ row.Class }})</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 14 - Communication Templates {% endcomment %} {% assign results = table14.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Communication Templates ' ]} {% for row in table14.rows %} <b {%if row.IsActive !=1 %}style=\"color:Lightgrey;\"{% endif %}><a href=\"/admin/communications/templates/{{ row.Id }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Name }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 15 - System Communications {% endcomment %} {% assign results = table15.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' System Communications ' ]} {% for row in table15.rows %} <b {%if row.IsActive !=1 %}style=\"color:Lightgrey;\"{% endif %}><a href=\"/communications/system/{{ row.Id }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Title }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 16 - Assigned Workflows {% endcomment %} {% assign results = table16.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Assigned Workflows ' ]} {% for row in table16.rows %} <b><a href=\"/workflow/{{ row.Id }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Name }} ({{ row.WorkflowType }} - {{ row.ActivityType }})</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 17 - Assigned Projects {% endcomment %} {% assign results = table17.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Assigned Projects ' ]} {% for row in table17.rows %} <b><a href=\"/project/{{ row.Id }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Name }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 18 - Assigned Project Tasks {% endcomment %} {% assign results = table18.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Assigned Project Tasks ' ]} {% for row in table18.rows %} <b><a href=\"/project/{{ row.ProjectId }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Name }} ({{ row.ProjectName }})</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 19 - Watching Projects {% endcomment %} {% assign results = table19.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Watching Projects ' ]} {% for row in table19.rows %} <b><a href=\"/project/{{ row.Id }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Name }}</b><br> {% endfor %} <hr><pre>DELETE FROM [_com_blueboxmoon_ProjectManagement_Watching] WHERE [PersonAliasId] IN ( {{ Person2.Aliases | Select:' Id ' | Join:' , ' }} )</pre> {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 20 - Supervised Staff {% endcomment %} {% assign results = table20.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Supervised Staff ' ]} {% for row in table 20 .rows %} <b><a href=\"/person/ {{ row . Id }} /HR\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row . Name }} </b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} </div> {% else %} <h2>Select a Person Above</h2> {% endif %}","title":"Staff Off-Boarding Report"},{"location":"Reporting/staff-offboarding-report/#staff-off-boarding-report","text":"This is a fairly complicated report that attempts to show everything that you would need to change when someone transitions off of your staff team. It also, when possible, provides links to the edit pages of the various things that need to be changed. It looks in the following places: Security Group Membership Room Reservation Approval Groups Connector Group Memberships Group Leadership (All Group Types) Default Connector Active Connections Active Event Contact Active Registration Contact Org Chart Group Membership Miscellaneous Security Authorizations SMS From Values Room Reservations (Admin contact or Event contact) Service Job Notifications Communication Templates (From/CC/BCC) System Communications (From/CC/BCC) Assigned Workflows Assigned Projects Assigned Project Tasks Watching Projects Other staff that the person is \"supervising\" (Person Attribute used for workflow/request assignments) There are several \"magic numbers\" in these queries. You will want to check all of the Entity IDs, Attribute IDs, and Page numbers against your own system and update as needed.","title":"Staff Off-Boarding Report"},{"location":"Reporting/staff-offboarding-report/#page-parameter-filter-block","text":"Field Type Key Description Person Person The person being off-boarded","title":"Page Parameter Filter Block"},{"location":"Reporting/staff-offboarding-report/#dynamic-data-block","text":"","title":"Dynamic Data Block"},{"location":"Reporting/staff-offboarding-report/#parameters","text":"Person=00000000-0000-0000-0000-000000000000","title":"Parameters"},{"location":"Reporting/staff-offboarding-report/#query","text":"-- Get their Person Id DECLARE @ PersonId int = ( SELECT [ PersonId ] FROM [ PersonAlias ] WHERE [ Guid ] = CAST ( @ Person AS uniqueidentifier ) ); -- Get all of their PersonAlias IDs and GUIDs SELECT pa .[ Id ], pa .[ Guid ] INTO # PersonAliasIds FROM [ PersonAlias ] pa WHERE pa .[ PersonId ] = @ PersonId ; -- Get their email DECLARE @ PersonEmail varchar ( max ) = ( SELECT NULLIF ( [ Email ], '' ) FROM [ Person ] WHERE [ Id ] = @ PersonId ); -- 1. Security Group Membership SELECT g .[ Id ] , g .[ Name ] 'Group' , g .[ IsActive ] , g .[ IsArchived ] , gs .[ SyncDataViewId ] FROM [ Group ] g INNER JOIN [ GroupMember ] gm ON g .[ Id ] = gm .[ GroupId ] AND gm .[ IsArchived ] != 1 LEFT JOIN [ GroupSync ] gs ON g .[ Id ] = gs .[ GroupId ] WHERE gm .[ PersonId ] = @ PersonId AND g .[ IsSecurityRole ] = 1 ORDER BY g .[ Name ] ; -- 2. Room Reservation Approval Groups SELECT g .[ Id ] , g .[ Name ] 'Group' , g .[ IsActive ] , g .[ IsArchived ] , gs .[ SyncDataViewId ] FROM [ Group ] g INNER JOIN [ GroupMember ] gm ON g .[ Id ] = gm .[ GroupId ] AND gm .[ IsArchived ] != 1 LEFT JOIN [ GroupSync ] gs ON g .[ Id ] = gs .[ GroupId ] WHERE gm .[ PersonId ] = @ PersonId AND g .[ GroupTypeId ] = 82 ORDER BY g .[ Name ] ; -- 3. Connector Group Memberships SELECT g .[ Id ] , g .[ Name ] 'Group' , g .[ IsActive ] , g .[ IsArchived ] , gs .[ SyncDataViewId ] FROM [ Group ] g INNER JOIN [ GroupMember ] gm ON g .[ Id ] = gm .[ GroupId ] AND gm .[ IsArchived ] != 1 LEFT JOIN [ GroupSync ] gs ON g .[ Id ] = gs .[ GroupId ] WHERE gm .[ PersonId ] = @ PersonId AND g .[ ParentGroupId ] = 60 ORDER BY g .[ Name ] ; -- 4. Group Leadership (All Group Types) SELECT g .[ Id ] , g .[ Name ] 'Group' , g .[ IsActive ] , g .[ IsArchived ] FROM [ Group ] g INNER JOIN [ GroupMember ] gm ON g .[ Id ] = gm .[ GroupId ] AND gm .[ IsArchived ] != 1 INNER JOIN [ GroupTypeRole ] gtr ON gm .[ GroupRoleId ] = gtr .[ Id ] WHERE gm .[ PersonId ] = @ PersonId AND gtr .[ IsLeader ] = 1 ORDER BY g .[ Name ] ; -- 5. Default Connector SELECT co .[ Id ] , co .[ ConnectionTypeId ] , co .[ Name ] , c .[ Name ] 'CampusName' , co .[ IsActive ] FROM [ ConnectionOpportunity ] co INNER JOIN [ ConnectionOpportunityCampus ] coc ON co .[ Id ] = coc .[ ConnectionOpportunityId ] INNER JOIN [ Campus ] c ON coc .[ CampusId ] = c .[ Id ] INNER JOIN # PersonAliasIds pa ON coc .[ DefaultConnectorPersonAliasId ] = pa .[ Id ] ORDER BY co . Name , c . Name ; -- 6. Active Connections SELECT cr .[ Id ] , co .[ Name ] 'ConnectionOpportunity' , p .[ NickName ] + ' ' + p .[ LastName ] 'PersonName' FROM [ ConnectionRequest ] cr INNER JOIN [ ConnectionOpportunity ] co ON cr .[ ConnectionOpportunityId ] = co .[ Id ] INNER JOIN [ PersonAlias ] pa ON cr .[ PersonAliasId ] = pa .[ Id ] INNER JOIN [ Person ] p ON pa .[ PersonId ] = p .[ Id ] INNER JOIN # PersonAliasIds pa2 ON cr .[ ConnectorPersonAliasId ] = pa2 .[ Id ] WHERE cr .[ ConnectionState ] = 0 ORDER BY co .[ Name ] , cr .[ Id ] ; -- 7. Active Event Contact SELECT eio .[ Id ] , ei .[ Name ] FROM [ EventItem ] ei INNER JOIN [ EventItemOccurrence ] eio ON ei .[ Id ] = eio .[ EventItemId ] INNER JOIN [ Schedule ] s ON eio .[ ScheduleId ] = s .[ Id ] INNER JOIN # PersonAliasIds pa ON eio .[ ContactPersonAliasId ] = pa .[ Id ] WHERE ei .[ IsActive ] = 1 AND s .[ EffectiveEndDate ] > GETDATE () ; -- 8. Active Registration Contact SELECT ri .[ Id ] , ri .[ Name ] FROM [ RegistrationInstance ] ri INNER JOIN [ Registrationtemplate ] rt on ri .[ RegistrationTemplateId ] = rt .[ Id ] INNER JOIN # PersonAliasIds pa ON ri .[ ContactPersonAliasId ] = pa .[ Id ] WHERE ri .[ IsActive ] = 1 AND ri .[ EndDateTime ] > GETDATE () ; -- 9. Org Chart Group Membership SELECT g .[ Id ] , g .[ Name ] 'Group' , g .[ IsActive ] , g .[ IsArchived ] , gs .[ SyncDataViewId ] FROM [ Group ] g INNER JOIN [ GroupMember ] gm ON g .[ Id ] = gm .[ GroupId ] AND gm .[ IsArchived ] != 1 LEFT JOIN [ GroupSync ] gs ON g .[ Id ] = gs .[ GroupId ] WHERE gm .[ PersonId ] = @ PersonId AND g .[ GroupTypeId ] = 28 ORDER BY g .[ Name ] ; -- 10. Miscellaneous Security Settings SELECT DISTINCT p .[ InternalName ] 'PageName' , g .[ Name ] 'GroupName' , a .[ EntityTypeId ] 'EntityType' , et .[ FriendlyName ] 'EntityName' , a .[ EntityId ] 'EntityId' , rt .[ Name ] 'RegName' , dv .[ Name ] 'Dataview' , r .[ Name ] 'Report' , b .[ Name ] 'Block' , b .[ PageId ] , s .[ Name ] 'Schedule' FROM [ Auth ] a INNER JOIN [ PersonAlias ] pa ON a . PersonAliasId = pa . Id AND pa . Guid = @ person INNER JOIN [ EntityType ] et ON a . EntityTypeId = et . Id LEFT JOIN [ Page ] p ON a .[ EntityId ] = p .[ Id ] AND et .[ Id ] = 2 LEFT JOIN [ Block ] b ON a .[ EntityId ] = b .[ Id ] AND et .[ Id ] = 9 LEFT JOIN [ Group ] g ON a .[ EntityId ] = g .[ Id ] AND et .[ Id ] = 16 LEFT JOIN [ DataView ] dv ON a .[ EntityId ] = dv .[ Id ] AND et .[ Id ] = 34 LEFT JOIN [ Schedule ] s ON a .[ EntityId ] = s .[ Id ] AND et .[ Id ] = 54 LEFT JOIN [ Report ] r ON a .[ EntityId ] = r .[ Id ] AND et .[ Id ] = 107 LEFT JOIN [ RegistrationTemplate ] rt ON a .[ EntityId ] = rt .[ Id ] AND et .[ Id ] = 234 ORDER BY et .[ FriendlyName ] ; -- 11. SMS From Values SELECT dv .[ Value ] , dv .[ Description ] FROM [ DefinedValue ] dv INNER JOIN [ AttributeValue ] av ON dv .[ Id ] = av .[ EntityId ] AND av .[ AttributeId ] = 949 INNER JOIN [ PersonAlias ] pa ON av .[ Value ] = pa .[ Guid ] INNER JOIN # PersonAliasIds pa2 ON pa .[ Id ] = pa2 .[ Id ] WHERE [ DefinedTypeId ] = 32 ; -- 12. Room Reservations (Admin contact or Event contact) SELECT r .[ Id ] , r .[ Name ] FROM [ _com_bemaservices_RoomManagement_Reservation ] r WHERE r .[ LastOccurrenceEndDateTime ] > GETDATE () AND ( r .[ EventContactPersonAliasId ] IN ( SELECT [ Id ] FROM # PersonAliasIds ) OR r .[ AdministrativeContactPersonAliasId ] IN ( SELECT [ Id ] FROM # PersonAliasIds ) ) ; -- 13. Service Job Notifications SELECT j .[ IsActive ] , j .[ Id ] , j .[ Name ] , j .[ Class ] FROM [ ServiceJob ] j WHERE @ PersonEmail IS NOT NULL AND j .[ NotificationEmails ] LIKE '%' + @ PersonEmail + '%' ; -- 14. Communication Templates (From/CC/BCC) SELECT ct .[ Id ] , ct .[ Name ] , ct .[ IsActive ] FROM [ CommunicationTemplate ] ct WHERE @ PersonEmail IS NOT NULL AND ( ct .[ FromEmail ] LIKE '%' + @ PersonEmail + '%' OR ct .[ CCEmails ] LIKE '%' + @ PersonEmail + '%' OR ct .[ BCCEmails ] LIKE '%' + @ PersonEmail + '%' ) ; -- 15. System Communications (From/CC/BCC) SELECT sc .[ Id ] , sc .[ Title ] , sc .[ IsActive ] FROM [ SystemCommunication ] sc WHERE @ PersonEmail IS NOT NULL AND ( sc .[ From ] LIKE '%' + @ PersonEmail + '%' OR sc .[ To ] LIKE '%' + @ PersonEmail + '%' OR sc .[ CC ] LIKE '%' + @ PersonEmail + '%' OR sc .[ BCC ] LIKE '%' + @ PersonEmail + '%' ) ; -- 16. Assigned Workflows SELECT w .[ Id ] , w .[ Name ] , wt .[ Name ] 'WorkflowType' , wat .[ Name ] 'ActivityType' FROM [ Workflow ] w INNER JOIN [ WorkflowType ] wt ON w .[ WorkflowTypeId ] = wt .[ Id ] INNER JOIN [ WorkflowActivity ] wa ON wa .[ WorkflowId ] = w .[ Id ] INNER JOIN [ WorkflowActivityType ] wat ON wa .[ ActivityTypeId ] = wat .[ Id ] INNER JOIN # PersonAliasIds pa ON pa .[ Id ] = wa .[ AssignedPersonAliasId ] WHERE w .[ CompletedDateTime ] IS NULL AND wa .[ CompletedDateTime ] IS NULL ; -- 17. Assigned Projects SELECT j .[ Id ] , j .[ Name ] FROM [ _com_blueboxmoon_ProjectManagement_ProjectAssignee ] ja INNER JOIN [ _com_blueboxmoon_ProjectManagement_Project ] j ON ja .[ ProjectId ] = j .[ Id ] INNER JOIN # PersonAliasIds pa ON ja .[ PersonAliasId ] = pa .[ Id ] WHERE j .[ IsActive ] = 1 ; -- 18. Assigned Project Tasks SELECT t .[ Name ] , j .[ Id ] 'ProjectId' , j .[ Name ] 'ProjectName' FROM [ _com_blueboxmoon_ProjectManagement_Task ] t INNER JOIN [ _com_blueboxmoon_ProjectManagement_Project ] j ON t .[ ProjectId ] = j .[ Id ] INNER JOIN # PersonAliasIds pa ON t .[ AssignedToPersonAliasId ] = pa .[ Id ] WHERE t .[ IsActive ] = 1 AND j .[ IsActive ] = 1 ; -- 19. Watching Projects SELECT j .[ Id ] , j .[ Name ] FROM [ _com_blueboxmoon_ProjectManagement_Watching ] jw JOIN [ _com_blueboxmoon_ProjectManagement_Project ] j ON jw .[ ProjectId ] = j .[ Id ] INNER JOIN # PersonAliasIds pa ON jw .[ PersonAliasId ] = pa .[ Id ] WHERE j .[ IsActive ] = 1 AND jw .[ IsWatching ] = 1 ; -- 20. Supervised Staff SELECT p .[ Id ] , CONCAT_WS ( ' ' , p .[ NickName ], p .[ LastName ] ) 'Name' FROM [ AttributeValue ] av INNER JOIN # PersonAliasIds pa ON av .[ Value ] <> '' AND av .[ Value ] = pa .[ Guid ] INNER JOIN [ Person ] p ON av .[ EntityId ] = p .[ Id ] WHERE av .[ AttributeId ] = 9768 -- HR > Supervisor ;","title":"Query"},{"location":"Reporting/staff-offboarding-report/#display-lava","text":"{% assign Set = 'Global' | PageParameter : 'Person' %} {% if Set != '' %} {% assign Person2 = 'Global' | PageParameter : 'Person' | PersonByAliasGuid %} <h2> {{ Person2 . FullName }} </h2> {% if Person2 . Email contains '@ valorouschurch . com ' %} <h3> <a href=\"/Person/{{ Person2.Id}}\" class=\"btn btn-default\"><i class=\"fa fa-pencil\"></i></a> Email: {{Person2.Email }} <br><small>NOTE: Update their email last. Some of these searches are based on email.</small> </h3> {% endif %} <br> <div class=\"row\"> {% comment %} SQL Table 1 - Security Group Membership {% endcomment %} {% assign results = table1.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Security Group Membership ' ]} {% for row in table1.rows %} {% if row.SyncDataViewId <> '' and row.SyncDataViewId %} {% capture editurl %}/page/145?DataViewId={{ row.SyncDataViewId }}{% endcapture %} {% else %} {% capture editurl %}/page/113?GroupId={{ row.Id }}{% endcapture %} {% endif %} <b {% if row.IsActive != true or row.IsArchived != false %}style=\"color:Lightgrey;\"{% endif %}><a href=\"{{ editurl }}\" class=\"btn-xs btn-default\">{% if row.SyncDataViewId <> '' and row.SyncDataViewId %}<i class=\"fa fa-sync-alt\"></i>{%else%}<i class=\"fa fa-pencil\"></i>{% endif %}</a> {{ row.Group }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 2 - Room Reservation Approval Groups {% endcomment %} {% assign results = table2.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Room Reservation Approval Groups ']} {% for row in table2.rows %} {% if row.SyncDataViewId <> '' and row.SyncDataViewId %} {% capture editurl %}/page/145?DataViewId={{ row.SyncDataViewId }}{% endcapture %} {% else %} {% capture editurl %}/page/113?GroupId={{ row.Id }}{% endcapture %} {% endif %} <b {% if row.IsActive != true or row.IsArchived != false %}style=\"color:Lightgrey;\"{% endif %}><a href=\"/page/113?GroupId={{ row.Id }}\" class=\"btn-xs btn-default\">{% if row.SyncDataViewId <> '' and row.SyncDataViewId %}<i class=\"fa fa-sync-alt\"></i>{% else %}<i class=\"fa fa-pencil\"></i>{% endif %}</a> {{ row.Group }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 3 - Connector Group Memberships {% endcomment %} {% assign results = table3.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Connector Group Memberships ']} {% for row in table3.rows %} {% if row.SyncDataViewId <> '' and row.SyncDataViewId %} {% capture editurl %}/page/145?DataViewId={{ row.SyncDataViewId }}{% endcapture %} {% else %} {% capture editurl %}/page/113?GroupId={{ row.Id }}{% endcapture %} {% endif %} <b {% if row.IsActive != true or row.IsArchived != false %}style=\"color:Lightgrey;\"{% endif %}><a href=\"/page/113?GroupId={{ row.Id }}\" class=\"btn-xs btn-default\">{% if row.SyncDataViewId <> '' and row.SyncDataViewId %}<i class=\"fa fa-sync-alt\"></i>{% else %}<i class=\"fa fa-pencil\"></i>{% endif %}</a> {{ row.Group }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 4 - Group Leadership {% endcomment %} {% assign results = table4.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Group Leadership ' ]} {% for row in table4.rows %} <b {% if row.IsActive != true or row.IsArchived != false %}style=\"color:Lightgrey;\"{% endif %}><a href=\"/page/113?GroupId={{ row.Id }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Group }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 5 - Default Connector {% endcomment %} {% assign results = table5.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Default Connector ' ]} {% for row in table5.rows %} <b {% if row.IsActive != true or row.IsArchived != false %}style=\"color:Lightgrey;\"{% endif %}><a href=\"/page/411?ConnectionOpportunityId={{ row.Id }}&ConnectionTypeId={{ row.ConnectionTypeId }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Name }} | {{ row.CampusName }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 6 - Active Connections {% endcomment %} {% assign results = table6.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Active Connections ' ]} {% for row in table6.rows %} <b><a href=\"/page/408?ConnectionRequestId={{ row.Id }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.ConnectionOpportunity }} | {{ row.PersonName }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 7 - Active Event Contact {% endcomment %} {% assign results = table7.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Active Event Contact ' ]} {% for row in table7.rows %} <b><a href=\"/page/402?EventItemOccurrenceId={{ row.Id }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Name }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 8 - Active Registration Contact {% endcomment %} {% assign results = table8.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Active Registration Contact ' ]} {% for row in table8.rows %} <b><a href=\"/RegistrationInstance/{{ row.Id }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Name }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 9 - Org Chart Group Membership {% endcomment %} {% assign results = table9.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Org Chart Group Membership ' ]} {% for row in table9.rows %} {% if row.SyncDataViewId <> '' and row.SyncDataViewId %} {% capture editurl %}/page/145?DataViewId={{ row.SyncDataViewId }}{% endcapture %} {% else %} {% capture editurl %}/page/113?GroupId={{ row.Id }}{% endcapture %} {% endif %} <b {% if row.IsActive != true or row.IsArchived != false %}style=\"color:Lightgrey;\"{% endif %}><a href=\"{{ editurl }}\" class=\"btn-xs btn-default\">{% if row.SyncDataViewId <> '' and row.SyncDataViewId %}<i class=\"fa fa-sync-alt\"></i>{% else %}<i class=\"fa fa-pencil\"></i>{% endif %}</a> {{ row.Group }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 10 - Miscellaneous Security Authorizations {% endcomment %} {% assign results = table10.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Miscellaneous Authorizations ' ]} {% for row in table10.rows %} {% case row.EntityType %} {% when ' 2 ' %} <b><a href=\"/page/103?Page={{ row.EntityId }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.PageName }} ({{row.EntityName}})</b><br> {% when ' 9 ' %} <b><a href=\"/page/103?Page={{ row.PageId }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Block }} ({{row.EntityName}})</b><br> {% when ' 16 ' %} <b><a href=\"/page/113?GroupId={{ row.EntityId }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.GroupName }} ({{row.EntityName}})</b><br> {% when ' 34 ' %} <b><a href=\"/page/145?DataViewId={{ row.EntityId }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Dataview }} ({{row.EntityName}})</b><br> {% when ' 54 ' %} <b><a href=\"/Schedules?ScheduleId={{ row.EntityId }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Schedule }} ({{row.EntityName}})</b><br> {% when ' 107 ' %} <b><a href=\"/page/149?ReportId={{ row.EntityId }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Report }} ({{row.EntityName}})</b><br> {% when ' 234 ' %} <b><a href=\"/RegistrationInstance/{{ row.EntityId }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.RegName }} ({{row.EntityName}})</b><br> {% else %} <b>{{ row.EntityName }} ({{ row.EntityType }}) | Id:{{ row.EntityId }}</b><br> {% endcase %} {% endfor %} <hr><pre>DELETE FROM [Auth] WHERE [PersonAliasId] IN ( {{ Person2.Aliases | Select:' Id ' | Join:' , ' }} )</pre> {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 11 - SMS From Values {% endcomment %} {% assign results = table11.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' SMS From Values ' ]} {% for row in table11.rows %} <b><a href=\"/page/327\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Value }} | {{ row.Description }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 12 - Room Reservations {% endcomment %} {% assign results = table12.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Room Reservations ']} {% for row in table12.rows %} <b><a href=\"/ReservationDetail?ReservationId={{ row.Id }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Name }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 13 - Service Job Notifications {% endcomment %} {% assign results = table13.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Service Job Notifications ' ]} {% for row in table13.rows %} <b {%if row.IsActive !=1 %}style=\"color:Lightgrey;\"{% endif %}><a href=\"/page/115?serviceJobId={{ row.Id }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ rowName }} ({{ row.Class }})</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 14 - Communication Templates {% endcomment %} {% assign results = table14.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Communication Templates ' ]} {% for row in table14.rows %} <b {%if row.IsActive !=1 %}style=\"color:Lightgrey;\"{% endif %}><a href=\"/admin/communications/templates/{{ row.Id }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Name }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 15 - System Communications {% endcomment %} {% assign results = table15.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' System Communications ' ]} {% for row in table15.rows %} <b {%if row.IsActive !=1 %}style=\"color:Lightgrey;\"{% endif %}><a href=\"/communications/system/{{ row.Id }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Title }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 16 - Assigned Workflows {% endcomment %} {% assign results = table16.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Assigned Workflows ' ]} {% for row in table16.rows %} <b><a href=\"/workflow/{{ row.Id }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Name }} ({{ row.WorkflowType }} - {{ row.ActivityType }})</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 17 - Assigned Projects {% endcomment %} {% assign results = table17.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Assigned Projects ' ]} {% for row in table17.rows %} <b><a href=\"/project/{{ row.Id }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Name }}</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 18 - Assigned Project Tasks {% endcomment %} {% assign results = table18.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Assigned Project Tasks ' ]} {% for row in table18.rows %} <b><a href=\"/project/{{ row.ProjectId }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Name }} ({{ row.ProjectName }})</b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 19 - Watching Projects {% endcomment %} {% assign results = table19.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Watching Projects ' ]} {% for row in table19.rows %} <b><a href=\"/project/{{ row.Id }}\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row.Name }}</b><br> {% endfor %} <hr><pre>DELETE FROM [_com_blueboxmoon_ProjectManagement_Watching] WHERE [PersonAliasId] IN ( {{ Person2.Aliases | Select:' Id ' | Join:' , ' }} )</pre> {[ endpanel ]} </div> {% endif %} {% comment %} SQL Table 20 - Supervised Staff {% endcomment %} {% assign results = table20.rows | Size %} {% if results != 0 %} <div class=\"col-md-4\"> {[ panel title:' Supervised Staff ' ]} {% for row in table 20 .rows %} <b><a href=\"/person/ {{ row . Id }} /HR\" class=\"btn-xs btn-default\"><i class=\"fa fa-pencil\"></i></a> {{ row . Name }} </b><br> {% endfor %} {[ endpanel ]} </div> {% endif %} </div> {% else %} <h2>Select a Person Above</h2> {% endif %}","title":"Display Lava"},{"location":"Reporting/weekend-attendance-averages-by-month/","text":"Weekend Attendance Averages By Month For every month in the specified year, return the average attendance (based on metrics) for each campus. This can be easily modified to report on monthly averages for any campus partitioned metric. Query List All Campus Partitions, for Use in the Next Query DECLARE @ CampusEntityTypeId int = ( SELECT Id FROM [ EntityType ] WHERE Guid = '00096BED-9587-415E-8AD4-4E076AE8FBF0' --Campus ); SELECT m . Title 'Metric' , mp . Label 'Partition' , mp . Id 'Partition Id' FROM [ Metric ] m JOIN [ MetricPartition ] mp ON mp . MetricId = m . Id AND mp . EntityTypeId = @ CampusEntityTypeId ORDER BY m . Title Get the Data DECLARE @ Year int = 2018 ; WITH MetricValues as ( --Campuses SELECT SUM ( mv . YValue ) 'Sum' , mvp . EntityId ,[ dbo ].[ ufnUtility_GetSundayDate ]( mv . MetricValueDateTime ) 'SundayDate' FROM [ MetricValuePartition ] mvp JOIN [ MetricValue ] mv ON mvp . MetricValueId = mv . Id WHERE mvp . MetricPartitionId IN ( 27 , 29 , 23 , 25 ) --Campus Partitions AND DATEPART ( year , mv . MetricValueDateTime ) >= @ Year GROUP BY [ dbo ].[ ufnUtility_GetSundayDate ]( mv . MetricValueDateTime ) , mvp . EntityId UNION --ONLINE (Metric has no campus partition) SELECT SUM ( mv . YValue ) 'Sum' , 0 'EntityId' ,[ dbo ].[ ufnUtility_GetSundayDate ]( mv . MetricValueDateTime ) 'SundayDate' FROM [ MetricValue ] mv WHERE mv . MetricId = 40 --Online Headcounts AND DATEPART ( year , mv . MetricValueDateTime ) >= @ Year GROUP BY [ dbo ].[ ufnUtility_GetSundayDate ]( mv . MetricValueDateTime ) ) SELECT ROUND ( AVG ( v .[ Sum ] ), 0 ) 'Average' , CASE v . EntityId WHEN 0 THEN 'Online' ELSE ( SELECT Name FROM Campus c WHERE c . Id = v . EntityId ) END 'Campus' , FORMAT ( v . SundayDate , 'yyyy-MM' ) 'Month' FROM [ MetricValues ] v GROUP BY EntityId , FORMAT ( v . SundayDate , 'yyyy-MM' ) ORDER BY 'Campus' , 'Month' ASC","title":"Weekend Attendance Averages By Month"},{"location":"Reporting/weekend-attendance-averages-by-month/#weekend-attendance-averages-by-month","text":"For every month in the specified year, return the average attendance (based on metrics) for each campus. This can be easily modified to report on monthly averages for any campus partitioned metric.","title":"Weekend Attendance Averages By Month"},{"location":"Reporting/weekend-attendance-averages-by-month/#query","text":"","title":"Query"},{"location":"Reporting/weekend-attendance-averages-by-month/#list-all-campus-partitions-for-use-in-the-next-query","text":"DECLARE @ CampusEntityTypeId int = ( SELECT Id FROM [ EntityType ] WHERE Guid = '00096BED-9587-415E-8AD4-4E076AE8FBF0' --Campus ); SELECT m . Title 'Metric' , mp . Label 'Partition' , mp . Id 'Partition Id' FROM [ Metric ] m JOIN [ MetricPartition ] mp ON mp . MetricId = m . Id AND mp . EntityTypeId = @ CampusEntityTypeId ORDER BY m . Title","title":"List All Campus Partitions, for Use in the Next Query"},{"location":"Reporting/weekend-attendance-averages-by-month/#get-the-data","text":"DECLARE @ Year int = 2018 ; WITH MetricValues as ( --Campuses SELECT SUM ( mv . YValue ) 'Sum' , mvp . EntityId ,[ dbo ].[ ufnUtility_GetSundayDate ]( mv . MetricValueDateTime ) 'SundayDate' FROM [ MetricValuePartition ] mvp JOIN [ MetricValue ] mv ON mvp . MetricValueId = mv . Id WHERE mvp . MetricPartitionId IN ( 27 , 29 , 23 , 25 ) --Campus Partitions AND DATEPART ( year , mv . MetricValueDateTime ) >= @ Year GROUP BY [ dbo ].[ ufnUtility_GetSundayDate ]( mv . MetricValueDateTime ) , mvp . EntityId UNION --ONLINE (Metric has no campus partition) SELECT SUM ( mv . YValue ) 'Sum' , 0 'EntityId' ,[ dbo ].[ ufnUtility_GetSundayDate ]( mv . MetricValueDateTime ) 'SundayDate' FROM [ MetricValue ] mv WHERE mv . MetricId = 40 --Online Headcounts AND DATEPART ( year , mv . MetricValueDateTime ) >= @ Year GROUP BY [ dbo ].[ ufnUtility_GetSundayDate ]( mv . MetricValueDateTime ) ) SELECT ROUND ( AVG ( v .[ Sum ] ), 0 ) 'Average' , CASE v . EntityId WHEN 0 THEN 'Online' ELSE ( SELECT Name FROM Campus c WHERE c . Id = v . EntityId ) END 'Campus' , FORMAT ( v . SundayDate , 'yyyy-MM' ) 'Month' FROM [ MetricValues ] v GROUP BY EntityId , FORMAT ( v . SundayDate , 'yyyy-MM' ) ORDER BY 'Campus' , 'Month' ASC","title":"Get the Data"},{"location":"Security/check-scanner-security/","text":"Security Permissions For Check Scanner App We needed a way to give permissions for someone to use the check scanner but didn't want to give them access to the Rock site. The settings below are the absolute minimum permissions needed for the check scanner app to work fully. We created a role APP - Check Scanner with this narrow scope of permissions so that we can easily assign it to any user that needs access to the scanner app. This role provides all of the needed permissions and doesn't require the user to have any other roles ( RSR - Staff Workers , RSR - Finance Worker , etc.) REST Controllers Admin Tools > Security > Rest Controllers Controller Method Path Verbs BinaryFileTypes GET api/BinaryFileTypes VIEW Campuses GET api/Campuses VIEW DefinedTypes GET api/DefinedTypes VIEW DefinedValues GET api/DefinedValues VIEW ExceptionLogs POST api/ExceptionLogs/LogException VIEW, EDIT FinancialAccounts GET api/FinancialAccounts VIEW FinancialBatches DELETE api/FinancialBatches/{0} VIEW, EDIT FinancialBatches GET api/FinancialBatches VIEW FinancialBatches GET api/FinancialBatches/GetControlTotals VIEW FinancialBatches POST api/FinancialBatches VIEW, EDIT FinancialBatches PUT api/FinancialBatches/{0} VIEW, EDIT FinancialPaymentDetails GET api/FinancialPaymentDetails/{0} VIEW FinancialPaymentDetails POST api/FinancialPaymentDetails/{0} VIEW, EDIT FinancialTransactionDetails GET api/FinancialTransactionDetails VIEW FinancialTransactionDetails POST api/FinancialTransactionDetails VIEW, EDIT FinancialTransactionDetails PUT api/FinancialTransactionDetails/{0} VIEW, EDIT FinancialTransactionImages GET api/FinancialTransactionImages VIEW FinancialTransactionImages POST api/FinancialTransactionImages VIEW, EDIT FinancialTransactions DELETE api/FinancialTransactions/{0} VIEW, EDIT FinancialTransactions GET api/FinancialTransactions VIEW FinancialTransactions POST api/FinancialTransactions VIEW, EDIT FinancialTransactions POST api/FinancialTransactions/AlreadyScanned VIEW, EDIT FinancialTransactions POST api/FinancialTransactions/PostScanned VIEW, EDIT People GET api/People/GetByPersonAliasIs/{personAliasId} VIEW People GET api/People/GetByUsername/{username} VIEW Entities Admin Tools > Security > Entity Administration Entity Verbs Rock.Model.FinancialAccount VIEW Rock.Model.FinancialBatch VIEW, EDIT, DELETE Rock.Model.FinancialPaymentDetail EDIT Rock.Model.FinancialTransaction VIEW, EDIT Rock.Model.FinancialTransactionDetail VIEW Rock.Model.FinancialTransactionImage VIEW File Types Admin Tools > General > File Types File Type Verbs Transaction Image VIEW, EDIT","title":"Security Permissions For Check Scanner App"},{"location":"Security/check-scanner-security/#security-permissions-for-check-scanner-app","text":"We needed a way to give permissions for someone to use the check scanner but didn't want to give them access to the Rock site. The settings below are the absolute minimum permissions needed for the check scanner app to work fully. We created a role APP - Check Scanner with this narrow scope of permissions so that we can easily assign it to any user that needs access to the scanner app. This role provides all of the needed permissions and doesn't require the user to have any other roles ( RSR - Staff Workers , RSR - Finance Worker , etc.)","title":"Security Permissions For Check Scanner App"},{"location":"Security/check-scanner-security/#rest-controllers","text":"Admin Tools > Security > Rest Controllers Controller Method Path Verbs BinaryFileTypes GET api/BinaryFileTypes VIEW Campuses GET api/Campuses VIEW DefinedTypes GET api/DefinedTypes VIEW DefinedValues GET api/DefinedValues VIEW ExceptionLogs POST api/ExceptionLogs/LogException VIEW, EDIT FinancialAccounts GET api/FinancialAccounts VIEW FinancialBatches DELETE api/FinancialBatches/{0} VIEW, EDIT FinancialBatches GET api/FinancialBatches VIEW FinancialBatches GET api/FinancialBatches/GetControlTotals VIEW FinancialBatches POST api/FinancialBatches VIEW, EDIT FinancialBatches PUT api/FinancialBatches/{0} VIEW, EDIT FinancialPaymentDetails GET api/FinancialPaymentDetails/{0} VIEW FinancialPaymentDetails POST api/FinancialPaymentDetails/{0} VIEW, EDIT FinancialTransactionDetails GET api/FinancialTransactionDetails VIEW FinancialTransactionDetails POST api/FinancialTransactionDetails VIEW, EDIT FinancialTransactionDetails PUT api/FinancialTransactionDetails/{0} VIEW, EDIT FinancialTransactionImages GET api/FinancialTransactionImages VIEW FinancialTransactionImages POST api/FinancialTransactionImages VIEW, EDIT FinancialTransactions DELETE api/FinancialTransactions/{0} VIEW, EDIT FinancialTransactions GET api/FinancialTransactions VIEW FinancialTransactions POST api/FinancialTransactions VIEW, EDIT FinancialTransactions POST api/FinancialTransactions/AlreadyScanned VIEW, EDIT FinancialTransactions POST api/FinancialTransactions/PostScanned VIEW, EDIT People GET api/People/GetByPersonAliasIs/{personAliasId} VIEW People GET api/People/GetByUsername/{username} VIEW","title":"REST Controllers"},{"location":"Security/check-scanner-security/#entities","text":"Admin Tools > Security > Entity Administration Entity Verbs Rock.Model.FinancialAccount VIEW Rock.Model.FinancialBatch VIEW, EDIT, DELETE Rock.Model.FinancialPaymentDetail EDIT Rock.Model.FinancialTransaction VIEW, EDIT Rock.Model.FinancialTransactionDetail VIEW Rock.Model.FinancialTransactionImage VIEW","title":"Entities"},{"location":"Security/check-scanner-security/#file-types","text":"Admin Tools > General > File Types File Type Verbs Transaction Image VIEW, EDIT","title":"File Types"},{"location":"WorkFlow/person-multi-select-based-on-group-type-attribute/","text":"Person Multi-Select Based on Group Type Attribute This allows you to have a nicely formatted list of group members on a workflow form. Similar to what you would see on the group attendance page. Once the form is submitted, you will have a comma separated list of person alias guids which you can loop over and drop into a Person type attribute. Note: The person filling out the form must have view permissions on the group you are using. If that won't work for you, you can re-write the capture statement as an entity command with securityenabled:'false' rather than referencing Group.Members . Needed Attributes: Group [Group] This must have a value set before you display the form. You can either specify a default value, or set it with some logic in the workflow. SelectedPeople [Text] After the form is submitted, this will contain a comma-separated list of person alias guids Workflow Form Display the SelectedPeople attribute on a form with the following pre and post html. Pre-HTML <div class=\"gm-select\"> Post-HTML </div> {% capture select %} <div class=\"controls rockcheckboxlist rockcheckboxlist-horizontal in-columns in-columns-1\"> {% assign group = Workflow | Attribute : 'Group' , 'Object' %} {% assign members = group.Members | OrderBy : 'Person.NickName,Person.LastName' %} {% for member in members %} <div class=\"checkbox mx-4\"> <label for=\" {{ member . Id }} \"> <input id=\" {{ member . Id }} \" type=\"checkbox\" name=\" {{ member . Id }} \" value=\" {{ member . Person . PrimaryAlias . Guid }} \"> <span class=\"label-text\"> <img src=\" {{ member . Person . PhotoUrl }} &w=80\" style=\"width:80px;border-radius:100%;\" /> {{ member . Person . FullName }} </span> </label> </div> {% endfor %} </div> {% endcapture %} <script> Sys.Application.add_load( function () { // Replace the control var select = $.parseHTML( ' {{ select | StripNewlines }} ' ); $( '.gm-select input[type=text]' ).hide(); $( '.gm-select .control-wrapper' ).append( select ); // Event handler $('.gm-select input[type=checkbox]').change( function(){ var selectedIDs = $('.gm-select input:checked').map( function(){ return this.value } ).get().join( ',' ); $( '.gm-select input[type=text]' ).val( selectedIDs ); }) } ); </script>","title":"Person Multi-Select Based on Group Type Attribute"},{"location":"WorkFlow/person-multi-select-based-on-group-type-attribute/#person-multi-select-based-on-group-type-attribute","text":"This allows you to have a nicely formatted list of group members on a workflow form. Similar to what you would see on the group attendance page. Once the form is submitted, you will have a comma separated list of person alias guids which you can loop over and drop into a Person type attribute. Note: The person filling out the form must have view permissions on the group you are using. If that won't work for you, you can re-write the capture statement as an entity command with securityenabled:'false' rather than referencing Group.Members .","title":"Person Multi-Select Based on Group Type Attribute"},{"location":"WorkFlow/person-multi-select-based-on-group-type-attribute/#needed-attributes","text":"Group [Group] This must have a value set before you display the form. You can either specify a default value, or set it with some logic in the workflow. SelectedPeople [Text] After the form is submitted, this will contain a comma-separated list of person alias guids","title":"Needed Attributes:"},{"location":"WorkFlow/person-multi-select-based-on-group-type-attribute/#workflow-form","text":"Display the SelectedPeople attribute on a form with the following pre and post html.","title":"Workflow Form"},{"location":"WorkFlow/person-multi-select-based-on-group-type-attribute/#pre-html","text":"<div class=\"gm-select\">","title":"Pre-HTML"},{"location":"WorkFlow/person-multi-select-based-on-group-type-attribute/#post-html","text":"</div> {% capture select %} <div class=\"controls rockcheckboxlist rockcheckboxlist-horizontal in-columns in-columns-1\"> {% assign group = Workflow | Attribute : 'Group' , 'Object' %} {% assign members = group.Members | OrderBy : 'Person.NickName,Person.LastName' %} {% for member in members %} <div class=\"checkbox mx-4\"> <label for=\" {{ member . Id }} \"> <input id=\" {{ member . Id }} \" type=\"checkbox\" name=\" {{ member . Id }} \" value=\" {{ member . Person . PrimaryAlias . Guid }} \"> <span class=\"label-text\"> <img src=\" {{ member . Person . PhotoUrl }} &w=80\" style=\"width:80px;border-radius:100%;\" /> {{ member . Person . FullName }} </span> </label> </div> {% endfor %} </div> {% endcapture %} <script> Sys.Application.add_load( function () { // Replace the control var select = $.parseHTML( ' {{ select | StripNewlines }} ' ); $( '.gm-select input[type=text]' ).hide(); $( '.gm-select .control-wrapper' ).append( select ); // Event handler $('.gm-select input[type=checkbox]').change( function(){ var selectedIDs = $('.gm-select input:checked').map( function(){ return this.value } ).get().join( ',' ); $( '.gm-select input[type=text]' ).val( selectedIDs ); }) } ); </script>","title":"Post-HTML"},{"location":"WorkFlow/round-robin-reassign-workflows/","text":"Round Robin Reassign Workflows This script will reassign all active instance of a workflow to a list of people in a round-robin fashion. It assigns the activity, and also updates a person attribute in the workflow to match the assignment. Needed Information List of PersonId s for assignment The ActivityTypeId that you want to assign The AttributeId that you want to set Query DECLARE @ Workers TABLE ( [ Id ] int NOT NULL identity ( 1 , 1 ), [ PersonId ] int , [ PrimaryAliasId ] int , [ PrimaryAliasGuid ] uniqueidentifier ); DECLARE @ ToUpdate TABLE ( [ Id ] int NOT NULL identity ( 1 , 1 ), [ ActivityId ] int , [ AttributeId ] int ); -- Replace this with the ID of your activity type that you need to assign -- Use this to help find that Id: SELECT [Id], [Name] FROM [WorkflowActivityType] WHERE [WorkflowTypeId] = 141; DECLARE @ ActivityTypeId int = 364 ; -- Replace this with the ID of the attribute that holds the person DECLARE @ AttributeId int = 9501 ; -- Put your workers PersonIDs here. They have to be wrapped in () INSERT INTO @ Workers ([ PersonId ]) VALUES ( 515 ), ( 50532 ), ( 6992 ); /* Calculate the info we'll need later */ DECLARE @ NumWorkers int = ( SELECT COUNT ( 1 ) FROM @ Workers ); UPDATE w SET w .[ PrimaryAliasId ] = pa .[ Id ] , w .[ PrimaryAliasGuid ] = pa .[ Guid ] FROM @ Workers w JOIN [ PersonAlias ] pa ON w .[ PersonId ] = pa .[ PersonId ] AND w .[ PersonId ] = pa .[ AliasPersonId ] ; INSERT INTO @ ToUpdate ( [ ActivityId ], [ AttributeId ] ) SELECT act .[ Id ] , av .[ Id ] FROM [ WorkflowActivity ] act LEFT JOIN [ AttributeValue ] av ON act .[ WorkflowId ] = av .[ EntityId ] AND av .[ AttributeId ] = @ AttributeId WHERE act .[ ActivityTypeId ] = @ ActivityTypeId AND act .[ CompletedDateTime ] IS NULL ; BEGIN TRANSACTION /* Update the activity assignment */ UPDATE act SET act .[ AssignedPersonAliasId ] = w .[ PrimaryAliasId ] FROM @ ToUpdate upd JOIN @ Workers w ON @ NumWorkers - ( upd .[ Id ] % @ NumWorkers ) = w .[ Id ] JOIN [ WorkflowActivity ] act ON upd .[ ActivityId ] = act .[ Id ] ; /* Update the attribute */ UPDATE av SET av .[ Value ] = w .[ PrimaryAliasGuid ] FROM @ ToUpdate upd JOIN @ Workers w ON @ NumWorkers - ( upd .[ Id ] % @ NumWorkers ) = w .[ Id ] JOIN [ AttributeValue ] av ON upd .[ AttributeId ] = av .[ Id ] ; COMMIT TRANSACTION","title":"Round Robin Reassign Workflows"},{"location":"WorkFlow/round-robin-reassign-workflows/#round-robin-reassign-workflows","text":"This script will reassign all active instance of a workflow to a list of people in a round-robin fashion. It assigns the activity, and also updates a person attribute in the workflow to match the assignment.","title":"Round Robin Reassign Workflows"},{"location":"WorkFlow/round-robin-reassign-workflows/#needed-information","text":"List of PersonId s for assignment The ActivityTypeId that you want to assign The AttributeId that you want to set","title":"Needed Information"},{"location":"WorkFlow/round-robin-reassign-workflows/#query","text":"DECLARE @ Workers TABLE ( [ Id ] int NOT NULL identity ( 1 , 1 ), [ PersonId ] int , [ PrimaryAliasId ] int , [ PrimaryAliasGuid ] uniqueidentifier ); DECLARE @ ToUpdate TABLE ( [ Id ] int NOT NULL identity ( 1 , 1 ), [ ActivityId ] int , [ AttributeId ] int ); -- Replace this with the ID of your activity type that you need to assign -- Use this to help find that Id: SELECT [Id], [Name] FROM [WorkflowActivityType] WHERE [WorkflowTypeId] = 141; DECLARE @ ActivityTypeId int = 364 ; -- Replace this with the ID of the attribute that holds the person DECLARE @ AttributeId int = 9501 ; -- Put your workers PersonIDs here. They have to be wrapped in () INSERT INTO @ Workers ([ PersonId ]) VALUES ( 515 ), ( 50532 ), ( 6992 ); /* Calculate the info we'll need later */ DECLARE @ NumWorkers int = ( SELECT COUNT ( 1 ) FROM @ Workers ); UPDATE w SET w .[ PrimaryAliasId ] = pa .[ Id ] , w .[ PrimaryAliasGuid ] = pa .[ Guid ] FROM @ Workers w JOIN [ PersonAlias ] pa ON w .[ PersonId ] = pa .[ PersonId ] AND w .[ PersonId ] = pa .[ AliasPersonId ] ; INSERT INTO @ ToUpdate ( [ ActivityId ], [ AttributeId ] ) SELECT act .[ Id ] , av .[ Id ] FROM [ WorkflowActivity ] act LEFT JOIN [ AttributeValue ] av ON act .[ WorkflowId ] = av .[ EntityId ] AND av .[ AttributeId ] = @ AttributeId WHERE act .[ ActivityTypeId ] = @ ActivityTypeId AND act .[ CompletedDateTime ] IS NULL ; BEGIN TRANSACTION /* Update the activity assignment */ UPDATE act SET act .[ AssignedPersonAliasId ] = w .[ PrimaryAliasId ] FROM @ ToUpdate upd JOIN @ Workers w ON @ NumWorkers - ( upd .[ Id ] % @ NumWorkers ) = w .[ Id ] JOIN [ WorkflowActivity ] act ON upd .[ ActivityId ] = act .[ Id ] ; /* Update the attribute */ UPDATE av SET av .[ Value ] = w .[ PrimaryAliasGuid ] FROM @ ToUpdate upd JOIN @ Workers w ON @ NumWorkers - ( upd .[ Id ] % @ NumWorkers ) = w .[ Id ] JOIN [ AttributeValue ] av ON upd .[ AttributeId ] = av .[ Id ] ; COMMIT TRANSACTION","title":"Query"},{"location":"WorkFlow/workflow-table-with-all-attributes/","text":"Workflow Table with All Attributes This will show a table with all workflows of a particular type, with a column for every attribute in the workflow. Lava {% workflow where : 'WorkflowTypeId = = \"25\" ' %} {% assign firstWorkflow = workflowItems | First %} {% capture attributeNames -%} {%- for av in firstWorkflow.AttributeValues -%} {{ av.AttributeName | StripNewLines }}| {%- endfor -%} {%- endcapture %} {% assign attributeNames = attributeNames | ReplaceLast:' | ','' | Split:' | ' %} <div class=\"table-wrapper\"> <table id=\"example\" class=\"table table-striped table-bordered\"> <thead> <tr> <th>Workflow Name</th> {% for name in attributeNames %} <th>{{ name }}</th> {% endfor %} </tr> </thead> <tbody> {% for w in workflowItems %} <tr> <td>{{ w.Name }}</td> {% for a in w.AttributeValues %} <td>{{ a.ValueFormatted | Default:' (none)' }}</td> {% endfor %} </tr> {% endfor %} </tbody> </table> </div> {% endworkflow %}","title":"Workflow Table with All Attributes"},{"location":"WorkFlow/workflow-table-with-all-attributes/#workflow-table-with-all-attributes","text":"This will show a table with all workflows of a particular type, with a column for every attribute in the workflow.","title":"Workflow Table with All Attributes"},{"location":"WorkFlow/workflow-table-with-all-attributes/#lava","text":"{% workflow where : 'WorkflowTypeId = = \"25\" ' %} {% assign firstWorkflow = workflowItems | First %} {% capture attributeNames -%} {%- for av in firstWorkflow.AttributeValues -%} {{ av.AttributeName | StripNewLines }}| {%- endfor -%} {%- endcapture %} {% assign attributeNames = attributeNames | ReplaceLast:' | ','' | Split:' | ' %} <div class=\"table-wrapper\"> <table id=\"example\" class=\"table table-striped table-bordered\"> <thead> <tr> <th>Workflow Name</th> {% for name in attributeNames %} <th>{{ name }}</th> {% endfor %} </tr> </thead> <tbody> {% for w in workflowItems %} <tr> <td>{{ w.Name }}</td> {% for a in w.AttributeValues %} <td>{{ a.ValueFormatted | Default:' (none)' }}</td> {% endfor %} </tr> {% endfor %} </tbody> </table> </div> {% endworkflow %}","title":"Lava"},{"location":"z_Other/delete-person-records/","text":"Obsidian Mutation Observer If you are trying to make changes to the DOM of an Obsidian control, you will have to use a mutation observer. [!Warning] Because the observer fires on any change, you need to be careful about having a stop condition. Otherwise, your change will trigger the observer again; potentially causing an infinite loop. Example 1 - Registration Block I want to change the text \"How many ___ will you be registering?\" to \"How many ___ will you be purchasing?\" <script> function updateTitle() { var title = $('.registrationentry-intro h1'); var needsUpdate = title.text().includes('registering'); if (title && needsUpdate) { title.text(title.text().replace('registering','purchasing')); } } const observer = new MutationObserver(updateTitle); $(function() { updateTitle(); observer.observe(document, { childList: true, subtree: true }); }); </script> Example 2 - Add \"Gross, Fee, Net\" Table to Batch Detail Screen I want to add a summary table to the batch detail page that shows me the Gross, Fee, and Net for each account in the batch. {% capture CustomDetails %} [ {% for Transaction in Context.FinancialBatch.Transactions %} {% for Detail in Transaction.TransactionDetails %} { 'AccountName' : {{ Detail . Account . Name | ToJSON }} , 'Amount' : {{ Detail.Amount | AsDecimal }} , 'Fee' : {{ Detail.FeeAmount | Default : '0' | AsDecimal }} }, {% endfor %} {% endfor %} ] {% endcapture %} {% assign CustomDetails = CustomDetails | FromJSON | GroupBy : 'AccountName' %} <script> function addTable() { var updated = ($('.financial-batch-detail .grid-table').first().parent().html() ?? '').includes(\"Fee\"); if (! updated) { var tableContent = '' + '<table class=\"grid-table table table-auto\">' + '<tbody>' + '<tr>' + '<th align=\"left\">Account</th>' + '<th align=\"right\">Gross</th>' + '<th align=\"right\">Fee</th>' + '<th align=\"right\">Net</th>' + '</tr>' + {% - for Account in CustomDetails - %} {% - assign AccountParts = Account | PropertyToKeyValue - %} {% - assign Name = AccountParts.Key - %} {% - assign Gross = AccountParts.Value | Select : 'Amount' | Sum - %} {% - assign Fee = AccountParts.Value | Select : 'Fee' | Sum - %} '<tr>' + '<td align=\"left\"> {{ Name }} </td>' + '<td align=\"right\">$ {{ Gross | Format : '#,##0.00' }} </td>' + '<td align=\"right\">$( {{ Fee | Format : '#,##0.00' }} )</td>' + '<td align=\"right\">$ {{ Gross | Minus : Fee | Format : '#,##0.00' }} </td>' + '</tr>' + {% - endfor - %} '</tbody>' + '</table>'; $('.financial-batch-detail .grid-table').first().parent().html(tableContent); } } const observer = new MutationObserver(addTable); $(function() { addTable(); observer.observe(document.getElementById('bid_2847'), { childList: true, subtree: true }); }); </script>","title":"Obsidian Mutation Observer"},{"location":"z_Other/delete-person-records/#obsidian-mutation-observer","text":"If you are trying to make changes to the DOM of an Obsidian control, you will have to use a mutation observer. [!Warning] Because the observer fires on any change, you need to be careful about having a stop condition. Otherwise, your change will trigger the observer again; potentially causing an infinite loop.","title":"Obsidian Mutation Observer"},{"location":"z_Other/delete-person-records/#example-1-registration-block","text":"I want to change the text \"How many ___ will you be registering?\" to \"How many ___ will you be purchasing?\" <script> function updateTitle() { var title = $('.registrationentry-intro h1'); var needsUpdate = title.text().includes('registering'); if (title && needsUpdate) { title.text(title.text().replace('registering','purchasing')); } } const observer = new MutationObserver(updateTitle); $(function() { updateTitle(); observer.observe(document, { childList: true, subtree: true }); }); </script>","title":"Example 1 - Registration Block"},{"location":"z_Other/delete-person-records/#example-2-add-gross-fee-net-table-to-batch-detail-screen","text":"I want to add a summary table to the batch detail page that shows me the Gross, Fee, and Net for each account in the batch. {% capture CustomDetails %} [ {% for Transaction in Context.FinancialBatch.Transactions %} {% for Detail in Transaction.TransactionDetails %} { 'AccountName' : {{ Detail . Account . Name | ToJSON }} , 'Amount' : {{ Detail.Amount | AsDecimal }} , 'Fee' : {{ Detail.FeeAmount | Default : '0' | AsDecimal }} }, {% endfor %} {% endfor %} ] {% endcapture %} {% assign CustomDetails = CustomDetails | FromJSON | GroupBy : 'AccountName' %} <script> function addTable() { var updated = ($('.financial-batch-detail .grid-table').first().parent().html() ?? '').includes(\"Fee\"); if (! updated) { var tableContent = '' + '<table class=\"grid-table table table-auto\">' + '<tbody>' + '<tr>' + '<th align=\"left\">Account</th>' + '<th align=\"right\">Gross</th>' + '<th align=\"right\">Fee</th>' + '<th align=\"right\">Net</th>' + '</tr>' + {% - for Account in CustomDetails - %} {% - assign AccountParts = Account | PropertyToKeyValue - %} {% - assign Name = AccountParts.Key - %} {% - assign Gross = AccountParts.Value | Select : 'Amount' | Sum - %} {% - assign Fee = AccountParts.Value | Select : 'Fee' | Sum - %} '<tr>' + '<td align=\"left\"> {{ Name }} </td>' + '<td align=\"right\">$ {{ Gross | Format : '#,##0.00' }} </td>' + '<td align=\"right\">$( {{ Fee | Format : '#,##0.00' }} )</td>' + '<td align=\"right\">$ {{ Gross | Minus : Fee | Format : '#,##0.00' }} </td>' + '</tr>' + {% - endfor - %} '</tbody>' + '</table>'; $('.financial-batch-detail .grid-table').first().parent().html(tableContent); } } const observer = new MutationObserver(addTable); $(function() { addTable(); observer.observe(document.getElementById('bid_2847'), { childList: true, subtree: true }); }); </script>","title":"Example 2 - Add \"Gross, Fee, Net\" Table to Batch Detail Screen"},{"location":"z_Other/get-attribute-value-for-entity/","text":"Get Attribute Value for Entity Given an entity Id and an attribute Key, return the raw value of that attribute for that entity. Roughly equivalent to {{ Entity | Attribute:'Key','RawValue' }} Query DECLARE @ EntityTypeId int = ( SELECT [ Id ] FROM [ EntityType ] WHERE [ Guid ] = 'ef79f12c-dd73-4a82-a1e2-7be76e3c5282' -- Rock.Model.Person ); DECLARE @ EntityId int = 27 ; -- Person Id DECLARE @ AttributeKey varchar ( max ) = 'TestFile' ; -- Key of the attribute SELECT av .[ Value ] FROM [ Attribute ] a JOIN [ AttributeValue ] av ON av .[ AttributeId ] = a .[ Id ] WHERE a .[ EntityTypeId ] = @ EntityTypeId AND av .[ EntityId ] = @ EntityId AND a .[ Key ] = @ AttributeKey","title":"Get Attribute Value for Entity"},{"location":"z_Other/get-attribute-value-for-entity/#get-attribute-value-for-entity","text":"Given an entity Id and an attribute Key, return the raw value of that attribute for that entity. Roughly equivalent to {{ Entity | Attribute:'Key','RawValue' }}","title":"Get Attribute Value for Entity"},{"location":"z_Other/get-attribute-value-for-entity/#query","text":"DECLARE @ EntityTypeId int = ( SELECT [ Id ] FROM [ EntityType ] WHERE [ Guid ] = 'ef79f12c-dd73-4a82-a1e2-7be76e3c5282' -- Rock.Model.Person ); DECLARE @ EntityId int = 27 ; -- Person Id DECLARE @ AttributeKey varchar ( max ) = 'TestFile' ; -- Key of the attribute SELECT av .[ Value ] FROM [ Attribute ] a JOIN [ AttributeValue ] av ON av .[ AttributeId ] = a .[ Id ] WHERE a .[ EntityTypeId ] = @ EntityTypeId AND av .[ EntityId ] = @ EntityId AND a .[ Key ] = @ AttributeKey","title":"Query"},{"location":"z_Other/interpret-date-range-parameter/","text":"Interpret a Date Range Parameter Option 1 - Web Request to API {% assign filter = 'Global' | PageParameter : 'Date' | Default : '0' | UnescapeDataString %} {% if filter == '0' %} SELECT 'Please provide a valid filter...' {% else %} {% assign filter = filter | Split : '|' %} {% if filter [ 0 ] == 'DateRange' %} {% assign start = filter[ 1 ] | Replace : '+' , ' ' | Date : 'yyyy-MM-dd' %} {% assign end = filter[ 2 ] | Replace : '+' , ' ' | Date : 'yyyy-MM-dd' %} {% elseif filter[0] = = 'Current' %} {% webrequest url : '{{ ' Global ' | Attribute:' InternalApplicationRoot ' }}api/Utility/CalculateSlidingDateRange' parameters : 'slidingDateRangeType^{{ filter[0] }}|timeUnitType^{{ filter[1] }}' responsecontenttype : 'application/json' %} {% assign start = results | Remove : '\"' | Split : ' to ' | Index : 0 | Date : 'yyyy-MM-ddTHH : mm : ss ' %} {% assign end = results | Remove:' \"' | Split:' to ' | Index:1 | Date:'yyyy-MM-ddTHH:mm:ss' %} {% endwebrequest %} {% else %} {% webrequest url:'{{ 'Global' | Attribute:'InternalApplicationRoot' }}api/Utility/CalculateSlidingDateRange' parameters:'slidingDateRangeType^{{ filter[0] }}|timeUnitType^{{ filter[2] }}|number^{{ filter[1] }}' responsecontenttype:'application/json' %} {% assign start = results | Remove:'\" ' | Split:' to ' | Index:0 | Date:' yyyy-MM-ddTHH : mm : ss ' %} {% assign end = results | Remove:' \" ' | Split:' to ' | Index:1 | Date:' yyyy-MM-ddTHH : mm : ss ' %} {% endwebrequest %} {% endif %} SELECT ' {{ start }} ' AS ' Start ', ' {{ end }} ' AS ' End' {% endif %} Option 2 - Execute {% assign filter = 'Global' | PageParameter : 'Data' | Default : '0' | UnescapeDataString %} {% if filter == '0' %} SELECT 'Please provide a valid filter...' {% else %} {% capture result %}{% execute %} var range = Rock.Web.UI.Controls.SlidingDateRangePicker.CalculateDateRangeFromDelimitedValues( \" {{ filter }} \" ); return string.Format( \"{0:yyyy-MM-ddTHH:mm:ss},{1:yyyy-MM-ddTHH:mm:ss}\", range.Start, range.End ); {% endexecute %}{% endcapture %} {% assign start = result | Split : ',' | Index : 0 %} {% assign end = result | Split : ',' | Index : 1 %} SELECT ' {{ start }} ' AS 'Start', ' {{ end }} ' AS 'End' {% endif %}","title":"Interpret a Date Range Parameter"},{"location":"z_Other/interpret-date-range-parameter/#interpret-a-date-range-parameter","text":"","title":"Interpret a Date Range Parameter"},{"location":"z_Other/interpret-date-range-parameter/#option-1-web-request-to-api","text":"{% assign filter = 'Global' | PageParameter : 'Date' | Default : '0' | UnescapeDataString %} {% if filter == '0' %} SELECT 'Please provide a valid filter...' {% else %} {% assign filter = filter | Split : '|' %} {% if filter [ 0 ] == 'DateRange' %} {% assign start = filter[ 1 ] | Replace : '+' , ' ' | Date : 'yyyy-MM-dd' %} {% assign end = filter[ 2 ] | Replace : '+' , ' ' | Date : 'yyyy-MM-dd' %} {% elseif filter[0] = = 'Current' %} {% webrequest url : '{{ ' Global ' | Attribute:' InternalApplicationRoot ' }}api/Utility/CalculateSlidingDateRange' parameters : 'slidingDateRangeType^{{ filter[0] }}|timeUnitType^{{ filter[1] }}' responsecontenttype : 'application/json' %} {% assign start = results | Remove : '\"' | Split : ' to ' | Index : 0 | Date : 'yyyy-MM-ddTHH : mm : ss ' %} {% assign end = results | Remove:' \"' | Split:' to ' | Index:1 | Date:'yyyy-MM-ddTHH:mm:ss' %} {% endwebrequest %} {% else %} {% webrequest url:'{{ 'Global' | Attribute:'InternalApplicationRoot' }}api/Utility/CalculateSlidingDateRange' parameters:'slidingDateRangeType^{{ filter[0] }}|timeUnitType^{{ filter[2] }}|number^{{ filter[1] }}' responsecontenttype:'application/json' %} {% assign start = results | Remove:'\" ' | Split:' to ' | Index:0 | Date:' yyyy-MM-ddTHH : mm : ss ' %} {% assign end = results | Remove:' \" ' | Split:' to ' | Index:1 | Date:' yyyy-MM-ddTHH : mm : ss ' %} {% endwebrequest %} {% endif %} SELECT ' {{ start }} ' AS ' Start ', ' {{ end }} ' AS ' End' {% endif %}","title":"Option 1 - Web Request to API"},{"location":"z_Other/interpret-date-range-parameter/#option-2-execute","text":"{% assign filter = 'Global' | PageParameter : 'Data' | Default : '0' | UnescapeDataString %} {% if filter == '0' %} SELECT 'Please provide a valid filter...' {% else %} {% capture result %}{% execute %} var range = Rock.Web.UI.Controls.SlidingDateRangePicker.CalculateDateRangeFromDelimitedValues( \" {{ filter }} \" ); return string.Format( \"{0:yyyy-MM-ddTHH:mm:ss},{1:yyyy-MM-ddTHH:mm:ss}\", range.Start, range.End ); {% endexecute %}{% endcapture %} {% assign start = result | Split : ',' | Index : 0 %} {% assign end = result | Split : ',' | Index : 1 %} SELECT ' {{ start }} ' AS 'Start', ' {{ end }} ' AS 'End' {% endif %}","title":"Option 2 - Execute"},{"location":"z_Other/launch-workflow-asynchronously-from-button/","text":"Launch Workflow Asynchronously From Button When you press this button, it will launch a workflow without leaving the current page. Optionally you can pass in attributes to the workflow as well. Code With confirmation: < script > function launchWorkflow () { Rock . dialogs . confirm ( 'Launch workflow?' , function ( c ) { if ( c ) { $ . post ( '/api/Workflows/WorkflowEntry/[WorkflowId]?[AttributeKey]=[value]' ). done ( function () { Rock . dialogs . alert ( 'Workflow launched.' ); }); } }); } </ script > < button class = \"btn btn-primary\" onclick = \"launchWorkflow()\" > Click Me! </ button > Without confirmation: < script > function launchWorkflow () { $ . post ( '/api/Workflows/WorkflowEntry/[WorkflowId]?[AttributeKey]=[value]' ). done ( function () { Rock . dialogs . alert ( 'Workflow launched.' ); }); } </ script > < button class = \"btn btn-primary\" onclick = \"launchWorkflow()\" > Click Me! </ button >","title":"Launch Workflow Asynchronously From Button"},{"location":"z_Other/launch-workflow-asynchronously-from-button/#launch-workflow-asynchronously-from-button","text":"When you press this button, it will launch a workflow without leaving the current page. Optionally you can pass in attributes to the workflow as well.","title":"Launch Workflow Asynchronously From Button"},{"location":"z_Other/launch-workflow-asynchronously-from-button/#code","text":"With confirmation: < script > function launchWorkflow () { Rock . dialogs . confirm ( 'Launch workflow?' , function ( c ) { if ( c ) { $ . post ( '/api/Workflows/WorkflowEntry/[WorkflowId]?[AttributeKey]=[value]' ). done ( function () { Rock . dialogs . alert ( 'Workflow launched.' ); }); } }); } </ script > < button class = \"btn btn-primary\" onclick = \"launchWorkflow()\" > Click Me! </ button > Without confirmation: < script > function launchWorkflow () { $ . post ( '/api/Workflows/WorkflowEntry/[WorkflowId]?[AttributeKey]=[value]' ). done ( function () { Rock . dialogs . alert ( 'Workflow launched.' ); }); } </ script > < button class = \"btn btn-primary\" onclick = \"launchWorkflow()\" > Click Me! </ button >","title":"Code"},{"location":"z_Other/obsidian-mutation-observer/","text":"Obsidian Mutation Observer If you are trying to make changes to the DOM of an Obsidian control, you will have to use a mutation observer. [!Warning] Because the observer fires on any change, you need to be careful about having a stop condition. Otherwise, your change will trigger the observer again; potentially causing an infinite loop. Example 1 - Registration Block I want to change the text \"How many ___ will you be registering?\" to \"How many ___ will you be purchasing?\" <script> function updateTitle() { var title = $('.registrationentry-intro h1'); var needsUpdate = title.text().includes('registering'); if (title && needsUpdate) { title.text(title.text().replace('registering','purchasing')); } } const observer = new MutationObserver(updateTitle); $(function() { updateTitle(); observer.observe(document, { childList: true, subtree: true }); }); </script> Example 2 - Add \"Gross, Fee, Net\" Table to Batch Detail Screen I want to add a summary table to the batch detail page that shows me the Gross, Fee, and Net for each account in the batch. {% capture CustomDetails %} [ {% for Transaction in Context.FinancialBatch.Transactions %} {% for Detail in Transaction.TransactionDetails %} { 'AccountName' : {{ Detail . Account . Name | ToJSON }} , 'Amount' : {{ Detail.Amount | AsDecimal }} , 'Fee' : {{ Detail.FeeAmount | Default : '0' | AsDecimal }} }, {% endfor %} {% endfor %} ] {% endcapture %} {% assign CustomDetails = CustomDetails | FromJSON | GroupBy : 'AccountName' %} <script> function addTable() { var updated = ($('.financial-batch-detail .grid-table').first().parent().html() ?? '').includes(\"Fee\"); if (! updated) { var tableContent = '' + '<table class=\"grid-table table table-auto\">' + '<tbody>' + '<tr>' + '<th align=\"left\">Account</th>' + '<th align=\"right\">Gross</th>' + '<th align=\"right\">Fee</th>' + '<th align=\"right\">Net</th>' + '</tr>' + {% - for Account in CustomDetails - %} {% - assign AccountParts = Account | PropertyToKeyValue - %} {% - assign Name = AccountParts.Key - %} {% - assign Gross = AccountParts.Value | Select : 'Amount' | Sum - %} {% - assign Fee = AccountParts.Value | Select : 'Fee' | Sum - %} '<tr>' + '<td align=\"left\"> {{ Name }} </td>' + '<td align=\"right\">$ {{ Gross | Format : '#,##0.00' }} </td>' + '<td align=\"right\">$( {{ Fee | Format : '#,##0.00' }} )</td>' + '<td align=\"right\">$ {{ Gross | Minus : Fee | Format : '#,##0.00' }} </td>' + '</tr>' + {% - endfor - %} '</tbody>' + '</table>'; $('.financial-batch-detail .grid-table').first().parent().html(tableContent); } } const observer = new MutationObserver(addTable); $(function() { addTable(); observer.observe(document.getElementById('bid_2847'), { childList: true, subtree: true }); }); </script>","title":"Obsidian Mutation Observer"},{"location":"z_Other/obsidian-mutation-observer/#obsidian-mutation-observer","text":"If you are trying to make changes to the DOM of an Obsidian control, you will have to use a mutation observer. [!Warning] Because the observer fires on any change, you need to be careful about having a stop condition. Otherwise, your change will trigger the observer again; potentially causing an infinite loop.","title":"Obsidian Mutation Observer"},{"location":"z_Other/obsidian-mutation-observer/#example-1-registration-block","text":"I want to change the text \"How many ___ will you be registering?\" to \"How many ___ will you be purchasing?\" <script> function updateTitle() { var title = $('.registrationentry-intro h1'); var needsUpdate = title.text().includes('registering'); if (title && needsUpdate) { title.text(title.text().replace('registering','purchasing')); } } const observer = new MutationObserver(updateTitle); $(function() { updateTitle(); observer.observe(document, { childList: true, subtree: true }); }); </script>","title":"Example 1 - Registration Block"},{"location":"z_Other/obsidian-mutation-observer/#example-2-add-gross-fee-net-table-to-batch-detail-screen","text":"I want to add a summary table to the batch detail page that shows me the Gross, Fee, and Net for each account in the batch. {% capture CustomDetails %} [ {% for Transaction in Context.FinancialBatch.Transactions %} {% for Detail in Transaction.TransactionDetails %} { 'AccountName' : {{ Detail . Account . Name | ToJSON }} , 'Amount' : {{ Detail.Amount | AsDecimal }} , 'Fee' : {{ Detail.FeeAmount | Default : '0' | AsDecimal }} }, {% endfor %} {% endfor %} ] {% endcapture %} {% assign CustomDetails = CustomDetails | FromJSON | GroupBy : 'AccountName' %} <script> function addTable() { var updated = ($('.financial-batch-detail .grid-table').first().parent().html() ?? '').includes(\"Fee\"); if (! updated) { var tableContent = '' + '<table class=\"grid-table table table-auto\">' + '<tbody>' + '<tr>' + '<th align=\"left\">Account</th>' + '<th align=\"right\">Gross</th>' + '<th align=\"right\">Fee</th>' + '<th align=\"right\">Net</th>' + '</tr>' + {% - for Account in CustomDetails - %} {% - assign AccountParts = Account | PropertyToKeyValue - %} {% - assign Name = AccountParts.Key - %} {% - assign Gross = AccountParts.Value | Select : 'Amount' | Sum - %} {% - assign Fee = AccountParts.Value | Select : 'Fee' | Sum - %} '<tr>' + '<td align=\"left\"> {{ Name }} </td>' + '<td align=\"right\">$ {{ Gross | Format : '#,##0.00' }} </td>' + '<td align=\"right\">$( {{ Fee | Format : '#,##0.00' }} )</td>' + '<td align=\"right\">$ {{ Gross | Minus : Fee | Format : '#,##0.00' }} </td>' + '</tr>' + {% - endfor - %} '</tbody>' + '</table>'; $('.financial-batch-detail .grid-table').first().parent().html(tableContent); } } const observer = new MutationObserver(addTable); $(function() { addTable(); observer.observe(document.getElementById('bid_2847'), { childList: true, subtree: true }); }); </script>","title":"Example 2 - Add \"Gross, Fee, Net\" Table to Batch Detail Screen"},{"location":"z_Other/person-aliases-in-entity-commands/","text":"Person Aliases in Entity Commands Many things in Rock are linked to a person's alias, not directly to the person. This makes querying for that data through an entity command tricky because you have to check each of the person's aliases to find the data. Both of these examples assume that you have a Person entity assigned to person Option 1 - Chained ORs Generate a list of person aliases formatted in a way where they can be used in an entity command. Because of the way conditionals are interpreted in entity commands, you will need to make sure that any additional filtering comes before the aliases in the where parameter. {% assign personAliases = person.Aliases | Map : 'Id' | Join : '\" || PersonAliasId == \"' | Prepend : 'PersonAliasId = = \"' | Append:'\" ' %} {% step where:' StepTypeId = = \"6\" || StepTypeId = = \"8\" && {{ personAliases }}' %} //- Do some stuff {% endstep %} Option 2 - Expression Parameter This is a new option I recently found out about. It makes things like this much easier, but requires the fluid lava engine. {% step where : 'StepTypeId = = \"6\" || StepTypeId = = \"8\" ' expression:' PersonAlias.PersonId = = {{ person.Id }}' %} //- Do some stuff {% endstep %}","title":"Person Aliases in Entity Commands"},{"location":"z_Other/person-aliases-in-entity-commands/#person-aliases-in-entity-commands","text":"Many things in Rock are linked to a person's alias, not directly to the person. This makes querying for that data through an entity command tricky because you have to check each of the person's aliases to find the data. Both of these examples assume that you have a Person entity assigned to person","title":"Person Aliases in Entity Commands"},{"location":"z_Other/person-aliases-in-entity-commands/#option-1-chained-ors","text":"Generate a list of person aliases formatted in a way where they can be used in an entity command. Because of the way conditionals are interpreted in entity commands, you will need to make sure that any additional filtering comes before the aliases in the where parameter. {% assign personAliases = person.Aliases | Map : 'Id' | Join : '\" || PersonAliasId == \"' | Prepend : 'PersonAliasId = = \"' | Append:'\" ' %} {% step where:' StepTypeId = = \"6\" || StepTypeId = = \"8\" && {{ personAliases }}' %} //- Do some stuff {% endstep %}","title":"Option 1 - Chained ORs"},{"location":"z_Other/person-aliases-in-entity-commands/#option-2-expression-parameter","text":"This is a new option I recently found out about. It makes things like this much easier, but requires the fluid lava engine. {% step where : 'StepTypeId = = \"6\" || StepTypeId = = \"8\" ' expression:' PersonAlias.PersonId = = {{ person.Id }}' %} //- Do some stuff {% endstep %}","title":"Option 2 - Expression Parameter"},{"location":"z_Other/reset-grid-size-perference/","text":"Reset Grid-Size Preference Occasionally someone will decide to crank a particularly complicated grid up to 5,000 items and cause the page to timeout. When that happens, they can't load that page anymore since that grid size is saved to their personal preferences. This lava will allow you to reset the grid size of a specified block for a specified person. The easiest way to run this is using the Lava Tester plugin. You can select the person, then run the lava to do the reset. Lava Replace the ??? with BlockId of the problem grid. If you don't know the BlockId, you can open the block settings and grab it from the header. {{ Person.Id | DeleteUserPreference:'grid-page-size-preference_???' }}","title":"Reset Grid-Size Preference"},{"location":"z_Other/reset-grid-size-perference/#reset-grid-size-preference","text":"Occasionally someone will decide to crank a particularly complicated grid up to 5,000 items and cause the page to timeout. When that happens, they can't load that page anymore since that grid size is saved to their personal preferences. This lava will allow you to reset the grid size of a specified block for a specified person. The easiest way to run this is using the Lava Tester plugin. You can select the person, then run the lava to do the reset.","title":"Reset Grid-Size Preference"},{"location":"z_Other/reset-grid-size-perference/#lava","text":"Replace the ??? with BlockId of the problem grid. If you don't know the BlockId, you can open the block settings and grab it from the header. {{ Person.Id | DeleteUserPreference:'grid-page-size-preference_???' }}","title":"Lava"},{"location":"z_Other/run-javascript-on-page-load/","text":"Run Javascript on Page Load There are 2 options here. Which one to use depends on what you are trying to do. I tent to use option 1 as a default, and only switch to option 2 if I need to have my code run on every postback (ex: modifying a control on the page that changes on postback) If you need to interact with an Obsidian control, neither of these options will work. You will have to use a mutation observer instead. Option 1 - jQuery This will execute once the page has finished loading. It will not run on postbacks. $ ( function (){ // Do some stuff }); Option 2 - ASP.Net Load Hook This will execute once the page has finished loading. It will also run on postbacks. Sys . Application . add_load ( function () { // Do some stuff });","title":"Run Javascript on Page Load"},{"location":"z_Other/run-javascript-on-page-load/#run-javascript-on-page-load","text":"There are 2 options here. Which one to use depends on what you are trying to do. I tent to use option 1 as a default, and only switch to option 2 if I need to have my code run on every postback (ex: modifying a control on the page that changes on postback) If you need to interact with an Obsidian control, neither of these options will work. You will have to use a mutation observer instead.","title":"Run Javascript on Page Load"},{"location":"z_Other/run-javascript-on-page-load/#option-1-jquery","text":"This will execute once the page has finished loading. It will not run on postbacks. $ ( function (){ // Do some stuff });","title":"Option 1 - jQuery"},{"location":"z_Other/run-javascript-on-page-load/#option-2-aspnet-load-hook","text":"This will execute once the page has finished loading. It will also run on postbacks. Sys . Application . add_load ( function () { // Do some stuff });","title":"Option 2 - ASP.Net Load Hook"},{"location":"tags/","text":"Contents grouped by tag language/js z_Other :: Obsidian Mutation Observer z_Other :: Launch Workflow Asynchronously From Button z_Other :: Obsidian Mutation Observer z_Other :: Run Javascript on Page Load language/lava CheckIn :: Auto-Select Group Types for Given Checkin Config Finance :: Updated Finance Forecasting Report Groups :: List Known Relationships for Individual Plugins :: ProjectManagement :: Projects and Tasks Due This Week Reporting :: Staff Off-Boarding Report WorkFlow :: Person Multi-Select Based on Group Type Attribute WorkFlow :: Workflow Table with All Attributes z_Other :: Interpret a Date Range Parameter z_Other :: Person Aliases in Entity Commands z_Other :: Reset Grid-Size Preference language/sql CMS :: Fix Corrupted Block Attribute Value CMS :: List HTML Content Blocks By Page CMS :: Media Interactions by Content Channel Item CRM :: Get Person's Grade in SQL CRM :: Find Missing Mailing Addresses CRM :: Remove Parent's Email From Child's Record CRM :: Remove Parent's Phone From Child's Record CheckIn :: Auto-Select Group Types for Given Checkin Config CheckIn :: Checkin Code Historical Lookup CheckIn :: Checkin Config CheckIn :: Checkin Times Under Parent Group CheckIn :: Checkin Times Communication :: Communication Recipients and Page View Report Connection :: Bulk Update Connection Status Finance :: Anonymous Giver Account Cleanup Finance :: Count of Giving Units By Month Finance :: Giving Totals Per Unit & Account in Date Range Finance :: Lapsed Givers Finance :: Pledged Last Week Finance :: Recurring Giver Percentage Finance :: Updated Finance Forecasting Report Finance :: Yearly Giving Units Groups :: AttendanceOccurrence with Notes Groups :: First Attendance in Group Types Groups :: Last Time Attending Per Serve Team Groups :: Latest Attendance Dates Per-group Groups :: List Known Relationships for Individual Groups :: Person's First Attendance in Group Type Tree Groups :: Recursively List All Groups Under a Specified Parent Plugins :: ProjectManagement :: Projects and Tasks Due This Week Reporting :: Staff Off-Boarding Report Reporting :: Weekend Attendance Averages By Month WorkFlow :: Round Robin Reassign Workflows z_Other :: Get Attribute Value for Entity z_Other :: Interpret a Date Range Parameter topic/attendance CheckIn :: Checkin Times Under Parent Group Groups :: AttendanceOccurrence with Notes Groups :: First Attendance in Group Types Groups :: Last Time Attending Per Serve Team Groups :: Latest Attendance Dates Per-group Groups :: Person's First Attendance in Group Type Tree Reporting :: Weekend Attendance Averages By Month topic/entity-commands z_Other :: Person Aliases in Entity Commands topic/expression z_Other :: Person Aliases in Entity Commands topic/family CRM :: Remove Parent's Email From Child's Record CRM :: Remove Parent's Phone From Child's Record topic/finance Security :: Security Permissions For Check Scanner App topic/grid z_Other :: Reset Grid-Size Preference topic/interactions Communication :: Communication Recipients and Page View Report topic/known-relationship Groups :: List Known Relationships for Individual topic/media CMS :: Media Interactions by Content Channel Item topic/metrics Finance :: Recurring Giver Percentage Reporting :: Weekend Attendance Averages By Month topic/person-alias z_Other :: Person Aliases in Entity Commands topic/pledge Finance :: Pledged Last Week type/cleanup CMS :: Fix Corrupted Block Attribute Value CRM :: Find Missing Mailing Addresses CRM :: Remove Parent's Email From Child's Record CRM :: Remove Parent's Phone From Child's Record Connection :: Bulk Update Connection Status Finance :: Anonymous Giver Account Cleanup WorkFlow :: Round Robin Reassign Workflows type/reporting CMS :: List HTML Content Blocks By Page CMS :: Media Interactions by Content Channel Item CRM :: Get Person's Grade in SQL CheckIn :: Checkin Code Historical Lookup CheckIn :: Checkin Config CheckIn :: Checkin Times Under Parent Group CheckIn :: Checkin Times Communication :: Communication Recipients and Page View Report Finance :: Count of Giving Units By Month Finance :: Giving Totals Per Unit & Account in Date Range Finance :: Lapsed Givers Finance :: Pledged Last Week Finance :: Recurring Giver Percentage Finance :: Updated Finance Forecasting Report Finance :: Yearly Giving Units Groups :: AttendanceOccurrence with Notes Groups :: First Attendance in Group Types Groups :: Last Time Attending Per Serve Team Groups :: Latest Attendance Dates Per-group Groups :: List Known Relationships for Individual Groups :: Person's First Attendance in Group Type Tree Groups :: Recursively List All Groups Under a Specified Parent Plugins :: ProjectManagement :: Projects and Tasks Due This Week Reporting :: Staff Off-Boarding Report Reporting :: Weekend Attendance Averages By Month WorkFlow :: Workflow Table with All Attributes z_Other :: Person Aliases in Entity Commands type/utility CheckIn :: Auto-Select Group Types for Given Checkin Config Security :: Security Permissions For Check Scanner App WorkFlow :: Person Multi-Select Based on Group Type Attribute WorkFlow :: Round Robin Reassign Workflows z_Other :: Obsidian Mutation Observer z_Other :: Get Attribute Value for Entity z_Other :: Interpret a Date Range Parameter z_Other :: Launch Workflow Asynchronously From Button z_Other :: Obsidian Mutation Observer z_Other :: Reset Grid-Size Preference z_Other :: Run Javascript on Page Load","title":"Tags"},{"location":"tags/#contents-grouped-by-tag","text":"","title":"Contents grouped by tag"},{"location":"tags/#languagejs","text":"z_Other :: Obsidian Mutation Observer z_Other :: Launch Workflow Asynchronously From Button z_Other :: Obsidian Mutation Observer z_Other :: Run Javascript on Page Load","title":"language/js"},{"location":"tags/#languagelava","text":"CheckIn :: Auto-Select Group Types for Given Checkin Config Finance :: Updated Finance Forecasting Report Groups :: List Known Relationships for Individual Plugins :: ProjectManagement :: Projects and Tasks Due This Week Reporting :: Staff Off-Boarding Report WorkFlow :: Person Multi-Select Based on Group Type Attribute WorkFlow :: Workflow Table with All Attributes z_Other :: Interpret a Date Range Parameter z_Other :: Person Aliases in Entity Commands z_Other :: Reset Grid-Size Preference","title":"language/lava"},{"location":"tags/#languagesql","text":"CMS :: Fix Corrupted Block Attribute Value CMS :: List HTML Content Blocks By Page CMS :: Media Interactions by Content Channel Item CRM :: Get Person's Grade in SQL CRM :: Find Missing Mailing Addresses CRM :: Remove Parent's Email From Child's Record CRM :: Remove Parent's Phone From Child's Record CheckIn :: Auto-Select Group Types for Given Checkin Config CheckIn :: Checkin Code Historical Lookup CheckIn :: Checkin Config CheckIn :: Checkin Times Under Parent Group CheckIn :: Checkin Times Communication :: Communication Recipients and Page View Report Connection :: Bulk Update Connection Status Finance :: Anonymous Giver Account Cleanup Finance :: Count of Giving Units By Month Finance :: Giving Totals Per Unit & Account in Date Range Finance :: Lapsed Givers Finance :: Pledged Last Week Finance :: Recurring Giver Percentage Finance :: Updated Finance Forecasting Report Finance :: Yearly Giving Units Groups :: AttendanceOccurrence with Notes Groups :: First Attendance in Group Types Groups :: Last Time Attending Per Serve Team Groups :: Latest Attendance Dates Per-group Groups :: List Known Relationships for Individual Groups :: Person's First Attendance in Group Type Tree Groups :: Recursively List All Groups Under a Specified Parent Plugins :: ProjectManagement :: Projects and Tasks Due This Week Reporting :: Staff Off-Boarding Report Reporting :: Weekend Attendance Averages By Month WorkFlow :: Round Robin Reassign Workflows z_Other :: Get Attribute Value for Entity z_Other :: Interpret a Date Range Parameter","title":"language/sql"},{"location":"tags/#topicattendance","text":"CheckIn :: Checkin Times Under Parent Group Groups :: AttendanceOccurrence with Notes Groups :: First Attendance in Group Types Groups :: Last Time Attending Per Serve Team Groups :: Latest Attendance Dates Per-group Groups :: Person's First Attendance in Group Type Tree Reporting :: Weekend Attendance Averages By Month","title":"topic/attendance"},{"location":"tags/#topicentity-commands","text":"z_Other :: Person Aliases in Entity Commands","title":"topic/entity-commands"},{"location":"tags/#topicexpression","text":"z_Other :: Person Aliases in Entity Commands","title":"topic/expression"},{"location":"tags/#topicfamily","text":"CRM :: Remove Parent's Email From Child's Record CRM :: Remove Parent's Phone From Child's Record","title":"topic/family"},{"location":"tags/#topicfinance","text":"Security :: Security Permissions For Check Scanner App","title":"topic/finance"},{"location":"tags/#topicgrid","text":"z_Other :: Reset Grid-Size Preference","title":"topic/grid"},{"location":"tags/#topicinteractions","text":"Communication :: Communication Recipients and Page View Report","title":"topic/interactions"},{"location":"tags/#topicknown-relationship","text":"Groups :: List Known Relationships for Individual","title":"topic/known-relationship"},{"location":"tags/#topicmedia","text":"CMS :: Media Interactions by Content Channel Item","title":"topic/media"},{"location":"tags/#topicmetrics","text":"Finance :: Recurring Giver Percentage Reporting :: Weekend Attendance Averages By Month","title":"topic/metrics"},{"location":"tags/#topicperson-alias","text":"z_Other :: Person Aliases in Entity Commands","title":"topic/person-alias"},{"location":"tags/#topicpledge","text":"Finance :: Pledged Last Week","title":"topic/pledge"},{"location":"tags/#typecleanup","text":"CMS :: Fix Corrupted Block Attribute Value CRM :: Find Missing Mailing Addresses CRM :: Remove Parent's Email From Child's Record CRM :: Remove Parent's Phone From Child's Record Connection :: Bulk Update Connection Status Finance :: Anonymous Giver Account Cleanup WorkFlow :: Round Robin Reassign Workflows","title":"type/cleanup"},{"location":"tags/#typereporting","text":"CMS :: List HTML Content Blocks By Page CMS :: Media Interactions by Content Channel Item CRM :: Get Person's Grade in SQL CheckIn :: Checkin Code Historical Lookup CheckIn :: Checkin Config CheckIn :: Checkin Times Under Parent Group CheckIn :: Checkin Times Communication :: Communication Recipients and Page View Report Finance :: Count of Giving Units By Month Finance :: Giving Totals Per Unit & Account in Date Range Finance :: Lapsed Givers Finance :: Pledged Last Week Finance :: Recurring Giver Percentage Finance :: Updated Finance Forecasting Report Finance :: Yearly Giving Units Groups :: AttendanceOccurrence with Notes Groups :: First Attendance in Group Types Groups :: Last Time Attending Per Serve Team Groups :: Latest Attendance Dates Per-group Groups :: List Known Relationships for Individual Groups :: Person's First Attendance in Group Type Tree Groups :: Recursively List All Groups Under a Specified Parent Plugins :: ProjectManagement :: Projects and Tasks Due This Week Reporting :: Staff Off-Boarding Report Reporting :: Weekend Attendance Averages By Month WorkFlow :: Workflow Table with All Attributes z_Other :: Person Aliases in Entity Commands","title":"type/reporting"},{"location":"tags/#typeutility","text":"CheckIn :: Auto-Select Group Types for Given Checkin Config Security :: Security Permissions For Check Scanner App WorkFlow :: Person Multi-Select Based on Group Type Attribute WorkFlow :: Round Robin Reassign Workflows z_Other :: Obsidian Mutation Observer z_Other :: Get Attribute Value for Entity z_Other :: Interpret a Date Range Parameter z_Other :: Launch Workflow Asynchronously From Button z_Other :: Obsidian Mutation Observer z_Other :: Reset Grid-Size Preference z_Other :: Run Javascript on Page Load","title":"type/utility"}]}